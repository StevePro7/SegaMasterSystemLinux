                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___SMS__SEGA_signature
                                     12 	.globl _main
                                     13 	.globl _UNSAFE_SMS_VRAMmemcpy128
                                     14 	.globl _UNSAFE_SMS_copySpritestoSAT
                                     15 	.globl _SMS_VRAMmemset
                                     16 	.globl _SMS_getKeysStatus
                                     17 	.globl _SMS_loadSpritePalette
                                     18 	.globl _SMS_loadBGPalette
                                     19 	.globl _SMS_addSprite
                                     20 	.globl _SMS_initSprites
                                     21 	.globl _SMS_loadTiles
                                     22 	.globl _SMS_waitForVBlank
                                     23 	.globl _SMS_VDPturnOffFeature
                                     24 	.globl _SMS_VDPturnOnFeature
                                     25 	.globl _direction
                                     26 	.globl _playerYOffset
                                     27 	.globl _playerXOffset
                                     28 	.globl _spriteYOffset
                                     29 	.globl _spriteXOffset
                                     30 	.globl _scrollYOffset
                                     31 	.globl _scrollXOffset
                                     32 	.globl _spriteTileOffsets
                                     33 	.globl _actionButtonWatch
                                     34 	.globl _action
                                     35 	.globl _actionCount
                                     36 	.globl _animationCount
                                     37 	.globl _playerSpriteY
                                     38 	.globl _playerSpriteX
                                     39 	.globl _playerY
                                     40 	.globl _playerX
                                     41 	.globl _scrolltable
                                     42 	.globl _currentAttackSprites
                                     43 	.globl _attackSprites
                                     44 	.globl _PSGSFXSubstringRetAddr
                                     45 	.globl _PSGSFXSubstringLen
                                     46 	.globl _PSGSFXLoopFlag
                                     47 	.globl _PSGSFXSkipFrames
                                     48 	.globl _PSGSFXLoopPoint
                                     49 	.globl _PSGSFXPointer
                                     50 	.globl _PSGSFXStart
                                     51 	.globl _PSGSFXStatus
                                     52 	.globl _PSGSFXChan3Volume
                                     53 	.globl _PSGSFXChan2Volume
                                     54 	.globl _PSGChannel3SFX
                                     55 	.globl _PSGChannel2SFX
                                     56 	.globl _PSGChan3LowTone
                                     57 	.globl _PSGChan2HighTone
                                     58 	.globl _PSGChan2LowTone
                                     59 	.globl _PSGChan3Volume
                                     60 	.globl _PSGChan2Volume
                                     61 	.globl _PSGChan1Volume
                                     62 	.globl _PSGChan0Volume
                                     63 	.globl _PSGMusicSubstringRetAddr
                                     64 	.globl _PSGMusicSubstringLen
                                     65 	.globl _PSGMusicVolumeAttenuation
                                     66 	.globl _PSGMusicLastLatch
                                     67 	.globl _PSGLoopFlag
                                     68 	.globl _PSGMusicSkipFrames
                                     69 	.globl _PSGMusicLoopPoint
                                     70 	.globl _PSGMusicPointer
                                     71 	.globl _PSGMusicStart
                                     72 	.globl _PSGMusicStatus
                                     73 	.globl _GSL_RAM
                                     74 	.globl _SMS_SRAM
                                     75 	.globl _SRAM_bank_to_be_mapped_on_slot2
                                     76 	.globl _ROM_bank_to_be_mapped_on_slot2
                                     77 	.globl _GSL_LUTRowUpdate
                                     78 	.globl _GSL_LUTColumnUpdate
                                     79 	.globl _metatilesMetaLUT
                                     80 	.globl _spriteAttackRightMeta
                                     81 	.globl _spriteAttackLeftMeta
                                     82 	.globl _spriteAttackDownMeta
                                     83 	.globl _spriteAttackUpMeta
                                     84 	.globl _spriteAttackRight
                                     85 	.globl _spriteAttackLeft
                                     86 	.globl _spriteAttackDown
                                     87 	.globl _spriteAttackUp
                                     88 	.globl _spriteMoveRight
                                     89 	.globl _spriteMoveLeft
                                     90 	.globl _spriteMoveDown
                                     91 	.globl _spriteMoveUp
                                     92 	.globl _GSL_positionWindow
                                     93 	.globl _GSL_metatileLookup
                                     94 	.globl _GSL_tileLookup
                                     95 	.globl _GSL_refreshVDP
                                     96 	.globl _GSL_scroll
                                     97 	.globl _GSL_VBlank
                                     98 	.globl _GSL_metatileUpdate
                                     99 	.globl _GSL_metatileUpdateCustom
                                    100 	.globl _GSL_getMapWidthInPixels
                                    101 	.globl _GSL_getMapHeightInPixels
                                    102 	.globl _GSL_getMapWidthInMetatiles
                                    103 	.globl _GSL_getMapHeightInMetatiles
                                    104 	.globl _GSL_getScrolltableSize
                                    105 	.globl _GSL_getCurrentX
                                    106 	.globl _GSL_getCurrentY
                                    107 	.globl _GSL_getCollisionCount
                                    108 	.globl _GSL_getScrolltableAddress
                                    109 	.globl _GSL_initializeMap
                                    110 	.globl _PSGStop
                                    111 	.globl _PSGResume
                                    112 	.globl _PSGPlay
                                    113 	.globl _PSGCancelLoop
                                    114 	.globl _PSGPlayNoRepeat
                                    115 	.globl _PSGGetStatus
                                    116 	.globl _PSGSilenceChannels
                                    117 	.globl _PSGRestoreVolumes
                                    118 	.globl _PSGSetMusicVolumeAttenuation
                                    119 	.globl _PSGSFXStop
                                    120 	.globl _PSGSFXPlay
                                    121 	.globl _PSGSFXCancelLoop
                                    122 	.globl _PSGSFXGetStatus
                                    123 	.globl _PSGSFXPlayLoop
                                    124 	.globl _PSGFrame
                                    125 	.globl _PSGSFXFrame
                                    126 	.globl _processSpritesActiveDisplay
                                    127 	.globl _processSpritesVBlank
                                    128 	.globl _processUserInput
                                    129 	.globl _processUpKey
                                    130 	.globl _processDownKey
                                    131 	.globl _processLeftKey
                                    132 	.globl _processRightKey
                                    133 	.globl _processAttackKey
                                    134 	.globl _checkForAttackInteraction
                                    135 	.globl _processAttackInteraction
                                    136 ;--------------------------------------------------------
                                    137 ; special function registers
                                    138 ;--------------------------------------------------------
                           00007F   139 _PSGPort	=	0x007f
                                    140 ;--------------------------------------------------------
                                    141 ; ram data
                                    142 ;--------------------------------------------------------
                                    143 	.area _DATA
                           00FFFF   144 _ROM_bank_to_be_mapped_on_slot2	=	0xffff
                           00FFFC   145 _SRAM_bank_to_be_mapped_on_slot2	=	0xfffc
                           008000   146 _SMS_SRAM	=	0x8000
      000000                        147 _GSL_RAM::
      000000                        148 	.ds 263
      000107                        149 _PSGMusicStatus::
      000107                        150 	.ds 1
      000108                        151 _PSGMusicStart::
      000108                        152 	.ds 2
      00010A                        153 _PSGMusicPointer::
      00010A                        154 	.ds 2
      00010C                        155 _PSGMusicLoopPoint::
      00010C                        156 	.ds 2
      00010E                        157 _PSGMusicSkipFrames::
      00010E                        158 	.ds 1
      00010F                        159 _PSGLoopFlag::
      00010F                        160 	.ds 1
      000110                        161 _PSGMusicLastLatch::
      000110                        162 	.ds 1
      000111                        163 _PSGMusicVolumeAttenuation::
      000111                        164 	.ds 1
      000112                        165 _PSGMusicSubstringLen::
      000112                        166 	.ds 1
      000113                        167 _PSGMusicSubstringRetAddr::
      000113                        168 	.ds 2
      000115                        169 _PSGChan0Volume::
      000115                        170 	.ds 1
      000116                        171 _PSGChan1Volume::
      000116                        172 	.ds 1
      000117                        173 _PSGChan2Volume::
      000117                        174 	.ds 1
      000118                        175 _PSGChan3Volume::
      000118                        176 	.ds 1
      000119                        177 _PSGChan2LowTone::
      000119                        178 	.ds 1
      00011A                        179 _PSGChan2HighTone::
      00011A                        180 	.ds 1
      00011B                        181 _PSGChan3LowTone::
      00011B                        182 	.ds 1
      00011C                        183 _PSGChannel2SFX::
      00011C                        184 	.ds 1
      00011D                        185 _PSGChannel3SFX::
      00011D                        186 	.ds 1
      00011E                        187 _PSGSFXChan2Volume::
      00011E                        188 	.ds 1
      00011F                        189 _PSGSFXChan3Volume::
      00011F                        190 	.ds 1
      000120                        191 _PSGSFXStatus::
      000120                        192 	.ds 1
      000121                        193 _PSGSFXStart::
      000121                        194 	.ds 2
      000123                        195 _PSGSFXPointer::
      000123                        196 	.ds 2
      000125                        197 _PSGSFXLoopPoint::
      000125                        198 	.ds 2
      000127                        199 _PSGSFXSkipFrames::
      000127                        200 	.ds 1
      000128                        201 _PSGSFXLoopFlag::
      000128                        202 	.ds 1
      000129                        203 _PSGSFXSubstringLen::
      000129                        204 	.ds 1
      00012A                        205 _PSGSFXSubstringRetAddr::
      00012A                        206 	.ds 2
      00012C                        207 _attackSprites::
      00012C                        208 	.ds 2
      00012E                        209 _currentAttackSprites::
      00012E                        210 	.ds 2
      000130                        211 _scrolltable::
      000130                        212 	.ds 4109
                                    213 ;--------------------------------------------------------
                                    214 ; ram data
                                    215 ;--------------------------------------------------------
                                    216 	.area _INITIALIZED
      000000                        217 _playerX::
      000000                        218 	.ds 2
      000002                        219 _playerY::
      000002                        220 	.ds 2
      000004                        221 _playerSpriteX::
      000004                        222 	.ds 1
      000005                        223 _playerSpriteY::
      000005                        224 	.ds 1
      000006                        225 _animationCount::
      000006                        226 	.ds 1
      000007                        227 _actionCount::
      000007                        228 	.ds 1
      000008                        229 _action::
      000008                        230 	.ds 1
      000009                        231 _actionButtonWatch::
      000009                        232 	.ds 1
      00000A                        233 _spriteTileOffsets::
      00000A                        234 	.ds 2
      00000C                        235 _scrollXOffset::
      00000C                        236 	.ds 1
      00000D                        237 _scrollYOffset::
      00000D                        238 	.ds 1
      00000E                        239 _spriteXOffset::
      00000E                        240 	.ds 1
      00000F                        241 _spriteYOffset::
      00000F                        242 	.ds 1
      000010                        243 _playerXOffset::
      000010                        244 	.ds 2
      000012                        245 _playerYOffset::
      000012                        246 	.ds 2
      000014                        247 _direction::
      000014                        248 	.ds 1
                                    249 ;--------------------------------------------------------
                                    250 ; absolute external ram data
                                    251 ;--------------------------------------------------------
                                    252 	.area _DABS (ABS)
                                    253 ;--------------------------------------------------------
                                    254 ; global & static initialisations
                                    255 ;--------------------------------------------------------
                                    256 	.area _HOME
                                    257 	.area _GSINIT
                                    258 	.area _GSFINAL
                                    259 	.area _GSINIT
                                    260 ;--------------------------------------------------------
                                    261 ; Home
                                    262 ;--------------------------------------------------------
                                    263 	.area _HOME
                                    264 	.area _HOME
                                    265 ;--------------------------------------------------------
                                    266 ; code
                                    267 ;--------------------------------------------------------
                                    268 	.area _CODE
                                    269 ;libs\GSLib.c:56: void GSL_positionWindow(unsigned int X, unsigned int Y)
                                    270 ;	---------------------------------
                                    271 ; Function GSL_positionWindow
                                    272 ; ---------------------------------
      000000                        273 _GSL_positionWindow::
                                    274 ;libs\GSLib.c:68: __endasm;
      000000 D1               [10]  275 	pop	de
      000001 E1               [10]  276 	pop	hl
      000002 C1               [10]  277 	pop	bc
      000003 C5               [11]  278 	push	bc
      000004 E5               [11]  279 	push	hl
      000005 D5               [11]  280 	push	de
      000006 CDr30r03         [17]  281 	call	GSL_PositionWindow
                                    282 ;libs\GSLib.c:69: }							
      000009 C9               [10]  283 	ret
      00000A                        284 _spriteMoveUp:
      00000A 80 00                  285 	.dw #0x0080
      00000C 00 00                  286 	.dw #0x0000
      00000E 80 00                  287 	.dw #0x0080
      000010 00 01                  288 	.dw #0x0100
      000012                        289 _spriteMoveDown:
      000012 00 02                  290 	.dw #0x0200
      000014 80 01                  291 	.dw #0x0180
      000016 00 02                  292 	.dw #0x0200
      000018 80 02                  293 	.dw #0x0280
      00001A                        294 _spriteMoveLeft:
      00001A 80 03                  295 	.dw #0x0380
      00001C 00 03                  296 	.dw #0x0300
      00001E 80 03                  297 	.dw #0x0380
      000020 00 04                  298 	.dw #0x0400
      000022                        299 _spriteMoveRight:
      000022 00 05                  300 	.dw #0x0500
      000024 80 04                  301 	.dw #0x0480
      000026 00 05                  302 	.dw #0x0500
      000028 80 05                  303 	.dw #0x0580
      00002A                        304 _spriteAttackUp:
      00002A 80 00                  305 	.dw #0x0080
      00002C 00 09                  306 	.dw #0x0900
      00002E 00 08                  307 	.dw #0x0800
      000030 00 07                  308 	.dw #0x0700
      000032 00 06                  309 	.dw #0x0600
      000034                        310 _spriteAttackDown:
      000034 00 02                  311 	.dw #0x0200
      000036 00 0D                  312 	.dw #0x0d00
      000038 00 0C                  313 	.dw #0x0c00
      00003A 00 0B                  314 	.dw #0x0b00
      00003C 00 0A                  315 	.dw #0x0a00
      00003E                        316 _spriteAttackLeft:
      00003E 80 03                  317 	.dw #0x0380
      000040 00 11                  318 	.dw #0x1100
      000042 00 10                  319 	.dw #0x1000
      000044 00 0F                  320 	.dw #0x0f00
      000046 00 0E                  321 	.dw #0x0e00
      000048                        322 _spriteAttackRight:
      000048 00 05                  323 	.dw #0x0500
      00004A 00 15                  324 	.dw #0x1500
      00004C 00 14                  325 	.dw #0x1400
      00004E 00 13                  326 	.dw #0x1300
      000050 00 12                  327 	.dw #0x1200
      000052                        328 _spriteAttackUpMeta:
      000052 00                     329 	.db #0x00	; 0
      000053 00                     330 	.db #0x00	; 0
      000054 BF                     331 	.db #0xbf	; 191
      000055 00                     332 	.db #0x00	; 0
      000056 10                     333 	.db #0x10	; 16
      000057 BF                     334 	.db #0xbf	; 191
      000058 00                     335 	.db #0x00	; 0
      000059 20                     336 	.db #0x20	; 32
      00005A BF                     337 	.db #0xbf	; 191
      00005B 00                     338 	.db #0x00	; 0
      00005C 30                     339 	.db #0x30	; 48	'0'
      00005D BF                     340 	.db #0xbf	; 191
      00005E 00                     341 	.db #0x00	; 0
      00005F 00                     342 	.db #0x00	; 0
      000060 00                     343 	.db #0x00	; 0
      000061 00                     344 	.db #0x00	; 0
      000062 00                     345 	.db #0x00	; 0
      000063 F0                     346 	.db #0xf0	; 240
      000064 04                     347 	.db #0x04	; 4
      000065 F8                     348 	.db #0xf8	; 248
      000066 F0                     349 	.db #0xf0	; 240
      000067 05                     350 	.db #0x05	; 5
      000068 F0                     351 	.db #0xf0	; 240
      000069 F0                     352 	.db #0xf0	; 240
      00006A 06                     353 	.db #0x06	; 6
      00006B F0                     354 	.db #0xf0	; 240
      00006C F8                     355 	.db #0xf8	; 248
      00006D 07                     356 	.db #0x07	; 7
      00006E 00                     357 	.db #0x00	; 0
      00006F 00                     358 	.db #0x00	; 0
      000070 00                     359 	.db #0x00	; 0
      000071 00                     360 	.db #0x00	; 0
      000072 00                     361 	.db #0x00	; 0
      000073 F0                     362 	.db #0xf0	; 240
      000074 04                     363 	.db #0x04	; 4
      000075 F8                     364 	.db #0xf8	; 248
      000076 F0                     365 	.db #0xf0	; 240
      000077 05                     366 	.db #0x05	; 5
      000078 00                     367 	.db #0x00	; 0
      000079 10                     368 	.db #0x10	; 16
      00007A BF                     369 	.db #0xbf	; 191
      00007B 00                     370 	.db #0x00	; 0
      00007C 18                     371 	.db #0x18	; 24
      00007D BF                     372 	.db #0xbf	; 191
      00007E 00                     373 	.db #0x00	; 0
      00007F 00                     374 	.db #0x00	; 0
      000080 00                     375 	.db #0x00	; 0
      000081 00                     376 	.db #0x00	; 0
      000082 08                     377 	.db #0x08	; 8
      000083 F8                     378 	.db #0xf8	; 248
      000084 04                     379 	.db #0x04	; 4
      000085 08                     380 	.db #0x08	; 8
      000086 F0                     381 	.db #0xf0	; 240
      000087 05                     382 	.db #0x05	; 5
      000088 00                     383 	.db #0x00	; 0
      000089 F0                     384 	.db #0xf0	; 240
      00008A 06                     385 	.db #0x06	; 6
      00008B 00                     386 	.db #0x00	; 0
      00008C 18                     387 	.db #0x18	; 24
      00008D BF                     388 	.db #0xbf	; 191
      00008E 00                     389 	.db #0x00	; 0
      00008F 00                     390 	.db #0x00	; 0
      000090 00                     391 	.db #0x00	; 0
      000091 00                     392 	.db #0x00	; 0
      000092 08                     393 	.db #0x08	; 8
      000093 00                     394 	.db #0x00	; 0
      000094 04                     395 	.db #0x04	; 4
      000095 08                     396 	.db #0x08	; 8
      000096 F8                     397 	.db #0xf8	; 248
      000097 05                     398 	.db #0x05	; 5
      000098 00                     399 	.db #0x00	; 0
      000099 10                     400 	.db #0x10	; 16
      00009A BF                     401 	.db #0xbf	; 191
      00009B 00                     402 	.db #0x00	; 0
      00009C 18                     403 	.db #0x18	; 24
      00009D BF                     404 	.db #0xbf	; 191
      00009E                        405 _spriteAttackDownMeta:
      00009E 00                     406 	.db #0x00	; 0
      00009F 00                     407 	.db #0x00	; 0
      0000A0 BF                     408 	.db #0xbf	; 191
      0000A1 00                     409 	.db #0x00	; 0
      0000A2 10                     410 	.db #0x10	; 16
      0000A3 BF                     411 	.db #0xbf	; 191
      0000A4 00                     412 	.db #0x00	; 0
      0000A5 20                     413 	.db #0x20	; 32
      0000A6 BF                     414 	.db #0xbf	; 191
      0000A7 00                     415 	.db #0x00	; 0
      0000A8 30                     416 	.db #0x30	; 48	'0'
      0000A9 BF                     417 	.db #0xbf	; 191
      0000AA 00                     418 	.db #0x00	; 0
      0000AB 00                     419 	.db #0x00	; 0
      0000AC 00                     420 	.db #0x00	; 0
      0000AD 00                     421 	.db #0x00	; 0
      0000AE F8                     422 	.db #0xf8	; 248
      0000AF 08                     423 	.db #0x08	; 8
      0000B0 04                     424 	.db #0x04	; 4
      0000B1 00                     425 	.db #0x00	; 0
      0000B2 08                     426 	.db #0x08	; 8
      0000B3 05                     427 	.db #0x05	; 5
      0000B4 08                     428 	.db #0x08	; 8
      0000B5 08                     429 	.db #0x08	; 8
      0000B6 06                     430 	.db #0x06	; 6
      0000B7 08                     431 	.db #0x08	; 8
      0000B8 00                     432 	.db #0x00	; 0
      0000B9 07                     433 	.db #0x07	; 7
      0000BA 00                     434 	.db #0x00	; 0
      0000BB 00                     435 	.db #0x00	; 0
      0000BC 00                     436 	.db #0x00	; 0
      0000BD 00                     437 	.db #0x00	; 0
      0000BE 00                     438 	.db #0x00	; 0
      0000BF 08                     439 	.db #0x08	; 8
      0000C0 04                     440 	.db #0x04	; 4
      0000C1 F8                     441 	.db #0xf8	; 248
      0000C2 08                     442 	.db #0x08	; 8
      0000C3 05                     443 	.db #0x05	; 5
      0000C4 00                     444 	.db #0x00	; 0
      0000C5 10                     445 	.db #0x10	; 16
      0000C6 BF                     446 	.db #0xbf	; 191
      0000C7 00                     447 	.db #0x00	; 0
      0000C8 18                     448 	.db #0x18	; 24
      0000C9 BF                     449 	.db #0xbf	; 191
      0000CA 00                     450 	.db #0x00	; 0
      0000CB 00                     451 	.db #0x00	; 0
      0000CC 00                     452 	.db #0x00	; 0
      0000CD 00                     453 	.db #0x00	; 0
      0000CE F8                     454 	.db #0xf8	; 248
      0000CF 08                     455 	.db #0x08	; 8
      0000D0 04                     456 	.db #0x04	; 4
      0000D1 F0                     457 	.db #0xf0	; 240
      0000D2 08                     458 	.db #0x08	; 8
      0000D3 05                     459 	.db #0x05	; 5
      0000D4 F0                     460 	.db #0xf0	; 240
      0000D5 00                     461 	.db #0x00	; 0
      0000D6 06                     462 	.db #0x06	; 6
      0000D7 00                     463 	.db #0x00	; 0
      0000D8 18                     464 	.db #0x18	; 24
      0000D9 BF                     465 	.db #0xbf	; 191
      0000DA 00                     466 	.db #0x00	; 0
      0000DB 00                     467 	.db #0x00	; 0
      0000DC 00                     468 	.db #0x00	; 0
      0000DD 00                     469 	.db #0x00	; 0
      0000DE F0                     470 	.db #0xf0	; 240
      0000DF F8                     471 	.db #0xf8	; 248
      0000E0 04                     472 	.db #0x04	; 4
      0000E1 F0                     473 	.db #0xf0	; 240
      0000E2 00                     474 	.db #0x00	; 0
      0000E3 05                     475 	.db #0x05	; 5
      0000E4 00                     476 	.db #0x00	; 0
      0000E5 10                     477 	.db #0x10	; 16
      0000E6 BF                     478 	.db #0xbf	; 191
      0000E7 00                     479 	.db #0x00	; 0
      0000E8 18                     480 	.db #0x18	; 24
      0000E9 BF                     481 	.db #0xbf	; 191
      0000EA                        482 _spriteAttackLeftMeta:
      0000EA 00                     483 	.db #0x00	; 0
      0000EB 00                     484 	.db #0x00	; 0
      0000EC BF                     485 	.db #0xbf	; 191
      0000ED 00                     486 	.db #0x00	; 0
      0000EE 10                     487 	.db #0x10	; 16
      0000EF BF                     488 	.db #0xbf	; 191
      0000F0 00                     489 	.db #0x00	; 0
      0000F1 20                     490 	.db #0x20	; 32
      0000F2 BF                     491 	.db #0xbf	; 191
      0000F3 00                     492 	.db #0x00	; 0
      0000F4 30                     493 	.db #0x30	; 48	'0'
      0000F5 BF                     494 	.db #0xbf	; 191
      0000F6 00                     495 	.db #0x00	; 0
      0000F7 00                     496 	.db #0x00	; 0
      0000F8 00                     497 	.db #0x00	; 0
      0000F9 00                     498 	.db #0x00	; 0
      0000FA F0                     499 	.db #0xf0	; 240
      0000FB F8                     500 	.db #0xf8	; 248
      0000FC 04                     501 	.db #0x04	; 4
      0000FD F0                     502 	.db #0xf0	; 240
      0000FE 00                     503 	.db #0x00	; 0
      0000FF 05                     504 	.db #0x05	; 5
      000100 F0                     505 	.db #0xf0	; 240
      000101 08                     506 	.db #0x08	; 8
      000102 06                     507 	.db #0x06	; 6
      000103 F8                     508 	.db #0xf8	; 248
      000104 08                     509 	.db #0x08	; 8
      000105 07                     510 	.db #0x07	; 7
      000106 00                     511 	.db #0x00	; 0
      000107 00                     512 	.db #0x00	; 0
      000108 00                     513 	.db #0x00	; 0
      000109 00                     514 	.db #0x00	; 0
      00010A F0                     515 	.db #0xf0	; 240
      00010B F8                     516 	.db #0xf8	; 248
      00010C 04                     517 	.db #0x04	; 4
      00010D F0                     518 	.db #0xf0	; 240
      00010E 00                     519 	.db #0x00	; 0
      00010F 05                     520 	.db #0x05	; 5
      000110 00                     521 	.db #0x00	; 0
      000111 10                     522 	.db #0x10	; 16
      000112 BF                     523 	.db #0xbf	; 191
      000113 00                     524 	.db #0x00	; 0
      000114 18                     525 	.db #0x18	; 24
      000115 BF                     526 	.db #0xbf	; 191
      000116 00                     527 	.db #0x00	; 0
      000117 00                     528 	.db #0x00	; 0
      000118 00                     529 	.db #0x00	; 0
      000119 00                     530 	.db #0x00	; 0
      00011A F0                     531 	.db #0xf0	; 240
      00011B F8                     532 	.db #0xf8	; 248
      00011C 04                     533 	.db #0x04	; 4
      00011D F0                     534 	.db #0xf0	; 240
      00011E F0                     535 	.db #0xf0	; 240
      00011F 05                     536 	.db #0x05	; 5
      000120 F8                     537 	.db #0xf8	; 248
      000121 F0                     538 	.db #0xf0	; 240
      000122 06                     539 	.db #0x06	; 6
      000123 00                     540 	.db #0x00	; 0
      000124 18                     541 	.db #0x18	; 24
      000125 BF                     542 	.db #0xbf	; 191
      000126 00                     543 	.db #0x00	; 0
      000127 00                     544 	.db #0x00	; 0
      000128 00                     545 	.db #0x00	; 0
      000129 00                     546 	.db #0x00	; 0
      00012A 00                     547 	.db #0x00	; 0
      00012B F0                     548 	.db #0xf0	; 240
      00012C 04                     549 	.db #0x04	; 4
      00012D F8                     550 	.db #0xf8	; 248
      00012E F0                     551 	.db #0xf0	; 240
      00012F 05                     552 	.db #0x05	; 5
      000130 00                     553 	.db #0x00	; 0
      000131 10                     554 	.db #0x10	; 16
      000132 BF                     555 	.db #0xbf	; 191
      000133 00                     556 	.db #0x00	; 0
      000134 18                     557 	.db #0x18	; 24
      000135 BF                     558 	.db #0xbf	; 191
      000136                        559 _spriteAttackRightMeta:
      000136 00                     560 	.db #0x00	; 0
      000137 00                     561 	.db #0x00	; 0
      000138 BF                     562 	.db #0xbf	; 191
      000139 00                     563 	.db #0x00	; 0
      00013A 10                     564 	.db #0x10	; 16
      00013B BF                     565 	.db #0xbf	; 191
      00013C 00                     566 	.db #0x00	; 0
      00013D 20                     567 	.db #0x20	; 32
      00013E BF                     568 	.db #0xbf	; 191
      00013F 00                     569 	.db #0x00	; 0
      000140 30                     570 	.db #0x30	; 48	'0'
      000141 BF                     571 	.db #0xbf	; 191
      000142 00                     572 	.db #0x00	; 0
      000143 00                     573 	.db #0x00	; 0
      000144 00                     574 	.db #0x00	; 0
      000145 00                     575 	.db #0x00	; 0
      000146 08                     576 	.db #0x08	; 8
      000147 00                     577 	.db #0x00	; 0
      000148 04                     578 	.db #0x04	; 4
      000149 08                     579 	.db #0x08	; 8
      00014A F8                     580 	.db #0xf8	; 248
      00014B 05                     581 	.db #0x05	; 5
      00014C 08                     582 	.db #0x08	; 8
      00014D F0                     583 	.db #0xf0	; 240
      00014E 06                     584 	.db #0x06	; 6
      00014F 00                     585 	.db #0x00	; 0
      000150 F0                     586 	.db #0xf0	; 240
      000151 07                     587 	.db #0x07	; 7
      000152 00                     588 	.db #0x00	; 0
      000153 00                     589 	.db #0x00	; 0
      000154 00                     590 	.db #0x00	; 0
      000155 00                     591 	.db #0x00	; 0
      000156 08                     592 	.db #0x08	; 8
      000157 00                     593 	.db #0x00	; 0
      000158 04                     594 	.db #0x04	; 4
      000159 08                     595 	.db #0x08	; 8
      00015A F8                     596 	.db #0xf8	; 248
      00015B 05                     597 	.db #0x05	; 5
      00015C 00                     598 	.db #0x00	; 0
      00015D 10                     599 	.db #0x10	; 16
      00015E BF                     600 	.db #0xbf	; 191
      00015F 00                     601 	.db #0x00	; 0
      000160 18                     602 	.db #0x18	; 24
      000161 BF                     603 	.db #0xbf	; 191
      000162 00                     604 	.db #0x00	; 0
      000163 00                     605 	.db #0x00	; 0
      000164 00                     606 	.db #0x00	; 0
      000165 00                     607 	.db #0x00	; 0
      000166 00                     608 	.db #0x00	; 0
      000167 08                     609 	.db #0x08	; 8
      000168 04                     610 	.db #0x04	; 4
      000169 08                     611 	.db #0x08	; 8
      00016A 08                     612 	.db #0x08	; 8
      00016B 05                     613 	.db #0x05	; 5
      00016C 08                     614 	.db #0x08	; 8
      00016D 00                     615 	.db #0x00	; 0
      00016E 06                     616 	.db #0x06	; 6
      00016F 00                     617 	.db #0x00	; 0
      000170 18                     618 	.db #0x18	; 24
      000171 BF                     619 	.db #0xbf	; 191
      000172 00                     620 	.db #0x00	; 0
      000173 00                     621 	.db #0x00	; 0
      000174 00                     622 	.db #0x00	; 0
      000175 00                     623 	.db #0x00	; 0
      000176 F8                     624 	.db #0xf8	; 248
      000177 08                     625 	.db #0x08	; 8
      000178 04                     626 	.db #0x04	; 4
      000179 00                     627 	.db #0x00	; 0
      00017A 08                     628 	.db #0x08	; 8
      00017B 05                     629 	.db #0x05	; 5
      00017C 00                     630 	.db #0x00	; 0
      00017D 10                     631 	.db #0x10	; 16
      00017E BF                     632 	.db #0xbf	; 191
      00017F 00                     633 	.db #0x00	; 0
      000180 18                     634 	.db #0x18	; 24
      000181 BF                     635 	.db #0xbf	; 191
      000182                        636 _metatilesMetaLUT:
      000182 00                     637 	.db #0x00	; 0
      000183 00                     638 	.db #0x00	; 0
      000184 00                     639 	.db #0x00	; 0
      000185 00                     640 	.db #0x00	; 0
      000186 00                     641 	.db #0x00	; 0
      000187 00                     642 	.db #0x00	; 0
      000188 00                     643 	.db #0x00	; 0
      000189 00                     644 	.db #0x00	; 0
      00018A 00                     645 	.db #0x00	; 0
      00018B 00                     646 	.db #0x00	; 0
      00018C 01                     647 	.db #0x01	; 1
      00018D 00                     648 	.db #0x00	; 0
      00018E 00                     649 	.db #0x00	; 0
      00018F 00                     650 	.db #0x00	; 0
      000190 00                     651 	.db #0x00	; 0
      000191 00                     652 	.db #0x00	; 0
      000192 01                     653 	.db #0x01	; 1
      000193 00                     654 	.db #0x00	; 0
      000194 00                     655 	.db #0x00	; 0
      000195 00                     656 	.db #0x00	; 0
      000196 00                     657 	.db #0x00	; 0
      000197 00                     658 	.db #0x00	; 0
      000198 00                     659 	.db #0x00	; 0
      000199 00                     660 	.db #0x00	; 0
      00019A 00                     661 	.db #0x00	; 0
      00019B 00                     662 	.db #0x00	; 0
      00019C 00                     663 	.db #0x00	; 0
      00019D 00                     664 	.db #0x00	; 0
      00019E 00                     665 	.db #0x00	; 0
      00019F 00                     666 	.db #0x00	; 0
      0001A0 00                     667 	.db #0x00	; 0
      0001A1 00                     668 	.db #0x00	; 0
      0001A2 01                     669 	.db #0x01	; 1
      0001A3 01                     670 	.db #0x01	; 1
      0001A4 00                     671 	.db #0x00	; 0
      0001A5 00                     672 	.db #0x00	; 0
      0001A6 00                     673 	.db #0x00	; 0
      0001A7 00                     674 	.db #0x00	; 0
      0001A8 00                     675 	.db #0x00	; 0
      0001A9 00                     676 	.db #0x00	; 0
      0001AA 00                     677 	.db #0x00	; 0
      0001AB 00                     678 	.db #0x00	; 0
      0001AC 00                     679 	.db #0x00	; 0
      0001AD 00                     680 	.db #0x00	; 0
      0001AE 00                     681 	.db #0x00	; 0
      0001AF 00                     682 	.db #0x00	; 0
      0001B0 00                     683 	.db #0x00	; 0
      0001B1 00                     684 	.db #0x00	; 0
      0001B2 00                     685 	.db #0x00	; 0
      0001B3 00                     686 	.db #0x00	; 0
      0001B4 00                     687 	.db #0x00	; 0
      0001B5 00                     688 	.db #0x00	; 0
      0001B6 00                     689 	.db #0x00	; 0
      0001B7 00                     690 	.db #0x00	; 0
      0001B8 00                     691 	.db #0x00	; 0
      0001B9 00                     692 	.db #0x00	; 0
      0001BA 01                     693 	.db #0x01	; 1
      0001BB 00                     694 	.db #0x00	; 0
      0001BC 00                     695 	.db #0x00	; 0
      0001BD 00                     696 	.db #0x00	; 0
      0001BE 00                     697 	.db #0x00	; 0
      0001BF 00                     698 	.db #0x00	; 0
      0001C0 00                     699 	.db #0x00	; 0
      0001C1 00                     700 	.db #0x00	; 0
      0001C2 00                     701 	.db #0x00	; 0
      0001C3 00                     702 	.db #0x00	; 0
      0001C4 00                     703 	.db #0x00	; 0
      0001C5 00                     704 	.db #0x00	; 0
      0001C6 00                     705 	.db #0x00	; 0
      0001C7 00                     706 	.db #0x00	; 0
      0001C8 00                     707 	.db #0x00	; 0
      0001C9 00                     708 	.db #0x00	; 0
      0001CA 01                     709 	.db #0x01	; 1
      0001CB 00                     710 	.db #0x00	; 0
      0001CC 00                     711 	.db #0x00	; 0
      0001CD 00                     712 	.db #0x00	; 0
      0001CE 00                     713 	.db #0x00	; 0
      0001CF 00                     714 	.db #0x00	; 0
      0001D0 00                     715 	.db #0x00	; 0
      0001D1 00                     716 	.db #0x00	; 0
      0001D2 00                     717 	.db #0x00	; 0
      0001D3 00                     718 	.db #0x00	; 0
      0001D4 00                     719 	.db #0x00	; 0
      0001D5 00                     720 	.db #0x00	; 0
      0001D6 00                     721 	.db #0x00	; 0
      0001D7 00                     722 	.db #0x00	; 0
      0001D8 00                     723 	.db #0x00	; 0
      0001D9 00                     724 	.db #0x00	; 0
      0001DA 01                     725 	.db #0x01	; 1
      0001DB 01                     726 	.db #0x01	; 1
      0001DC 00                     727 	.db #0x00	; 0
      0001DD 00                     728 	.db #0x00	; 0
      0001DE 00                     729 	.db #0x00	; 0
      0001DF 00                     730 	.db #0x00	; 0
      0001E0 00                     731 	.db #0x00	; 0
      0001E1 00                     732 	.db #0x00	; 0
      0001E2 00                     733 	.db #0x00	; 0
      0001E3 00                     734 	.db #0x00	; 0
      0001E4 00                     735 	.db #0x00	; 0
      0001E5 00                     736 	.db #0x00	; 0
      0001E6 00                     737 	.db #0x00	; 0
      0001E7 00                     738 	.db #0x00	; 0
      0001E8 00                     739 	.db #0x00	; 0
      0001E9 00                     740 	.db #0x00	; 0
      0001EA 00                     741 	.db #0x00	; 0
      0001EB 00                     742 	.db #0x00	; 0
      0001EC 00                     743 	.db #0x00	; 0
      0001ED 00                     744 	.db #0x00	; 0
      0001EE 00                     745 	.db #0x00	; 0
      0001EF 00                     746 	.db #0x00	; 0
      0001F0 00                     747 	.db #0x00	; 0
      0001F1 00                     748 	.db #0x00	; 0
      0001F2 00                     749 	.db #0x00	; 0
      0001F3 00                     750 	.db #0x00	; 0
      0001F4 00                     751 	.db #0x00	; 0
      0001F5 00                     752 	.db #0x00	; 0
      0001F6 00                     753 	.db #0x00	; 0
      0001F7 00                     754 	.db #0x00	; 0
      0001F8 00                     755 	.db #0x00	; 0
      0001F9 00                     756 	.db #0x00	; 0
      0001FA 00                     757 	.db #0x00	; 0
      0001FB 00                     758 	.db #0x00	; 0
      0001FC 00                     759 	.db #0x00	; 0
      0001FD 00                     760 	.db #0x00	; 0
      0001FE 00                     761 	.db #0x00	; 0
      0001FF 00                     762 	.db #0x00	; 0
      000200 00                     763 	.db #0x00	; 0
      000201 00                     764 	.db #0x00	; 0
      000202 00                     765 	.db #0x00	; 0
      000203 00                     766 	.db #0x00	; 0
      000204 00                     767 	.db #0x00	; 0
      000205 00                     768 	.db #0x00	; 0
      000206 00                     769 	.db #0x00	; 0
      000207 00                     770 	.db #0x00	; 0
      000208 00                     771 	.db #0x00	; 0
      000209 00                     772 	.db #0x00	; 0
      00020A 00                     773 	.db #0x00	; 0
      00020B 00                     774 	.db #0x00	; 0
      00020C 00                     775 	.db #0x00	; 0
      00020D 00                     776 	.db #0x00	; 0
      00020E 00                     777 	.db #0x00	; 0
      00020F 00                     778 	.db #0x00	; 0
      000210 00                     779 	.db #0x00	; 0
      000211 00                     780 	.db #0x00	; 0
      000212 00                     781 	.db #0x00	; 0
      000213 00                     782 	.db #0x00	; 0
      000214 00                     783 	.db #0x00	; 0
      000215 00                     784 	.db #0x00	; 0
      000216 00                     785 	.db #0x00	; 0
      000217 00                     786 	.db #0x00	; 0
      000218 00                     787 	.db #0x00	; 0
      000219 00                     788 	.db #0x00	; 0
      00021A 01                     789 	.db #0x01	; 1
      00021B 01                     790 	.db #0x01	; 1
      00021C 00                     791 	.db #0x00	; 0
      00021D 00                     792 	.db #0x00	; 0
      00021E 00                     793 	.db #0x00	; 0
      00021F 00                     794 	.db #0x00	; 0
      000220 00                     795 	.db #0x00	; 0
      000221 00                     796 	.db #0x00	; 0
      000222 00                     797 	.db #0x00	; 0
      000223 01                     798 	.db #0x01	; 1
      000224 00                     799 	.db #0x00	; 0
      000225 00                     800 	.db #0x00	; 0
      000226 00                     801 	.db #0x00	; 0
      000227 00                     802 	.db #0x00	; 0
      000228 00                     803 	.db #0x00	; 0
      000229 00                     804 	.db #0x00	; 0
      00022A 01                     805 	.db #0x01	; 1
      00022B 00                     806 	.db #0x00	; 0
      00022C 00                     807 	.db #0x00	; 0
      00022D 00                     808 	.db #0x00	; 0
      00022E 00                     809 	.db #0x00	; 0
      00022F 00                     810 	.db #0x00	; 0
      000230 00                     811 	.db #0x00	; 0
      000231 00                     812 	.db #0x00	; 0
      000232 01                     813 	.db #0x01	; 1
      000233 00                     814 	.db #0x00	; 0
      000234 00                     815 	.db #0x00	; 0
      000235 00                     816 	.db #0x00	; 0
      000236 00                     817 	.db #0x00	; 0
      000237 00                     818 	.db #0x00	; 0
      000238 00                     819 	.db #0x00	; 0
      000239 00                     820 	.db #0x00	; 0
      00023A 01                     821 	.db #0x01	; 1
      00023B 00                     822 	.db #0x00	; 0
      00023C 00                     823 	.db #0x00	; 0
      00023D 00                     824 	.db #0x00	; 0
      00023E 00                     825 	.db #0x00	; 0
      00023F 00                     826 	.db #0x00	; 0
      000240 00                     827 	.db #0x00	; 0
      000241 00                     828 	.db #0x00	; 0
      000242 00                     829 	.db #0x00	; 0
      000243 01                     830 	.db #0x01	; 1
      000244 00                     831 	.db #0x00	; 0
      000245 00                     832 	.db #0x00	; 0
      000246 00                     833 	.db #0x00	; 0
      000247 00                     834 	.db #0x00	; 0
      000248 00                     835 	.db #0x00	; 0
      000249 00                     836 	.db #0x00	; 0
      00024A 01                     837 	.db #0x01	; 1
      00024B 00                     838 	.db #0x00	; 0
      00024C 00                     839 	.db #0x00	; 0
      00024D 00                     840 	.db #0x00	; 0
      00024E 00                     841 	.db #0x00	; 0
      00024F 00                     842 	.db #0x00	; 0
      000250 00                     843 	.db #0x00	; 0
      000251 00                     844 	.db #0x00	; 0
      000252 00                     845 	.db #0x00	; 0
      000253 00                     846 	.db #0x00	; 0
      000254 00                     847 	.db #0x00	; 0
      000255 00                     848 	.db #0x00	; 0
      000256 00                     849 	.db #0x00	; 0
      000257 00                     850 	.db #0x00	; 0
      000258 00                     851 	.db #0x00	; 0
      000259 00                     852 	.db #0x00	; 0
      00025A 01                     853 	.db #0x01	; 1
      00025B 00                     854 	.db #0x00	; 0
      00025C 00                     855 	.db #0x00	; 0
      00025D 01                     856 	.db #0x01	; 1
      00025E 00                     857 	.db #0x00	; 0
      00025F 00                     858 	.db #0x00	; 0
      000260 00                     859 	.db #0x00	; 0
      000261 00                     860 	.db #0x00	; 0
      000262 00                     861 	.db #0x00	; 0
      000263 00                     862 	.db #0x00	; 0
      000264 00                     863 	.db #0x00	; 0
      000265 00                     864 	.db #0x00	; 0
      000266 00                     865 	.db #0x00	; 0
      000267 00                     866 	.db #0x00	; 0
      000268 00                     867 	.db #0x00	; 0
      000269 00                     868 	.db #0x00	; 0
      00026A 00                     869 	.db #0x00	; 0
      00026B 00                     870 	.db #0x00	; 0
      00026C 00                     871 	.db #0x00	; 0
      00026D 00                     872 	.db #0x00	; 0
      00026E 00                     873 	.db #0x00	; 0
      00026F 00                     874 	.db #0x00	; 0
      000270 00                     875 	.db #0x00	; 0
      000271 00                     876 	.db #0x00	; 0
      000272 01                     877 	.db #0x01	; 1
      000273 00                     878 	.db #0x00	; 0
      000274 00                     879 	.db #0x00	; 0
      000275 00                     880 	.db #0x00	; 0
      000276 00                     881 	.db #0x00	; 0
      000277 00                     882 	.db #0x00	; 0
      000278 00                     883 	.db #0x00	; 0
      000279 00                     884 	.db #0x00	; 0
      00027A 01                     885 	.db #0x01	; 1
      00027B 01                     886 	.db #0x01	; 1
      00027C 00                     887 	.db #0x00	; 0
      00027D 00                     888 	.db #0x00	; 0
      00027E 00                     889 	.db #0x00	; 0
      00027F 00                     890 	.db #0x00	; 0
      000280 00                     891 	.db #0x00	; 0
      000281 00                     892 	.db #0x00	; 0
                                    893 ;libs\GSLib.c:73: unsigned int * GSL_metatileLookup(unsigned int x, unsigned int y)
                                    894 ;	---------------------------------
                                    895 ; Function GSL_metatileLookup
                                    896 ; ---------------------------------
      000282                        897 _GSL_metatileLookup::
                                    898 ;libs\GSLib.c:84: __endasm;
      000282 D1               [10]  899 	pop	de
      000283 E1               [10]  900 	pop	hl
      000284 C1               [10]  901 	pop	bc
      000285 C5               [11]  902 	push	bc
      000286 E5               [11]  903 	push	hl
      000287 D5               [11]  904 	push	de
      000288 CDr87r03         [17]  905 	call	GSL_MetatileLookup
                                    906 ;libs\GSLib.c:85: }
      00028B C9               [10]  907 	ret
                                    908 ;libs\GSLib.c:89: void GSL_tileLookup(unsigned int x, unsigned int y)
                                    909 ;	---------------------------------
                                    910 ; Function GSL_tileLookup
                                    911 ; ---------------------------------
      00028C                        912 _GSL_tileLookup::
                                    913 ;libs\GSLib.c:101: __endasm;
      00028C D1               [10]  914 	pop	de
      00028D E1               [10]  915 	pop	hl
      00028E C1               [10]  916 	pop	bc
      00028F C5               [11]  917 	push	bc
      000290 E5               [11]  918 	push	hl
      000291 D5               [11]  919 	push	de
      000292 CDrCBr03         [17]  920 	call	GSL_TileLookup
                                    921 ;libs\GSLib.c:102: }
      000295 C9               [10]  922 	ret
                                    923 ;libs\GSLib.c:106: void GSL_refreshVDP()
                                    924 ;	---------------------------------
                                    925 ; Function GSL_refreshVDP
                                    926 ; ---------------------------------
      000296                        927 _GSL_refreshVDP::
                                    928 ;libs\GSLib.c:112: __endasm;
      000296 FD E5            [15]  929 	push	iy
      000298 CDrF0r03         [17]  930 	call	GSL_refreshVDP
      00029B FD E1            [14]  931 	pop	iy
                                    932 ;libs\GSLib.c:113: }
      00029D C9               [10]  933 	ret
                                    934 ;libs\GSLib.c:117: void GSL_scroll(char x, char y)
                                    935 ;	---------------------------------
                                    936 ; Function GSL_scroll
                                    937 ; ---------------------------------
      00029E                        938 _GSL_scroll::
                                    939 ;libs\GSLib.c:135: __endasm;
      00029E C1               [10]  940 	pop	bc
      00029F E1               [10]  941 	pop	hl
      0002A0 E5               [11]  942 	push	hl
      0002A1 C5               [11]  943 	push	bc
      0002A2 FD E5            [15]  944 	push	iy
      0002A4 7C               [ 4]  945 	ld	a, h
      0002A5 32r22r00         [13]  946 	ld	(# #_GSL_RAM + 34), a
      0002A8 7D               [ 4]  947 	ld	a, l
      0002A9 32r21r00         [13]  948 	ld	(# #_GSL_RAM + 33), a
      0002AC CDr7Fr05         [17]  949 	call	GSL_ActiveDisplayRoutine
      0002AF FD E1            [14]  950 	pop	iy
                                    951 ;libs\GSLib.c:136: }
      0002B1 C9               [10]  952 	ret
                                    953 ;libs\GSLib.c:140: void GSL_VBlank()
                                    954 ;	---------------------------------
                                    955 ; Function GSL_VBlank
                                    956 ; ---------------------------------
      0002B2                        957 _GSL_VBlank::
                                    958 ;libs\GSLib.c:146: __endasm;
      0002B2 FD E5            [15]  959 	push	iy
      0002B4 CDr5Br07         [17]  960 	call	GSL_VBlankRoutine
      0002B7 FD E1            [14]  961 	pop	iy
                                    962 ;libs\GSLib.c:147: }
      0002B9 C9               [10]  963 	ret
                                    964 ;libs\GSLib.c:151: void GSL_metatileUpdate()
                                    965 ;	---------------------------------
                                    966 ; Function GSL_metatileUpdate
                                    967 ; ---------------------------------
      0002BA                        968 _GSL_metatileUpdate::
                                    969 ;libs\GSLib.c:155: __endasm;
      0002BA CDrBCr04         [17]  970 	call	GSL_MetatileUpdate
                                    971 ;libs\GSLib.c:156: }
      0002BD C9               [10]  972 	ret
                                    973 ;libs\GSLib.c:160: void GSL_metatileUpdateCustom(unsigned int x, unsigned int y, unsigned int offset)
                                    974 ;	---------------------------------
                                    975 ; Function GSL_metatileUpdateCustom
                                    976 ; ---------------------------------
      0002BE                        977 _GSL_metatileUpdateCustom::
                                    978 ;libs\GSLib.c:178: __endasm;	
      0002BE C1               [10]  979 	pop	bc
      0002BF E1               [10]  980 	pop	hl
      0002C0 22r17r00         [16]  981 	ld	(# #_GSL_RAM + 23), hl
      0002C3 E1               [10]  982 	pop	hl
      0002C4 22r19r00         [16]  983 	ld	(# #_GSL_RAM + 25), hl
      0002C7 E1               [10]  984 	pop	hl
      0002C8 ED 5Br0Dr00      [20]  985 	ld	de, (# #_GSL_RAM + 13)
      0002CC 19               [11]  986 	add	hl, de
      0002CD 22r15r00         [16]  987 	ld	(# #_GSL_RAM + 21), hl
      0002D0 E5               [11]  988 	push	hl
      0002D1 E5               [11]  989 	push	hl
      0002D2 E5               [11]  990 	push	hl
      0002D3 C5               [11]  991 	push	bc
      0002D4 CDrBCr04         [17]  992 	call	GSL_MetatileUpdate
                                    993 ;libs\GSLib.c:179: }
      0002D7 C9               [10]  994 	ret
                                    995 ;libs\GSLib.c:182: unsigned int GSL_getMapWidthInPixels()
                                    996 ;	---------------------------------
                                    997 ; Function GSL_getMapWidthInPixels
                                    998 ; ---------------------------------
      0002D8                        999 _GSL_getMapWidthInPixels::
                                   1000 ;libs\GSLib.c:184: return *((unsigned int*)(&GSL_RAM + 6));
      0002D8 2Ar06r00         [16] 1001 	ld	hl, (#(_GSL_RAM + 0x0006) + 0)
                                   1002 ;libs\GSLib.c:185: }
      0002DB C9               [10] 1003 	ret
                                   1004 ;libs\GSLib.c:189: unsigned int GSL_getMapHeightInPixels()
                                   1005 ;	---------------------------------
                                   1006 ; Function GSL_getMapHeightInPixels
                                   1007 ; ---------------------------------
      0002DC                       1008 _GSL_getMapHeightInPixels::
                                   1009 ;libs\GSLib.c:191: return *((unsigned int*)(&GSL_RAM + 8));
      0002DC 2Ar08r00         [16] 1010 	ld	hl, (#(_GSL_RAM + 0x0008) + 0)
                                   1011 ;libs\GSLib.c:192: }
      0002DF C9               [10] 1012 	ret
                                   1013 ;libs\GSLib.c:196: unsigned int GSL_getMapWidthInMetatiles()
                                   1014 ;	---------------------------------
                                   1015 ; Function GSL_getMapWidthInMetatiles
                                   1016 ; ---------------------------------
      0002E0                       1017 _GSL_getMapWidthInMetatiles::
                                   1018 ;libs\GSLib.c:198: return *((unsigned int*)(&GSL_RAM + 2));
      0002E0 2Ar02r00         [16] 1019 	ld	hl, (#(_GSL_RAM + 0x0002) + 0)
                                   1020 ;libs\GSLib.c:199: }
      0002E3 C9               [10] 1021 	ret
                                   1022 ;libs\GSLib.c:203: unsigned int GSL_getMapHeightInMetatiles()
                                   1023 ;	---------------------------------
                                   1024 ; Function GSL_getMapHeightInMetatiles
                                   1025 ; ---------------------------------
      0002E4                       1026 _GSL_getMapHeightInMetatiles::
                                   1027 ;libs\GSLib.c:205: return *((unsigned int*)(&GSL_RAM + 4));
      0002E4 2Ar04r00         [16] 1028 	ld	hl, (#(_GSL_RAM + 0x0004) + 0)
                                   1029 ;libs\GSLib.c:206: }
      0002E7 C9               [10] 1030 	ret
                                   1031 ;libs\GSLib.c:210: unsigned int GSL_getScrolltableSize()
                                   1032 ;	---------------------------------
                                   1033 ; Function GSL_getScrolltableSize
                                   1034 ; ---------------------------------
      0002E8                       1035 _GSL_getScrolltableSize::
                                   1036 ;libs\GSLib.c:212: return *((unsigned int*)(&GSL_RAM + 0));
      0002E8 2Ar00r00         [16] 1037 	ld	hl, (#_GSL_RAM + 0)
                                   1038 ;libs\GSLib.c:213: }
      0002EB C9               [10] 1039 	ret
                                   1040 ;libs\GSLib.c:217: unsigned int GSL_getCurrentX()
                                   1041 ;	---------------------------------
                                   1042 ; Function GSL_getCurrentX
                                   1043 ; ---------------------------------
      0002EC                       1044 _GSL_getCurrentX::
                                   1045 ;libs\GSLib.c:219: return *((unsigned int*)(&GSL_RAM + 27));
      0002EC 2Ar1Br00         [16] 1046 	ld	hl, (#(_GSL_RAM + 0x001b) + 0)
                                   1047 ;libs\GSLib.c:220: }
      0002EF C9               [10] 1048 	ret
                                   1049 ;libs\GSLib.c:224: unsigned int GSL_getCurrentY()
                                   1050 ;	---------------------------------
                                   1051 ; Function GSL_getCurrentY
                                   1052 ; ---------------------------------
      0002F0                       1053 _GSL_getCurrentY::
                                   1054 ;libs\GSLib.c:226: return *((unsigned int*)(&GSL_RAM + 29));
      0002F0 2Ar1Dr00         [16] 1055 	ld	hl, (#(_GSL_RAM + 0x001d) + 0)
                                   1056 ;libs\GSLib.c:227: }
      0002F3 C9               [10] 1057 	ret
                                   1058 ;libs\GSLib.c:231: unsigned char GSL_getCollisionCount()
                                   1059 ;	---------------------------------
                                   1060 ; Function GSL_getCollisionCount
                                   1061 ; ---------------------------------
      0002F4                       1062 _GSL_getCollisionCount::
                                   1063 ;libs\GSLib.c:233: return *((unsigned char*)(&GSL_RAM + 44));
      0002F4 3Ar2Cr00         [13] 1064 	ld	a, (#(_GSL_RAM + 0x002c) + 0)
      0002F7 6F               [ 4] 1065 	ld	l, a
                                   1066 ;libs\GSLib.c:234: }
      0002F8 C9               [10] 1067 	ret
                                   1068 ;libs\GSLib.c:237: unsigned char * GSL_getScrolltableAddress()
                                   1069 ;	---------------------------------
                                   1070 ; Function GSL_getScrolltableAddress
                                   1071 ; ---------------------------------
      0002F9                       1072 _GSL_getScrolltableAddress::
                                   1073 ;libs\GSLib.c:239: return *(unsigned char**)(&GSL_RAM + 13);
      0002F9 2Ar0Dr00         [16] 1074 	ld	hl, (#(_GSL_RAM + 0x000d) + 0)
                                   1075 ;libs\GSLib.c:240: }
      0002FC C9               [10] 1076 	ret
                                   1077 ;libs\GSLib.c:244: void GSL_initializeMap(void *scrolltable, void *metatiles)
                                   1078 ;	---------------------------------
                                   1079 ; Function GSL_initializeMap
                                   1080 ; ---------------------------------
      0002FD                       1081 _GSL_initializeMap::
                                   1082 ;libs\GSLib.c:1724: __endasm;
      0002FD D1               [10] 1083 	pop	de
      0002FE E1               [10] 1084 	pop	hl
      0002FF C1               [10] 1085 	pop	bc
      000300 C5               [11] 1086 	push	bc
      000301 E5               [11] 1087 	push	hl
      000302 D5               [11] 1088 	push	de
      000303 CDr09r03         [17] 1089 	call	GSL_InitialiseMap
      000306 C3r36r0A         [10] 1090 	jp	_Finalise
                                   1091 ;	===============================================================================
                                   1092 ;	GSLib 1.0 ASM
      000309                       1093 	GSL_InitialiseMap:
                                   1094 ; == Store MetatileTable Address
      000309 ED 43r13r00      [20] 1095 	ld	(# #_GSL_RAM + 19), bc
                                   1096 ;	== Store CollisionCount (3rd byte in metatile table)
      00030D 03               [ 6] 1097 	inc	bc
      00030E 03               [ 6] 1098 	inc	bc
      00030F 03               [ 6] 1099 	inc	bc
      000310 0A               [ 7] 1100 	ld	a, (bc)
      000311 32r2Cr00         [13] 1101 	ld	(# #_GSL_RAM + 44), a
                                   1102 ;	== Copy Scrolltable Header to Ram
      000314 11r00r00         [10] 1103 	ld	de, #_GSL_RAM
      000317 01 0D 00         [10] 1104 	ld	bc, #13
      00031A ED B0            [21] 1105 	ldir
                                   1106 ;	== Store # #_GSL_RAM + 13 (ldir will have pushed past header to actual table)
      00031C 22r0Dr00         [16] 1107 	ld	(# #_GSL_RAM + 13), hl
                                   1108 ;	== Initialize Ram
      00031F 21rB7r00         [10] 1109 	ld	hl, # #_GSL_RAM + 183
      000322 22r2Ar00         [16] 1110 	ld	(# #_GSL_RAM + 42), hl
      000325 AF               [ 4] 1111 	xor	a
      000326 32r29r00         [13] 1112 	ld	(# #_GSL_RAM + 41), a
      000329 32r21r00         [13] 1113 	ld	(# #_GSL_RAM + 33), a
      00032C 32r22r00         [13] 1114 	ld	(# #_GSL_RAM + 34), a
      00032F C9               [10] 1115 	ret
      000330                       1116 	GSL_PositionWindow:
                                   1117 ; == Store (x, y) in ram
      000330 ED 43r1Dr00      [20] 1118 	ld	(# #_GSL_RAM + 29), bc
      000334 22r1Br00         [16] 1119 	ld	(# #_GSL_RAM + 27), hl
                                   1120 ;	**** Calculate and Store # #_GSL_RAM + 15
      000337 CDr87r03         [17] 1121 	call	GSL_MetatileLookup
                                   1122 ;	== Store # #_GSL_RAM + 15
      00033A 22r0Fr00         [16] 1123 	ld	(# #_GSL_RAM + 15), hl
                                   1124 ;	*** Calculate and Store # #_GSL_RAM + 31
                                   1125 ;	== Y Modulo 224 (height of window in pixels)
      00033D 2Ar1Dr00         [16] 1126 	ld	hl, (# #_GSL_RAM + 29)
      000340 1E E0            [ 7] 1127 	ld	e, #224
      000342 06 08            [ 7] 1128 	ld	b, #8
      000344                       1129 	_DivLoop:
      000344 ED 6A            [15] 1130 	adc hl, hl
      000346 7C               [ 4] 1131 	ld	a, h
      000347 38 03            [12] 1132 	jr	c, _DivCarry1
      000349 BB               [ 4] 1133 	cp	e
      00034A 38 03            [12] 1134 	jr	c, _DivCarry2
      00034C                       1135 	_DivCarry1:
      00034C 93               [ 4] 1136 	sub e
      00034D 67               [ 4] 1137 	ld	h, a
      00034E B7               [ 4] 1138 	or	a
      00034F                       1139 	_DivCarry2:
      00034F 10 F3            [13] 1140 	djnz _DivLoop
      000351 7D               [ 4] 1141 	ld	a, l
      000352 17               [ 4] 1142 	rla
      000353 2F               [ 4] 1143 	cpl
                                   1144 ;	== Store # #_GSL_RAM + 31
      000354 7C               [ 4] 1145 	ld	a, h
      000355 32r1Fr00         [13] 1146 	ld	(# #_GSL_RAM + 31), a
                                   1147 ;	*** Calculate and Store # #_GSL_RAM + 17 (top left nametable entry on VDP)
                                   1148 ;	== Use Previous Modulo to Calculate Namtable Row Address ((modulo & %11110000) * 4)
      000358 3E F8            [ 7] 1149 	ld	a, #248
      00035A A4               [ 4] 1150 	and	h
      00035B 6F               [ 4] 1151 	ld	l, a
      00035C AF               [ 4] 1152 	xor	a
      00035D 67               [ 4] 1153 	ld	h, a
      00035E 57               [ 4] 1154 	ld	d, a
      00035F 29               [11] 1155 	add	hl, hl
      000360 29               [11] 1156 	add	hl, hl
      000361 29               [11] 1157 	add	hl, hl
                                   1158 ;	== Add X worth of nametable entries.
                                   1159 ;	Divide by 8 then << 1 (below is optimization of this)
      000362 3Ar1Br00         [13] 1160 	ld	a, (# #_GSL_RAM + 27)
      000365 E6 F8            [ 7] 1161 	and	#248 ; %11111000
      000367 1F               [ 4] 1162 	rra
      000368 1F               [ 4] 1163 	rra
      000369 5F               [ 4] 1164 	ld	e, a
      00036A 19               [11] 1165 	add	hl, de
                                   1166 ;	== Add vdp base address of nametable
      00036B 11 00 78         [10] 1167 	ld	de, #0x7800 ; base address of nametable in vram including write bit set (14)
      00036E 19               [11] 1168 	add	hl, de
                                   1169 ;	== Store # #_GSL_RAM + 17
      00036F 23               [ 6] 1170 	inc	hl
      000370 23               [ 6] 1171 	inc	hl
      000371 22r11r00         [16] 1172 	ld	(# #_GSL_RAM + 17), hl
                                   1173 ;	== Set VDP Fine Scroll Values
      000374 3Ar1Br00         [13] 1174 	ld	a, (# #_GSL_RAM + 27)
      000377 D3 BF            [11] 1175 	out	(#0xBF), a
      000379 3E 88            [ 7] 1176 	ld	a, #136 ; $88
      00037B D3 BF            [11] 1177 	out	(#0xBF), a
      00037D 3Ar1Fr00         [13] 1178 	ld	a, (# #_GSL_RAM + 31)
      000380 D3 BF            [11] 1179 	out	(#0xBF), a
      000382 3E 89            [ 7] 1180 	ld	a, #137 ; $89
      000384 D3 BF            [11] 1181 	out	(#0xBF), a
      000386 C9               [10] 1182 	ret
      000387                       1183 	GSL_MetatileLookup:
                                   1184 ; == Convert Y to LUT Entry and retrieve value
      000387 22r17r00         [16] 1185 	ld	(# #_GSL_RAM + 23), hl
      00038A ED 43r19r00      [20] 1186 	ld	(# #_GSL_RAM + 25), bc
                                   1187 ;	== Divide Y by 16 to get Metatile Y Index
      00038E 79               [ 4] 1188 	ld	a, c
      00038F CB 38            [ 8] 1189 	srl	b
      000391 1F               [ 4] 1190 	rra
      000392 CB 38            [ 8] 1191 	srl	b
      000394 1F               [ 4] 1192 	rra
      000395 CB 38            [ 8] 1193 	srl	b
      000397 1F               [ 4] 1194 	rra
      000398 CB 38            [ 8] 1195 	srl	b
      00039A 1F               [ 4] 1196 	rra
      00039B 4F               [ 4] 1197 	ld	c, a
                                   1198 ;	== Multiply Metatile Y Index By Map Metatile Width
      00039C ED 5Br02r00      [20] 1199 	ld	de, (# #_GSL_RAM + 2)
      0003A0 21 00 00         [10] 1200 	ld	hl, #0
      0003A3 78               [ 4] 1201 	ld	a, b
      0003A4 06 10            [ 7] 1202 	ld	b, #16
      0003A6                       1203 	_Mult16Loop:
      0003A6 29               [11] 1204 	add hl, hl
      0003A7 CB 21            [ 8] 1205 	sla	c
      0003A9 17               [ 4] 1206 	rla
      0003AA 30 01            [12] 1207 	jr	nc, _Mult16NoAdd
      0003AC 19               [11] 1208 	add	hl, de
      0003AD                       1209 	_Mult16NoAdd:
      0003AD 10 F7            [13] 1210 	djnz _Mult16Loop
                                   1211 ;	== Divide X by 16 to get Metatile X Index and add
      0003AF ED 5Br17r00      [20] 1212 	ld	de, (# #_GSL_RAM + 23)
      0003B3 7B               [ 4] 1213 	ld	a, e
      0003B4 CB 3A            [ 8] 1214 	srl	d
      0003B6 1F               [ 4] 1215 	rra
      0003B7 CB 3A            [ 8] 1216 	srl	d
      0003B9 1F               [ 4] 1217 	rra
      0003BA CB 3A            [ 8] 1218 	srl	d
      0003BC 1F               [ 4] 1219 	rra
      0003BD CB 3A            [ 8] 1220 	srl	d
      0003BF 1F               [ 4] 1221 	rra
      0003C0 5F               [ 4] 1222 	ld	e, a
      0003C1 19               [11] 1223 	add	hl, de
                                   1224 ;	== Add # #_GSL_RAM + 19 Base Address
      0003C2 ED 5Br0Dr00      [20] 1225 	ld	de, (# #_GSL_RAM + 13)
      0003C6 19               [11] 1226 	add	hl, de
                                   1227 ;	== Put Metatile ID in a and store address in buffer.
      0003C7 22r15r00         [16] 1228 	ld	(# #_GSL_RAM + 21), hl
      0003CA C9               [10] 1229 	ret
      0003CB                       1230 	GSL_TileLookup:
                                   1231 ; == Create offset for within Metatile (which nametable entry does x,y point to)
      0003CB 3E 08            [ 7] 1232 	ld	a, #8 ; %00001000
      0003CD A5               [ 4] 1233 	and	l
      0003CE 1F               [ 4] 1234 	rra
      0003CF 1F               [ 4] 1235 	rra
      0003D0 57               [ 4] 1236 	ld	d, a
      0003D1 3E 08            [ 7] 1237 	ld	a, #8 ; %00001000
      0003D3 A1               [ 4] 1238 	and	c
      0003D4 1F               [ 4] 1239 	rra
      0003D5 B2               [ 4] 1240 	or	d
      0003D6 F5               [11] 1241 	push	af
                                   1242 ;	== Retrieve Metatile ID
      0003D7 CDr87r03         [17] 1243 	call	GSL_MetatileLookup
                                   1244 ;	== Resolve in to Metatile Address - ((ld << 3) + Offset + GSL_METATILE_TABLE)
      0003DA 7E               [ 7] 1245 	ld	a, (hl)
      0003DB 6F               [ 4] 1246 	ld	l, a
      0003DC E6 07            [ 7] 1247 	and	#7 ; %111
      0003DE 67               [ 4] 1248 	ld	h, a
      0003DF 7D               [ 4] 1249 	ld	a, l
      0003E0 E6 F8            [ 7] 1250 	and	#248 ; %11111000
      0003E2 6F               [ 4] 1251 	ld	l, a
      0003E3 F1               [10] 1252 	pop	af
      0003E4 B5               [ 4] 1253 	or	l
      0003E5 6F               [ 4] 1254 	ld	l, a ; hl = pointer to metatile nametable entry we need to write to vdp
      0003E6 ED 5Br13r00      [20] 1255 	ld	de, (# #_GSL_RAM + 19)
      0003EA 19               [11] 1256 	add	hl, de
                                   1257 ;	== Get Nametable entry using resolved address
      0003EB 7E               [ 7] 1258 	ld	a, (hl) ; indirection
      0003EC 23               [ 6] 1259 	inc	hl
      0003ED 66               [ 7] 1260 	ld	h, (hl)
      0003EE 6F               [ 4] 1261 	ld	l, a
      0003EF C9               [10] 1262 	ret
      0003F0                       1263 	GSL_refreshVDP:
                                   1264 ; == Set VDP Nametable Pointer
      0003F0 2Ar11r00         [16] 1265 	ld	hl, (# #_GSL_RAM + 17)
      0003F3 22r27r00         [16] 1266 	ld	(# #_GSL_RAM + 39), hl
                                   1267 ;	== Keep a Modified Y to reflect rows being updated
      0003F6 2Ar1Dr00         [16] 1268 	ld	hl, (# #_GSL_RAM + 29)
      0003F9 22r20r00         [16] 1269 	ld	(# #_GSL_RAM + 32), hl ; using this as temp ram entry
      0003FC 3Ar1Fr00         [13] 1270 	ld	a, (# #_GSL_RAM + 31)
      0003FF CB 3F            [ 8] 1271 	srl	a
      000401 CB 3F            [ 8] 1272 	srl	a
      000403 CB 3F            [ 8] 1273 	srl	a
      000405 D6 1C            [ 7] 1274 	sub	#28
      000407 32r2Fr00         [13] 1275 	ld	(# #_GSL_RAM + 47), a
      00040A 3E 1C            [ 7] 1276 	ld	a, #28
      00040C 32r30r00         [13] 1277 	ld	(# #_GSL_RAM + 47 + 1), a
      00040F                       1278 	_RefreshLoop:
                                   1279 ; == Set VDP Pointer at Start of Row
      00040F 2Ar27r00         [16] 1280 	ld	hl, (# #_GSL_RAM + 39)
      000412 0E BF            [ 7] 1281 	ld	c, #0xBF
      000414 ED 69            [12] 1282 	out	(c), l
      000416 ED 61            [12] 1283 	out	(c), h
                                   1284 ;	== Lookup Metatile for this Row
      000418 ED 4Br20r00      [20] 1285 	ld	bc, (# #_GSL_RAM + 32)
      00041C 2Ar1Br00         [16] 1286 	ld	hl, (# #_GSL_RAM + 27)
      00041F CDr87r03         [17] 1287 	call	GSL_MetatileLookup
                                   1288 ;	== Store address in iy
      000422 E5               [11] 1289 	push	hl
      000423 FD E1            [14] 1290 	pop	iy
                                   1291 ;	== Put Y Offset in to ixl and Unroll a row of Nametable data.
      000425 3Ar20r00         [13] 1292 	ld	a, (# #_GSL_RAM + 32)
      000428 E6 08            [ 7] 1293 	and	#8 ; %00001000
      00042A 0F               [ 4] 1294 	rrca
      00042B 32r2Dr00         [13] 1295 	ld	(# #_GSL_RAM + 45), a
      00042E CDr20r05         [17] 1296 	call	_unrollRowForNTUpdate ; Unroll buffer table column for nametable updates!
                                   1297 ;	== Add Offset to Start location in Buffer.
      000431 3Ar1Br00         [13] 1298 	ld	a, (# #_GSL_RAM + 27)
      000434 0F               [ 4] 1299 	rrca
      000435 0F               [ 4] 1300 	rrca
      000436 E6 02            [ 7] 1301 	and	#2
      000438 C6 02            [ 7] 1302 	add	a, #2
      00043A 21r6Fr00         [10] 1303 	ld	hl, # #_GSL_RAM + 111
      00043D 5F               [ 4] 1304 	ld	e, a
      00043E AF               [ 4] 1305 	xor	a
      00043F 57               [ 4] 1306 	ld	d, a
      000440 19               [11] 1307 	add	hl, de
                                   1308 ;	== Calculate Number of Bytes to be Written in first Write, store in b.
      000441 3Ar1Br00         [13] 1309 	ld	a, (# #_GSL_RAM + 27)
      000444 C6 08            [ 7] 1310 	add	a, #8
      000446 E6 F8            [ 7] 1311 	and	#248 ; %11111000
      000448 0F               [ 4] 1312 	rrca
      000449 0F               [ 4] 1313 	rrca
      00044A 57               [ 4] 1314 	ld	d, a
      00044B 3E 40            [ 7] 1315 	ld	a, #64
      00044D 92               [ 4] 1316 	sub	d
      00044E E6 3F            [ 7] 1317 	and	#63 ; %00111111
      000450 57               [ 4] 1318 	ld	d, a
                                   1319 ;	== Write Buffered Data to VDP Nametable
      000451 0E BE            [ 7] 1320 	ld	c, #0xBE
      000453                       1321 	_WriteRow1Loop:
      000453 ED A3            [16] 1322 	outi
      000455 15               [ 4] 1323 	dec	d
      000456 C2r53r04         [10] 1324 	jp	nz, _WriteRow1Loop
                                   1325 ;	== Set VDP Address to Start of Row for Second Write
      000459 ED 5Br27r00      [20] 1326 	ld	de, (# #_GSL_RAM + 39)
      00045D 0E BF            [ 7] 1327 	ld	c, #0xBF
      00045F 3E C0            [ 7] 1328 	ld	a, #192 ; %11000000
      000461 A3               [ 4] 1329 	and	e
      000462 ED 79            [12] 1330 	out	(c), a
      000464 ED 51            [12] 1331 	out	(c), d
                                   1332 ;	== Calculate Number of Bytes to be Written in scond Write, store in b.
      000466 3Ar1Br00         [13] 1333 	ld	a, (# #_GSL_RAM + 27)
      000469 C6 08            [ 7] 1334 	add	a, #8
      00046B E6 F8            [ 7] 1335 	and	#248 ; %11111000
      00046D 0F               [ 4] 1336 	rrca
      00046E 0F               [ 4] 1337 	rrca
      00046F 57               [ 4] 1338 	ld	d, a
      000470 0E BE            [ 7] 1339 	ld	c, #0xBE
                                   1340 ;	== Write Buffered Data to VDP Nametable
      000472                       1341 	_WriteRow2Loop:
      000472 ED A3            [16] 1342 	outi
      000474 15               [ 4] 1343 	dec	d
      000475 C2r72r04         [10] 1344 	jp	nz, _WriteRow2Loop
                                   1345 ;	**** Prep for Next Write.
                                   1346 ;	== Push VDP Nametable address to next Row.
      000478 2Ar27r00         [16] 1347 	ld	hl, (# #_GSL_RAM + 39)
      00047B 11 40 00         [10] 1348 	ld	de, #0x40
      00047E 19               [11] 1349 	add	hl, de
      00047F 22r27r00         [16] 1350 	ld	(# #_GSL_RAM + 39), hl
                                   1351 ;	== Have we written rows? Return if true;
      000482 3Ar30r00         [13] 1352 	ld	a, (# #_GSL_RAM + 47 + 1)
      000485 3D               [ 4] 1353 	dec	a
      000486 C8               [11] 1354 	ret	z
      000487 32r30r00         [13] 1355 	ld	(# #_GSL_RAM + 47 + 1), a
                                   1356 ;	== Is next row at top of VDP Nametable, reset Address if true;
      00048A 3Ar2Fr00         [13] 1357 	ld	a, (# #_GSL_RAM + 47)
      00048D 3C               [ 4] 1358 	inc	a
      00048E 32r2Fr00         [13] 1359 	ld	(# #_GSL_RAM + 47), a
      000491 C2rA0r04         [10] 1360 	jp	nz, _AdjustTempYValue
      000494 2Ar27r00         [16] 1361 	ld	hl, (# #_GSL_RAM + 39)
      000497 26 78            [ 7] 1362 	ld	h, #0x78
      000499 3E 3F            [ 7] 1363 	ld	a, #63 ; %00111111
      00049B A5               [ 4] 1364 	and	l
      00049C 6F               [ 4] 1365 	ld	l, a
      00049D 22r27r00         [16] 1366 	ld	(# #_GSL_RAM + 39), hl
                                   1367 ;	== Adjust Temp Y Value for Next Write.
      0004A0                       1368 	_AdjustTempYValue:
      0004A0 2Ar20r00         [16] 1369 	ld hl, (# #_GSL_RAM + 32)
      0004A3 16 00            [ 7] 1370 	ld	d, #0
      0004A5 1E 08            [ 7] 1371 	ld	e, #8
      0004A7 19               [11] 1372 	add	hl, de
      0004A8 22r20r00         [16] 1373 	ld	(# #_GSL_RAM + 32), hl
      0004AB C3r0Fr04         [10] 1374 	jp	_RefreshLoop
      0004AE                       1375 	GSL_MetatileUpdateSpecific:
                                   1376 ; == Populate Buffered Values with Custom Values.
      0004AE 22r19r00         [16] 1377 	ld	(# #_GSL_RAM + 25), hl
      0004B1 ED 53r17r00      [20] 1378 	ld	(# #_GSL_RAM + 23), de
                                   1379 ;	== Add Array offset to Scrolltable bass address then store results.
      0004B5 2Ar0Dr00         [16] 1380 	ld	hl, (# #_GSL_RAM + 13)
      0004B8 09               [11] 1381 	add	hl, bc
      0004B9 22r15r00         [16] 1382 	ld	(# #_GSL_RAM + 21), hl
                                   1383 ;	== Flow to GSL_MetatileUpdate Below
      0004BC                       1384 	GSL_MetatileUpdate:
                                   1385 ; == Identify Column of update
      0004BC 2Ar19r00         [16] 1386 	ld	hl, (# #_GSL_RAM + 25)
      0004BF 1E E0            [ 7] 1387 	ld	e, #224
      0004C1 06 08            [ 7] 1388 	ld	b, #8
      0004C3                       1389 	_MDivLoop:
      0004C3 ED 6A            [15] 1390 	adc hl, hl
      0004C5 7C               [ 4] 1391 	ld	a, h
      0004C6 38 03            [12] 1392 	jr	c, _MDivCarry1
      0004C8 BB               [ 4] 1393 	cp	e
      0004C9 38 03            [12] 1394 	jr	c, _MDivCarry2
      0004CB                       1395 	_MDivCarry1:
      0004CB 93               [ 4] 1396 	sub e
      0004CC 67               [ 4] 1397 	ld	h, a
      0004CD B7               [ 4] 1398 	or	a
      0004CE                       1399 	_MDivCarry2:
      0004CE 10 F3            [13] 1400 	djnz _MDivLoop
      0004D0 7D               [ 4] 1401 	ld	a, l
      0004D1 17               [ 4] 1402 	rla
      0004D2 2F               [ 4] 1403 	cpl
      0004D3 7C               [ 4] 1404 	ld	a, h
      0004D4 1F               [ 4] 1405 	rra
      0004D5 1F               [ 4] 1406 	rra
      0004D6 1F               [ 4] 1407 	rra
      0004D7 1F               [ 4] 1408 	rra
      0004D8 E6 0F            [ 7] 1409 	and	#15
      0004DA C6 F0            [ 7] 1410 	add	a, #240
      0004DC 67               [ 4] 1411 	ld	h, a
      0004DD AF               [ 4] 1412 	xor	a
      0004DE 6F               [ 4] 1413 	ld	l, a
      0004DF 57               [ 4] 1414 	ld	d, a ; Prep for X
      0004E0 CB 3C            [ 8] 1415 	srl	h
      0004E2 CB 1D            [ 8] 1416 	rr	l
                                   1417 ;	== Isolate metatile location in X and add
      0004E4 3Ar17r00         [13] 1418 	ld	a, (# #_GSL_RAM + 23)
      0004E7 E6 F0            [ 7] 1419 	and	#240 ; %11110000
      0004E9 1F               [ 4] 1420 	rra
      0004EA 1F               [ 4] 1421 	rra
      0004EB 5F               [ 4] 1422 	ld	e, a
      0004EC 19               [11] 1423 	add	hl, de
                                   1424 ;	== Write Resolved Address of Metatile on VDP (including register high bits)
      0004ED EB               [ 4] 1425 	ex	de, hl
      0004EE 2Ar2Ar00         [16] 1426 	ld	hl, (# #_GSL_RAM + 42)
      0004F1 73               [ 7] 1427 	ld	(hl), e
      0004F2 23               [ 6] 1428 	inc	hl
      0004F3 72               [ 7] 1429 	ld	(hl), d
      0004F4 23               [ 6] 1430 	inc	hl
      0004F5 EB               [ 4] 1431 	ex	de, hl
                                   1432 ;	== Resolve Metatile Location from ID
      0004F6 2Ar15r00         [16] 1433 	ld	hl, (# #_GSL_RAM + 21)
      0004F9 6E               [ 7] 1434 	ld	l, (hl)
      0004FA 7D               [ 4] 1435 	ld	a, l
      0004FB E6 07            [ 7] 1436 	and	#7 ; %111
                                   1437 ;or	#GSL_METATILE_TABLE_HIGH_BYTE ; add high bits of metatile address (table must be on 2k boundary)
      0004FD 67               [ 4] 1438 	ld	h, a
      0004FE 7D               [ 4] 1439 	ld	a, l
      0004FF E6 F8            [ 7] 1440 	and	#248 ; %11111000
      000501 6F               [ 4] 1441 	ld	l, a
      000502 ED 4Br13r00      [20] 1442 	ld	bc, (# #_GSL_RAM + 19)
      000506 09               [11] 1443 	add	hl, bc
                                   1444 ;	== Copy Contents of Metatile To Ram Buffer
      000507 ED A0            [16] 1445 	ldi
      000509 ED A0            [16] 1446 	ldi
      00050B ED A0            [16] 1447 	ldi
      00050D ED A0            [16] 1448 	ldi
      00050F ED A0            [16] 1449 	ldi
      000511 ED A0            [16] 1450 	ldi
      000513 ED A0            [16] 1451 	ldi
      000515 ED A0            [16] 1452 	ldi
                                   1453 ;	== Update Count and Address for more Metatile Updates if any
      000517 ED 53r2Ar00      [20] 1454 	ld	(# #_GSL_RAM + 42), de
      00051B 21r29r00         [10] 1455 	ld	hl, # #_GSL_RAM + 41
      00051E 34               [11] 1456 	inc	(hl)
      00051F C9               [10] 1457 	ret
      000520                       1458 	_unrollRowForNTUpdate:
      000520 11r6Fr00         [10] 1459 	ld de, # #_GSL_RAM + 111
      000523 0E 44            [ 7] 1460 	ld	c, #17*#4
      000525                       1461 	_unrollMetaTileRow:
      000525 FD 6E 00         [19] 1462 	ld l, 0 (iy) ; == Resolve metatile address, current metatile pointed to by iy
      000528 7D               [ 4] 1463 	ld	a, l ; optimized <<3 shift, bits are stored as '43210765' for speed
      000529 E6 07            [ 7] 1464 	and	#7 ; %111
      00052B 67               [ 4] 1465 	ld	h, a
      00052C 7D               [ 4] 1466 	ld	a, l
      00052D E6 F8            [ 7] 1467 	and	#248 ; %11111000
      00052F 6F               [ 4] 1468 	ld	l, a
      000530 3Ar2Dr00         [13] 1469 	ld	a, (# #_GSL_RAM + 45) ; add X offset (in ixl) to get desired column in meta tile.
      000533 B5               [ 4] 1470 	or	l
      000534 6F               [ 4] 1471 	ld	l, a ; hl = pointer to metatile nametable entry we need to write to vdp
      000535 C5               [11] 1472 	push	bc
      000536 ED 4Br13r00      [20] 1473 	ld	bc, (# #_GSL_RAM + 19)
      00053A 09               [11] 1474 	add	hl, bc
      00053B C1               [10] 1475 	pop	bc
      00053C ED A0            [16] 1476 	ldi	; == Write 2x nametable entries to buffer.
      00053E ED A0            [16] 1477 	ldi	; metatiles are 2 entries wide so l+=2 to move to second entry.
      000540 ED A0            [16] 1478 	ldi
      000542 ED A0            [16] 1479 	ldi
      000544 AF               [ 4] 1480 	xor	a ; loop
      000545 B1               [ 4] 1481 	or	c
      000546 C8               [11] 1482 	ret	z
      000547 FD 23            [10] 1483 	inc	iy ; Update Scrolltable Pointer
      000549 C3r25r05         [10] 1484 	jp	_unrollMetaTileRow
      00054C                       1485 	_unrollColumnForNTUpdate:
      00054C 11r2Fr00         [10] 1486 	ld de, # #_GSL_RAM + 47
      00054F 0E 3C            [ 7] 1487 	ld	c, #15*#4
      000551                       1488 	_unrollMetaTileColumn:
      000551 FD 6E 00         [19] 1489 	ld l, 0 (iy) ; == Resolve metatile address, current metatile pointed to by iy
      000554 7D               [ 4] 1490 	ld	a, l ; optimized <<3 shift, bits are stored as '43210765' for speed
      000555 E6 07            [ 7] 1491 	and	#7 ; %111
      000557 67               [ 4] 1492 	ld	h, a
      000558 7D               [ 4] 1493 	ld	a, l
      000559 E6 F8            [ 7] 1494 	and	#248 ; %11111000
      00055B 6F               [ 4] 1495 	ld	l, a
      00055C 3Ar2Dr00         [13] 1496 	ld	a, (# #_GSL_RAM + 45)
      00055F B5               [ 4] 1497 	or	l
      000560 6F               [ 4] 1498 	ld	l, a ; hl = pointer to metatile nametable entry we need to write to vdp
      000561 C5               [11] 1499 	push	bc
      000562 ED 4Br13r00      [20] 1500 	ld	bc, (# #_GSL_RAM + 19)
      000566 09               [11] 1501 	add	hl, bc
      000567 C1               [10] 1502 	pop	bc
      000568 ED A0            [16] 1503 	ldi	; == Write 2x nametable entries to buffer.
      00056A ED A0            [16] 1504 	ldi	; metatiles are 2 entries wide so l+=2 to move to second entry.
      00056C 23               [ 6] 1505 	inc	hl
      00056D 23               [ 6] 1506 	inc	hl
      00056E ED A0            [16] 1507 	ldi
      000570 ED A0            [16] 1508 	ldi
      000572 AF               [ 4] 1509 	xor	a ; loop
      000573 B1               [ 4] 1510 	or	c
      000574 C8               [11] 1511 	ret	z
      000575 2Ar02r00         [16] 1512 	ld	hl, (# #_GSL_RAM + 2) ; Update Scrolltable Pointer
      000578 EB               [ 4] 1513 	ex	de, hl
      000579 FD 19            [15] 1514 	add	iy, de
      00057B EB               [ 4] 1515 	ex	de, hl
      00057C C3r51r05         [10] 1516 	jp	_unrollMetaTileColumn
      00057F                       1517 	GSL_ActiveDisplayRoutine:
                                   1518 ; == Initialize
      00057F FD 21r00r00      [14] 1519 	ld	iy, #_GSL_RAM
      000583 AF               [ 4] 1520 	xor	a
      000584 32r23r00         [13] 1521 	ld	(# #_GSL_RAM + 35), a
      000587 32r24r00         [13] 1522 	ld	(# #_GSL_RAM + 36), a
      00058A                       1523 	_xScroll:
                                   1524 ; == Check Left / Right Scroll...
      00058A 3Ar21r00         [13] 1525 	ld	a, (# #_GSL_RAM + 33)
      00058D A7               [ 4] 1526 	and	a
      00058E CAr01r06         [10] 1527 	jp	z, _yScroll ; no value = no horizontal scroll
      000591 FArCCr05         [10] 1528 	jp	m, _leftScroll ; signed = left scroll.
      000594                       1529 	_rightScroll:
                                   1530 ; == Update currentXScroll Value.
      000594 2Ar1Br00         [16] 1531 	ld	hl, (# #_GSL_RAM + 27) ; add to current x value
      000597 45               [ 4] 1532 	ld	b, l
      000598 85               [ 4] 1533 	add	a, l
      000599 30 01            [12] 1534 	jr	nc, _noRightHighByteCarry
      00059B 24               [ 4] 1535 	inc	h
      00059C                       1536 	_noRightHighByteCarry:
      00059C 6F               [ 4] 1537 	ld l, a
      00059D A8               [ 4] 1538 	xor	b
      00059E 57               [ 4] 1539 	ld	d, a ; store low byte different pre / post scroll (for boundary tests)
      00059F 22r1Br00         [16] 1540 	ld	(# #_GSL_RAM + 27), hl
      0005A2                       1541 	_rightNametableCheck:
                                   1542 ; == Check for NameTable Boundary Cross
      0005A2 E6 F8            [ 7] 1543 	and	#248 ; %11111000
      0005A4 CAr01r06         [10] 1544 	jp	z, _yScroll
                                   1545 ;	== NameTable Bounary Crossed... Process
      0005A7 3E 01            [ 7] 1546 	ld	a, #1
      0005A9 32r23r00         [13] 1547 	ld	(# #_GSL_RAM + 35), a
      0005AC 3Ar11r00         [13] 1548 	ld	a, (# #_GSL_RAM + 17) ; Update NameTable Pointer
      0005AF 4F               [ 4] 1549 	ld	c, a ; (addition bound within low 6 bits!!!)
      0005B0 E6 C0            [ 7] 1550 	and	#192 ; %11000000
      0005B2 47               [ 4] 1551 	ld	b, a
      0005B3 79               [ 4] 1552 	ld	a, c
      0005B4 C6 02            [ 7] 1553 	add	a, #2
      0005B6 E6 3F            [ 7] 1554 	and	#63 ; %111111
      0005B8 B0               [ 4] 1555 	or	b
      0005B9 32r11r00         [13] 1556 	ld	(# #_GSL_RAM + 17), a
      0005BC                       1557 	_rightScrolltableCheck:
                                   1558 ; == Check for BufferTable Boundary Cross
      0005BC 7A               [ 4] 1559 	ld	a, d
      0005BD E6 F0            [ 7] 1560 	and	#240 ; %11110000
      0005BF CAr01r06         [10] 1561 	jp	z, _yScroll
                                   1562 ;	== BufferTable Boundary Crossed... Process
      0005C2 2Ar0Fr00         [16] 1563 	ld	hl, (# #_GSL_RAM + 15) ; Update buffer table pointer.
      0005C5 23               [ 6] 1564 	inc	hl
      0005C6 22r0Fr00         [16] 1565 	ld	(# #_GSL_RAM + 15), hl
      0005C9 C3r01r06         [10] 1566 	jp	_yScroll
      0005CC                       1567 	_leftScroll:
                                   1568 ; == Update currentXScroll Value.
      0005CC 2Ar1Br00         [16] 1569 	ld	hl, (# #_GSL_RAM + 27) ; add to current x value
      0005CF 45               [ 4] 1570 	ld	b, l
      0005D0 85               [ 4] 1571 	add	a, l
      0005D1 38 01            [12] 1572 	jr	c, _noLeftHighByteCarry
      0005D3 25               [ 4] 1573 	dec	h
      0005D4                       1574 	_noLeftHighByteCarry:
      0005D4 6F               [ 4] 1575 	ld l, a
      0005D5 A8               [ 4] 1576 	xor	b
      0005D6 57               [ 4] 1577 	ld	d, a ; store low byte different pre / post scroll (for boundary tests)
      0005D7 22r1Br00         [16] 1578 	ld	(# #_GSL_RAM + 27), hl
      0005DA                       1579 	_leftNametableCheck:
                                   1580 ; == Check for NameTable Boundary Cross
      0005DA E6 F8            [ 7] 1581 	and	#248 ; %11111000
      0005DC CAr01r06         [10] 1582 	jp	z, _yScroll
                                   1583 ;	== NameTable Bounary Crossed... Process
      0005DF 3E 81            [ 7] 1584 	ld	a, #129
      0005E1 32r23r00         [13] 1585 	ld	(# #_GSL_RAM + 35), a
      0005E4 3Ar11r00         [13] 1586 	ld	a, (# #_GSL_RAM + 17) ; Update name table pointer.
      0005E7 4F               [ 4] 1587 	ld	c, a ; (subtraction bound within low 6 bits!!!)
      0005E8 E6 C0            [ 7] 1588 	and	#192 ; %11000000
      0005EA 47               [ 4] 1589 	ld	b, a
      0005EB 79               [ 4] 1590 	ld	a, c
      0005EC D6 02            [ 7] 1591 	sub	#2
      0005EE E6 3F            [ 7] 1592 	and	#63 ; %111111
      0005F0 B0               [ 4] 1593 	or	b
      0005F1 32r11r00         [13] 1594 	ld	(# #_GSL_RAM + 17), a
      0005F4                       1595 	_leftScrolltableCheck:
                                   1596 ; == Check for BufferTable Boundary Cross
      0005F4 7A               [ 4] 1597 	ld	a, d
      0005F5 E6 F0            [ 7] 1598 	and	#240 ; %11110000
      0005F7 CAr01r06         [10] 1599 	jp	z, _yScroll
                                   1600 ;	== BufferTable Boundary Crossed... Process
      0005FA 2Ar0Fr00         [16] 1601 	ld	hl, (# #_GSL_RAM + 15) ; Update buffer table pointer.
      0005FD 2B               [ 6] 1602 	dec	hl
      0005FE 22r0Fr00         [16] 1603 	ld	(# #_GSL_RAM + 15), hl
      000601                       1604 	_yScroll:
                                   1605 ; == Check Up / Down Scroll...
      000601 3Ar22r00         [13] 1606 	ld	a, (# #_GSL_RAM + 34)
      000604 A7               [ 4] 1607 	and	a
      000605 CArA7r06         [10] 1608 	jp	z, _processUpdateBuffers ; no value = no vertical scroll
      000608 FAr59r06         [10] 1609 	jp	m, _upScroll ; signed = left scroll.
      00060B                       1610 	_downScroll:
                                   1611 ; == Update dummyYScroll Value (wraps around 224 NameTable height!)
      00060B 47               [ 4] 1612 	ld	b, a
      00060C 3Ar1Fr00         [13] 1613 	ld	a, (# #_GSL_RAM + 31)
      00060F 80               [ 4] 1614 	add	a, b
      000610 FE E0            [ 7] 1615 	cp	#224
      000612 DAr17r06         [10] 1616 	jp	c, _downNoCrossBoundary
      000615 D6 E0            [ 7] 1617 	sub	#224
      000617                       1618 	_downNoCrossBoundary:
      000617 32r1Fr00         [13] 1619 	ld (# #_GSL_RAM + 31), a
      00061A 78               [ 4] 1620 	ld	a, b
                                   1621 ;	== Update currentYScroll Value.
      00061B 2Ar1Dr00         [16] 1622 	ld	hl, (# #_GSL_RAM + 29) ; add to current y value
      00061E 45               [ 4] 1623 	ld	b, l
      00061F 85               [ 4] 1624 	add	a, l
      000620 30 01            [12] 1625 	jr	nc, _noDownHighByteCarry
      000622 24               [ 4] 1626 	inc	h
      000623                       1627 	_noDownHighByteCarry:
      000623 6F               [ 4] 1628 	ld l, a
      000624 A8               [ 4] 1629 	xor	b
      000625 57               [ 4] 1630 	ld	d, a ; store low byte different pre / post scroll (for boundary tests)
      000626 22r1Dr00         [16] 1631 	ld	(# #_GSL_RAM + 29), hl
      000629                       1632 	_downNametableCheck:
                                   1633 ; == Check for NameTable Boundary Cross
      000629 E6 F8            [ 7] 1634 	and	#248 ; %11111000
      00062B CArA7r06         [10] 1635 	jp	z, _processUpdateBuffers
                                   1636 ;	== NameTable Bounary Crossed... Process
      00062E 3E 01            [ 7] 1637 	ld	a, #1
      000630 32r24r00         [13] 1638 	ld	(# #_GSL_RAM + 36), a
      000633 2Ar11r00         [16] 1639 	ld	hl, (# #_GSL_RAM + 17) ; Update name table pointer.
      000636 01 40 00         [10] 1640 	ld	bc, #64
      000639 09               [11] 1641 	add	hl, bc
      00063A 3E 7F            [ 7] 1642 	ld	a, #0x7F ; TODO shift this to .defines for variable nat positioning
      00063C BC               [ 4] 1643 	cp	h
      00063D C2r42r06         [10] 1644 	jp	nz, _downNoResetNTHighByte
      000640 26 78            [ 7] 1645 	ld	h, #0x78
      000642                       1646 	_downNoResetNTHighByte:
      000642 22r11r00         [16] 1647 	ld (# #_GSL_RAM + 17), hl
      000645                       1648 	_downScrolltableCheck:
                                   1649 ; == Check for BufferTable Boundary Cross
      000645 7A               [ 4] 1650 	ld	a, d
      000646 E6 F0            [ 7] 1651 	and	#240 ; %11110000 ; !SMC metatile width bitmask
      000648 CArA7r06         [10] 1652 	jp	z, _processUpdateBuffers
                                   1653 ;	== BufferTable Boundary Crossed... Process
      00064B 2Ar0Fr00         [16] 1654 	ld	hl, (# #_GSL_RAM + 15)
      00064E ED 4Br02r00      [20] 1655 	ld	bc, (# #_GSL_RAM + 2)
      000652 09               [11] 1656 	add	hl, bc
      000653 22r0Fr00         [16] 1657 	ld	(# #_GSL_RAM + 15), hl
      000656 C3rA7r06         [10] 1658 	jp	_processUpdateBuffers
      000659                       1659 	_upScroll:
                                   1660 ; == Update dummyYScroll Value (wraps around 224 NameTable height!)
      000659 47               [ 4] 1661 	ld	b, a
      00065A 3Ar1Fr00         [13] 1662 	ld	a, (# #_GSL_RAM + 31)
      00065D 80               [ 4] 1663 	add	a, b
      00065E DAr63r06         [10] 1664 	jp	c, _upNoCrossBoundary
      000661 D6 20            [ 7] 1665 	sub	#32
      000663                       1666 	_upNoCrossBoundary:
      000663 32r1Fr00         [13] 1667 	ld (# #_GSL_RAM + 31), a
      000666 78               [ 4] 1668 	ld	a, b
                                   1669 ;	== Update currentYScroll Value.
      000667 2Ar1Dr00         [16] 1670 	ld	hl, (# #_GSL_RAM + 29) ; add to current y value
      00066A 45               [ 4] 1671 	ld	b, l
      00066B 85               [ 4] 1672 	add	a, l
      00066C 38 01            [12] 1673 	jr	c, _noUpHighByteCarry
      00066E 25               [ 4] 1674 	dec	h
      00066F                       1675 	_noUpHighByteCarry:
      00066F 6F               [ 4] 1676 	ld l, a
      000670 A8               [ 4] 1677 	xor	b
      000671 57               [ 4] 1678 	ld	d, a ; store low byte different pre / post scroll (for boundary tests)
      000672 22r1Dr00         [16] 1679 	ld	(# #_GSL_RAM + 29), hl
      000675                       1680 	_upNametableCheck:
                                   1681 ; == Check for NameTable Boundary Cross
      000675 7A               [ 4] 1682 	ld	a, d
      000676 E6 F8            [ 7] 1683 	and	#248 ; %11111000
      000678 CArA7r06         [10] 1684 	jp	z, _processUpdateBuffers
                                   1685 ;	== NameTable Bounary Crossed... Process
      00067B 3E 81            [ 7] 1686 	ld	a, #129
      00067D 32r24r00         [13] 1687 	ld	(# #_GSL_RAM + 36), a
      000680 2Ar11r00         [16] 1688 	ld	hl, (# #_GSL_RAM + 17) ; Update name table pointer.
      000683 01 40 00         [10] 1689 	ld	bc, #64
      000686 B7               [ 4] 1690 	or	a
      000687 ED 42            [15] 1691 	sbc	hl, bc
      000689 3E 77            [ 7] 1692 	ld	a, #0x78 - 1
      00068B BC               [ 4] 1693 	cp	h
      00068C C2r91r06         [10] 1694 	jp	nz, _upNoResetNTHighByte
      00068F 26 7E            [ 7] 1695 	ld	h, #0x7F - 1
      000691                       1696 	_upNoResetNTHighByte:
      000691 22r11r00         [16] 1697 	ld (# #_GSL_RAM + 17), hl
      000694                       1698 	_upScrolltableCheck:
                                   1699 ; == Check for BufferTable Boundary Cross
      000694 7A               [ 4] 1700 	ld	a, d
      000695 E6 F0            [ 7] 1701 	and	#240 ; %11110000 ; !SMC metatile width bitmask
      000697 CArA7r06         [10] 1702 	jp	z, _processUpdateBuffers
                                   1703 ;	== BufferTable Boundary Crossed... Process
      00069A 2Ar0Fr00         [16] 1704 	ld	hl, (# #_GSL_RAM + 15)
      00069D ED 4Br02r00      [20] 1705 	ld	bc, (# #_GSL_RAM + 2)
      0006A1 AF               [ 4] 1706 	xor	a
      0006A2 ED 42            [15] 1707 	sbc	hl, bc
      0006A4 22r0Fr00         [16] 1708 	ld	(# #_GSL_RAM + 15), hl
      0006A7                       1709 	_processUpdateBuffers:
      0006A7                       1710 	_updateX:
                                   1711 ; == Left / Right Scroll Occur?
      0006A7 3Ar23r00         [13] 1712 	ld	a, (# #_GSL_RAM + 35)
      0006AA B7               [ 4] 1713 	or	a
      0006AB CAr02r07         [10] 1714 	jp	z, _updateY
      0006AE FArE0r06         [10] 1715 	jp	m, _updateBufferLeft
      0006B1                       1716 	_updateBufferRight:
                                   1717 ; == Create Adjusted btPointer for _unrollColumnForNTUpdate call
      0006B1 FD 2Ar0Fr00      [20] 1718 	ld	iy, (# #_GSL_RAM + 15)
      0006B5 11 10 00         [10] 1719 	ld	de, #16
      0006B8 FD 19            [15] 1720 	add	iy, de
                                   1721 ;	== Create X offset for _unrollColumnForNTUpdate call
      0006BA 3Ar1Br00         [13] 1722 	ld	a, (# #_GSL_RAM + 27) ; get x offset for meta tile. Writing column so need to adjust for this.
      0006BD E6 08            [ 7] 1723 	and	#8 ; %00001000
      0006BF 0F               [ 4] 1724 	rrca
      0006C0 0F               [ 4] 1725 	rrca
      0006C1 32r2Dr00         [13] 1726 	ld	(# #_GSL_RAM + 45), a ;ld ixl, a
                                   1727 ;	== Unroll MetaTiles and get NameTable data for update
      0006C4 CDr4Cr05         [17] 1728 	call	_unrollColumnForNTUpdate
                                   1729 ;	== Store Adjusted NameTable Address for Update.
      0006C7 3Ar11r00         [13] 1730 	ld	a, (# #_GSL_RAM + 17)
      0006CA 4F               [ 4] 1731 	ld	c, a
      0006CB E6 C0            [ 7] 1732 	and	#192 ; %11000000 ; update name table pointer.
      0006CD 47               [ 4] 1733 	ld	b, a
      0006CE 79               [ 4] 1734 	ld	a, c
      0006CF D6 02            [ 7] 1735 	sub	#2
      0006D1 E6 3F            [ 7] 1736 	and	#63 ; %111111
      0006D3 B0               [ 4] 1737 	or	b
      0006D4 32r25r00         [13] 1738 	ld	(# #_GSL_RAM + 37), a
      0006D7 3Ar12r00         [13] 1739 	ld	a, (# #_GSL_RAM + 17 + 1)
      0006DA 32r26r00         [13] 1740 	ld	(# #_GSL_RAM + 37 + 1), a
      0006DD C3r02r07         [10] 1741 	jp	_updateY
      0006E0                       1742 	_updateBufferLeft:
                                   1743 ; == NameTable Update Required?
      0006E0 1F               [ 4] 1744 	rra
      0006E1 D2r02r07         [10] 1745 	jp	nc, _updateY
                                   1746 ;	== Create Adjusted btPointer for _unrollColumnForNTUpdate call
      0006E4 FD 2Ar0Fr00      [20] 1747 	ld	iy, (# #_GSL_RAM + 15)
      0006E8 3Ar1Br00         [13] 1748 	ld	a, (# #_GSL_RAM + 27)
      0006EB C6 08            [ 7] 1749 	add	a, #8
      0006ED E6 08            [ 7] 1750 	and	#8 ; %00001000
      0006EF C2rF4r06         [10] 1751 	jp	nz, _createXOffset
      0006F2 FD 23            [10] 1752 	inc	iy
                                   1753 ;	== Create X offset for _unrollColumnForNTUpdate call
      0006F4                       1754 	_createXOffset:
      0006F4 0F               [ 4] 1755 	rrca
      0006F5 0F               [ 4] 1756 	rrca
      0006F6 32r2Dr00         [13] 1757 	ld	(# #_GSL_RAM + 45), a ;ld ixl, a
                                   1758 ;	== Unroll MetaTiles and get NameTable data for update
      0006F9 CDr4Cr05         [17] 1759 	call	_unrollColumnForNTUpdate
                                   1760 ;	== Store NameTable Address for Update (no adjustment required)
      0006FC 2Ar11r00         [16] 1761 	ld	hl, (# #_GSL_RAM + 17)
      0006FF 22r25r00         [16] 1762 	ld	(# #_GSL_RAM + 37), hl
      000702                       1763 	_updateY:
                                   1764 ; == Left / Right Scroll Occur?
      000702 3Ar24r00         [13] 1765 	ld	a, (# #_GSL_RAM + 36)
      000705 B7               [ 4] 1766 	or	a
      000706 C8               [11] 1767 	ret	z
      000707 FAr42r07         [10] 1768 	jp	m, _updateBufferUp
      00070A                       1769 	_updateBufferDown:
                                   1770 ; == NameTable Update Required?
      00070A 1F               [ 4] 1771 	rra
      00070B D0               [11] 1772 	ret	nc
                                   1773 ;	== Create Adjusted btPointer for _unrollColumnForNTUpdate call
      00070C FD 2Ar0Fr00      [20] 1774 	ld	iy, (# #_GSL_RAM + 15)
      000710 ED 5Br0Ar00      [20] 1775 	ld	de, (# #_GSL_RAM + 10)
      000714 FD 19            [15] 1776 	add	iy, de
      000716 ED 5Br02r00      [20] 1777 	ld	de, (# #_GSL_RAM + 2)
      00071A 3Ar1Dr00         [13] 1778 	ld	a, (# #_GSL_RAM + 29) ; get x offset for meta tile. Writing column so need to adjust for this.
      00071D D6 08            [ 7] 1779 	sub	#8
      00071F E6 08            [ 7] 1780 	and	#8 ; %00001000
      000721 C2r26r07         [10] 1781 	jp	nz, _createYOffset
      000724 FD 19            [15] 1782 	add	iy, de
      000726                       1783 	_createYOffset:
      000726 0F               [ 4] 1784 	rrca
      000727 32r2Dr00         [13] 1785 	ld	(# #_GSL_RAM + 45), a ;ld ixl, a
                                   1786 ;	== Unroll MetaTiles and get NameTable data for update
      00072A CDr20r05         [17] 1787 	call	_unrollRowForNTUpdate
                                   1788 ;	== Store Adjusted NameTable Address for Update.
      00072D 2Ar11r00         [16] 1789 	ld	hl, (# #_GSL_RAM + 17)
      000730 11 40 00         [10] 1790 	ld	de, #64
      000733 B7               [ 4] 1791 	or	a
      000734 ED 52            [15] 1792 	sbc	hl, de
      000736 3E 77            [ 7] 1793 	ld	a, #0x78 - 1
      000738 BC               [ 4] 1794 	cp	h
      000739 C2r3Er07         [10] 1795 	jp	nz, _noYNametableWrap
      00073C 26 7E            [ 7] 1796 	ld	h, #0x7F - 1
      00073E                       1797 	_noYNametableWrap:
      00073E 22r27r00         [16] 1798 	ld (# #_GSL_RAM + 39), hl
      000741 C9               [10] 1799 	ret
      000742                       1800 	_updateBufferUp:
                                   1801 ; == NameTable Update Required?
      000742 0F               [ 4] 1802 	rrca
      000743 D0               [11] 1803 	ret	nc
                                   1804 ;	== Get btPointer for _unrollColumnForNTUpdate call
      000744 FD 2Ar0Fr00      [20] 1805 	ld	iy, (# #_GSL_RAM + 15)
                                   1806 ;	== Create Y offset for _unrollColumnForNTUpdate call
      000748 3Ar1Dr00         [13] 1807 	ld	a, (# #_GSL_RAM + 29) ; get x offset for meta tile. Writing column so need to adjust for this.
      00074B E6 08            [ 7] 1808 	and	#8 ; %00001000
      00074D 0F               [ 4] 1809 	rrca
      00074E 32r2Dr00         [13] 1810 	ld	(# #_GSL_RAM + 45), a ;ld ixl, a
      000751 CDr20r05         [17] 1811 	call	_unrollRowForNTUpdate ; Unroll buffer table column for nametable updates!
                                   1812 ;	== Store NameTable Address for Update (no adjustment required)
      000754 2Ar11r00         [16] 1813 	ld	hl, (# #_GSL_RAM + 17)
      000757 22r27r00         [16] 1814 	ld	(# #_GSL_RAM + 39), hl
      00075A C9               [10] 1815 	ret
      00075B                       1816 	GSL_VBlankRoutine:
                                   1817 ; == Check if row update required.
      00075B 3Ar24r00         [13] 1818 	ld	a, (# #_GSL_RAM + 36)
      00075E A7               [ 4] 1819 	and	a
      00075F CArBEr07         [10] 1820 	jp	z, _updateColumn
      000762                       1821 	_writeRow:
                                   1822 ; == Put VDP Pointer Address in Shadow Register and Set VDP Pointer.
      000762 D9               [ 4] 1823 	exx
      000763 2Ar27r00         [16] 1824 	ld	hl, (# #_GSL_RAM + 39)
      000766 0E BF            [ 7] 1825 	ld	c, #0xBF
      000768 ED 69            [12] 1826 	out	(c), l
      00076A ED 61            [12] 1827 	out	(c), h
      00076C D9               [ 4] 1828 	exx
      00076D 0E BE            [ 7] 1829 	ld	c, #0xBE
                                   1830 ;	== Construct LUT address For First Write
      00076F 3Ar1Br00         [13] 1831 	ld	a, (# #_GSL_RAM + 27)
      000772 E6 F8            [ 7] 1832 	and	#248 ; %11111000
      000774 0F               [ 4] 1833 	rrca
      000775 0F               [ 4] 1834 	rrca
      000776 21rCEr0A         [10] 1835 	ld	hl, #_GSL_LUTRowUpdate
      000779 85               [ 4] 1836 	add	a, l
      00077A D2r7Er07         [10] 1837 	jp	nc, _finaliseLUTRowAddress
      00077D 24               [ 4] 1838 	inc	h
      00077E                       1839 	_finaliseLUTRowAddress:
      00077E 6F               [ 4] 1840 	ld l, a
      00077F E5               [11] 1841 	push	hl ; Story copy on stack
                                   1842 ;	== Extract Jump Location from LUT and store in IY
                                   1843 ;	Jump is for unrolled VDP Write code
      000780 5E               [ 7] 1844 	ld	e, (hl)
      000781 23               [ 6] 1845 	inc	hl
      000782 56               [ 7] 1846 	ld	d, (hl)
      000783 FD 21r00r09      [14] 1847 	ld	iy, #_UnrolledRowWrites
      000787 FD 19            [15] 1848 	add	iy, de
                                   1849 ;	== Add Offset to Start location in Buffer.
      000789 3Ar1Br00         [13] 1850 	ld	a, (# #_GSL_RAM + 27)
      00078C 0F               [ 4] 1851 	rrca
      00078D 0F               [ 4] 1852 	rrca
      00078E E6 02            [ 7] 1853 	and	#2
      000790 C6 02            [ 7] 1854 	add	a, #2
      000792 21r6Fr00         [10] 1855 	ld	hl, # #_GSL_RAM + 111
      000795 5F               [ 4] 1856 	ld	e, a
      000796 AF               [ 4] 1857 	xor	a
      000797 57               [ 4] 1858 	ld	d, a
      000798 19               [11] 1859 	add	hl, de
      000799 CDr7Dr08         [17] 1860 	call	IYJump
                                   1861 ;	== Update VDP Pointer For Second Write
                                   1862 ;	Second write always starts at left most side of Nametable so clear
                                   1863 ;	low bytes of address and update.
      00079C D9               [ 4] 1864 	exx
      00079D 3E C0            [ 7] 1865 	ld	a, #192 ; %11000000
      00079F A5               [ 4] 1866 	and	l
      0007A0 ED 79            [12] 1867 	out	(c), a
      0007A2 ED 61            [12] 1868 	out	(c), h
      0007A4 D9               [ 4] 1869 	exx
                                   1870 ;	== Move Forward 130 bytes in LUT
      0007A5 EB               [ 4] 1871 	ex	de, hl
      0007A6 E1               [10] 1872 	pop	hl
      0007A7 3E 40            [ 7] 1873 	ld	a, #64
      0007A9 85               [ 4] 1874 	add	a, l
      0007AA 6F               [ 4] 1875 	ld	l, a
      0007AB D2rAFr07         [10] 1876 	jp	nc, _rowExtractJumpAddress
      0007AE 24               [ 4] 1877 	inc	h
      0007AF                       1878 	_rowExtractJumpAddress:
                                   1879 ; == Extract Jump Location from LUT and store in IY
                                   1880 ;	Jump is for unrolled VDP Write code
      0007AF 4E               [ 7] 1881 	ld	c, (hl)
      0007B0 23               [ 6] 1882 	inc	hl
      0007B1 46               [ 7] 1883 	ld	b, (hl)
      0007B2 FD 21r00r09      [14] 1884 	ld	iy, #_UnrolledRowWrites
      0007B6 FD 09            [15] 1885 	add	iy, bc
      0007B8 EB               [ 4] 1886 	ex	de, hl
      0007B9 0E BE            [ 7] 1887 	ld	c, #0xBE
      0007BB CDr7Dr08         [17] 1888 	call	IYJump
      0007BE                       1889 	_updateColumn:
                                   1890 ; == Check if row update required.
      0007BE 3Ar23r00         [13] 1891 	ld	a, (# #_GSL_RAM + 35)
      0007C1 A7               [ 4] 1892 	and	a
      0007C2 CAr1Fr08         [10] 1893 	jp	z, _MetatileUpdates
                                   1894 ;	== Put VDP Pointer Address in Shadow Register and Set VDP Pointer.
      0007C5 D9               [ 4] 1895 	exx
      0007C6 2Ar25r00         [16] 1896 	ld	hl, (# #_GSL_RAM + 37)
      0007C9 11 40 00         [10] 1897 	ld	de, #64 ; Each new column entry is 64 bytes ahead, store here for addition
      0007CC 0E BF            [ 7] 1898 	ld	c, #0xBF
      0007CE D9               [ 4] 1899 	exx
      0007CF 0E BE            [ 7] 1900 	ld	c, #0xBE
                                   1901 ;	== Construct LUT address For First Write
      0007D1 3Ar1Fr00         [13] 1902 	ld	a, (# #_GSL_RAM + 31)
      0007D4 E6 F8            [ 7] 1903 	and	#248 ; %11111000
      0007D6 0F               [ 4] 1904 	rrca
      0007D7 0F               [ 4] 1905 	rrca
      0007D8 21r5Er0A         [10] 1906 	ld	hl, #_GSL_LUTColumnUpdate
      0007DB 85               [ 4] 1907 	add	a, l
      0007DC D2rE0r07         [10] 1908 	jp	nc, _finaliseLUTColumnAddress
      0007DF 24               [ 4] 1909 	inc	h
      0007E0                       1910 	_finaliseLUTColumnAddress:
      0007E0 6F               [ 4] 1911 	ld l, a
      0007E1 E5               [11] 1912 	push	hl ; Story copy on stack
                                   1913 ;	== Extract Jump Location from LUT and store in IY
                                   1914 ;	Jump is for unrolled VDP Write code
      0007E2 5E               [ 7] 1915 	ld	e, (hl)
      0007E3 23               [ 6] 1916 	inc	hl
      0007E4 56               [ 7] 1917 	ld	d, (hl)
      0007E5 FD 21r35r0A      [14] 1918 	ld	iy, #_UnrolledColumnWrites
      0007E9 FD 19            [15] 1919 	add	iy, de
                                   1920 ;	== Add Offset to Start location in Buffer.
      0007EB 3Ar1Dr00         [13] 1921 	ld	a, (# #_GSL_RAM + 29)
      0007EE E6 08            [ 7] 1922 	and	#8 ; %00001000
      0007F0 0F               [ 4] 1923 	rrca
      0007F1 0F               [ 4] 1924 	rrca
      0007F2 21r2Fr00         [10] 1925 	ld	hl, # #_GSL_RAM + 47
      0007F5 5F               [ 4] 1926 	ld	e, a
      0007F6 AF               [ 4] 1927 	xor	a
      0007F7 57               [ 4] 1928 	ld	d, a
      0007F8 19               [11] 1929 	add	hl, de
      0007F9 CDr7Dr08         [17] 1930 	call	IYJump
                                   1931 ;	== Update VDP Pointer For Second Write
                                   1932 ;	Second write always starts at top row of Nametable so reset high byte
                                   1933 ;	to 0x78, keep low bytes of address and update.
      0007FC D9               [ 4] 1934 	exx
      0007FD 3Ar25r00         [13] 1935 	ld	a, (# #_GSL_RAM + 37) ; Get vram nametable pointer
      000800 E6 3F            [ 7] 1936 	and	#63 ; %00111111
      000802 26 78            [ 7] 1937 	ld	h, #0x78
      000804 6F               [ 4] 1938 	ld	l, a
      000805 D9               [ 4] 1939 	exx
                                   1940 ;	== Move Forward 114 bytes in LUT
      000806 EB               [ 4] 1941 	ex	de, hl
      000807 E1               [10] 1942 	pop	hl
      000808 3E 38            [ 7] 1943 	ld	a, #56
      00080A 85               [ 4] 1944 	add	a, l
      00080B 6F               [ 4] 1945 	ld	l, a
      00080C D2r10r08         [10] 1946 	jp	nc, _columnExtractJumpAddress
      00080F 24               [ 4] 1947 	inc	h
      000810                       1948 	_columnExtractJumpAddress:
                                   1949 ; == Extract Jump Location from LUT and store in IY
                                   1950 ;	Jump is for unrolled VDP Write code
      000810 4E               [ 7] 1951 	ld	c, (hl)
      000811 23               [ 6] 1952 	inc	hl
      000812 46               [ 7] 1953 	ld	b, (hl)
      000813 FD 21r35r0A      [14] 1954 	ld	iy, #_UnrolledColumnWrites
      000817 FD 09            [15] 1955 	add	iy, bc
      000819 EB               [ 4] 1956 	ex	de, hl
      00081A 0E BE            [ 7] 1957 	ld	c, #0xBE
      00081C CDr7Dr08         [17] 1958 	call	IYJump
      00081F                       1959 	_MetatileUpdates:
                                   1960 ; == Check if Metatile Updates are Required.
      00081F 3Ar29r00         [13] 1961 	ld	a, (# #_GSL_RAM + 41)
      000822 B7               [ 4] 1962 	or	a
      000823 CAr58r08         [10] 1963 	jp	z, _VBlankCleanup
      000826 21rB7r00         [10] 1964 	ld	hl, # #_GSL_RAM + 183
      000829 47               [ 4] 1965 	ld	b, a
      00082A                       1966 	_MetatileUpdatesLoop:
                                   1967 ; == Process each metatile Update
      00082A 3E 07            [ 7] 1968 	ld	a, #7 ; count = number of metatile to update.
      00082C 80               [ 4] 1969 	add	a, b ; add 7 to current number, outi will reduce this by 8
      00082D 47               [ 4] 1970 	ld	b, a ; end result will be to subtract 1 from current number
                                   1971 ;	== First word is VDP address of update. Update VDP Pointer.
      00082E 56               [ 7] 1972 	ld	d, (hl)
      00082F 23               [ 6] 1973 	inc	hl
      000830 5E               [ 7] 1974 	ld	e, (hl)
      000831 23               [ 6] 1975 	inc	hl
      000832 0E BF            [ 7] 1976 	ld	c, #0xBF
      000834 ED 51            [12] 1977 	out	(c), d
      000836 ED 59            [12] 1978 	out	(c), e
                                   1979 ;	== Write first two entries of Metatile.
      000838 0D               [ 4] 1980 	dec	c
      000839 ED A3            [16] 1981 	outi
      00083B ED A3            [16] 1982 	outi
      00083D ED A3            [16] 1983 	outi
      00083F ED A3            [16] 1984 	outi
                                   1985 ;	== Update VDP pointer to be one nametable row lower.
      000841 3E 40            [ 7] 1986 	ld	a, #64 ; $40
      000843 82               [ 4] 1987 	add	a, d
      000844 57               [ 4] 1988 	ld	d, a
      000845 0C               [ 4] 1989 	inc	c
      000846 ED 51            [12] 1990 	out	(c), d
      000848 ED 59            [12] 1991 	out	(c), e
                                   1992 ;	== Write last two entries.
      00084A 0D               [ 4] 1993 	dec	c
      00084B ED A3            [16] 1994 	outi
      00084D ED A3            [16] 1995 	outi
      00084F ED A3            [16] 1996 	outi
      000851 ED A3            [16] 1997 	outi
                                   1998 ;	== Loop if required.
      000853 78               [ 4] 1999 	ld	a, b
      000854 B7               [ 4] 2000 	or	a
      000855 C2r2Ar08         [10] 2001 	jp	nz, _MetatileUpdatesLoop
      000858                       2002 	_VBlankCleanup:
                                   2003 ; == Reset RAM Variables for next Active Display.
      000858 21rB7r00         [10] 2004 	ld	hl, # #_GSL_RAM + 183
      00085B 22r2Ar00         [16] 2005 	ld	(# #_GSL_RAM + 42), hl
      00085E AF               [ 4] 2006 	xor	a
      00085F 32r29r00         [13] 2007 	ld	(# #_GSL_RAM + 41), a
      000862 32r21r00         [13] 2008 	ld	(# #_GSL_RAM + 33), a
      000865 32r22r00         [13] 2009 	ld	(# #_GSL_RAM + 34), a
                                   2010 ;	== Update Screen X,Y Scroll
      000868 3Ar1Br00         [13] 2011 	ld	a, (# #_GSL_RAM + 27)
      00086B ED 44            [ 8] 2012 	neg
      00086D D3 BF            [11] 2013 	out	(#0xBF), a
      00086F 3E 88            [ 7] 2014 	ld	a, #136 ; $88
      000871 D3 BF            [11] 2015 	out	(#0xBF), a
      000873 3Ar1Fr00         [13] 2016 	ld	a, (# #_GSL_RAM + 31)
      000876 D3 BF            [11] 2017 	out	(#0xBF), a
      000878 3E 89            [ 7] 2018 	ld	a, #137 ; $89
      00087A D3 BF            [11] 2019 	out	(#0xBF), a
      00087C C9               [10] 2020 	ret
      00087D                       2021 	IYJump:
      00087D FD E9            [ 8] 2022 	jp (iy)
      00087F C9               [10] 2023 	ret
      000880 ED A3            [16] 2024 	outi
      000882 ED A3            [16] 2025 	outi
      000884 ED A3            [16] 2026 	outi
      000886 ED A3            [16] 2027 	outi
      000888 ED A3            [16] 2028 	outi
      00088A ED A3            [16] 2029 	outi
      00088C ED A3            [16] 2030 	outi
      00088E ED A3            [16] 2031 	outi
      000890 ED A3            [16] 2032 	outi
      000892 ED A3            [16] 2033 	outi
      000894 ED A3            [16] 2034 	outi
      000896 ED A3            [16] 2035 	outi
      000898 ED A3            [16] 2036 	outi
      00089A ED A3            [16] 2037 	outi
      00089C ED A3            [16] 2038 	outi
      00089E ED A3            [16] 2039 	outi
      0008A0 ED A3            [16] 2040 	outi
      0008A2 ED A3            [16] 2041 	outi
      0008A4 ED A3            [16] 2042 	outi
      0008A6 ED A3            [16] 2043 	outi
      0008A8 ED A3            [16] 2044 	outi
      0008AA ED A3            [16] 2045 	outi
      0008AC ED A3            [16] 2046 	outi
      0008AE ED A3            [16] 2047 	outi
      0008B0 ED A3            [16] 2048 	outi
      0008B2 ED A3            [16] 2049 	outi
      0008B4 ED A3            [16] 2050 	outi
      0008B6 ED A3            [16] 2051 	outi
      0008B8 ED A3            [16] 2052 	outi
      0008BA ED A3            [16] 2053 	outi
      0008BC ED A3            [16] 2054 	outi
      0008BE ED A3            [16] 2055 	outi
      0008C0 ED A3            [16] 2056 	outi
      0008C2 ED A3            [16] 2057 	outi
      0008C4 ED A3            [16] 2058 	outi
      0008C6 ED A3            [16] 2059 	outi
      0008C8 ED A3            [16] 2060 	outi
      0008CA ED A3            [16] 2061 	outi
      0008CC ED A3            [16] 2062 	outi
      0008CE ED A3            [16] 2063 	outi
      0008D0 ED A3            [16] 2064 	outi
      0008D2 ED A3            [16] 2065 	outi
      0008D4 ED A3            [16] 2066 	outi
      0008D6 ED A3            [16] 2067 	outi
      0008D8 ED A3            [16] 2068 	outi
      0008DA ED A3            [16] 2069 	outi
      0008DC ED A3            [16] 2070 	outi
      0008DE ED A3            [16] 2071 	outi
      0008E0 ED A3            [16] 2072 	outi
      0008E2 ED A3            [16] 2073 	outi
      0008E4 ED A3            [16] 2074 	outi
      0008E6 ED A3            [16] 2075 	outi
      0008E8 ED A3            [16] 2076 	outi
      0008EA ED A3            [16] 2077 	outi
      0008EC ED A3            [16] 2078 	outi
      0008EE ED A3            [16] 2079 	outi
      0008F0 ED A3            [16] 2080 	outi
      0008F2 ED A3            [16] 2081 	outi
      0008F4 ED A3            [16] 2082 	outi
      0008F6 ED A3            [16] 2083 	outi
      0008F8 ED A3            [16] 2084 	outi
      0008FA ED A3            [16] 2085 	outi
      0008FC ED A3            [16] 2086 	outi
      0008FE ED A3            [16] 2087 	outi
      000900                       2088 	_UnrolledRowWrites:
      000900 C9               [10] 2089 	ret
      000901 D9               [ 4] 2090 	exx
      000902 ED 69            [12] 2091 	out	(c), l
      000904 ED 61            [12] 2092 	out	(c), h
      000906 19               [11] 2093 	add	hl, de
      000907 D9               [ 4] 2094 	exx
      000908 ED A3            [16] 2095 	outi
      00090A ED A3            [16] 2096 	outi
      00090C D9               [ 4] 2097 	exx
      00090D ED 69            [12] 2098 	out	(c), l
      00090F ED 61            [12] 2099 	out	(c), h
      000911 19               [11] 2100 	add	hl, de
      000912 D9               [ 4] 2101 	exx
      000913 ED A3            [16] 2102 	outi
      000915 ED A3            [16] 2103 	outi
      000917 D9               [ 4] 2104 	exx
      000918 ED 69            [12] 2105 	out	(c), l
      00091A ED 61            [12] 2106 	out	(c), h
      00091C 19               [11] 2107 	add	hl, de
      00091D D9               [ 4] 2108 	exx
      00091E ED A3            [16] 2109 	outi
      000920 ED A3            [16] 2110 	outi
      000922 D9               [ 4] 2111 	exx
      000923 ED 69            [12] 2112 	out	(c), l
      000925 ED 61            [12] 2113 	out	(c), h
      000927 19               [11] 2114 	add	hl, de
      000928 D9               [ 4] 2115 	exx
      000929 ED A3            [16] 2116 	outi
      00092B ED A3            [16] 2117 	outi
      00092D D9               [ 4] 2118 	exx
      00092E ED 69            [12] 2119 	out	(c), l
      000930 ED 61            [12] 2120 	out	(c), h
      000932 19               [11] 2121 	add	hl, de
      000933 D9               [ 4] 2122 	exx
      000934 ED A3            [16] 2123 	outi
      000936 ED A3            [16] 2124 	outi
      000938 D9               [ 4] 2125 	exx
      000939 ED 69            [12] 2126 	out	(c), l
      00093B ED 61            [12] 2127 	out	(c), h
      00093D 19               [11] 2128 	add	hl, de
      00093E D9               [ 4] 2129 	exx
      00093F ED A3            [16] 2130 	outi
      000941 ED A3            [16] 2131 	outi
      000943 D9               [ 4] 2132 	exx
      000944 ED 69            [12] 2133 	out	(c), l
      000946 ED 61            [12] 2134 	out	(c), h
      000948 19               [11] 2135 	add	hl, de
      000949 D9               [ 4] 2136 	exx
      00094A ED A3            [16] 2137 	outi
      00094C ED A3            [16] 2138 	outi
      00094E D9               [ 4] 2139 	exx
      00094F ED 69            [12] 2140 	out	(c), l
      000951 ED 61            [12] 2141 	out	(c), h
      000953 19               [11] 2142 	add	hl, de
      000954 D9               [ 4] 2143 	exx
      000955 ED A3            [16] 2144 	outi
      000957 ED A3            [16] 2145 	outi
      000959 D9               [ 4] 2146 	exx
      00095A ED 69            [12] 2147 	out	(c), l
      00095C ED 61            [12] 2148 	out	(c), h
      00095E 19               [11] 2149 	add	hl, de
      00095F D9               [ 4] 2150 	exx
      000960 ED A3            [16] 2151 	outi
      000962 ED A3            [16] 2152 	outi
      000964 D9               [ 4] 2153 	exx
      000965 ED 69            [12] 2154 	out	(c), l
      000967 ED 61            [12] 2155 	out	(c), h
      000969 19               [11] 2156 	add	hl, de
      00096A D9               [ 4] 2157 	exx
      00096B ED A3            [16] 2158 	outi
      00096D ED A3            [16] 2159 	outi
      00096F D9               [ 4] 2160 	exx
      000970 ED 69            [12] 2161 	out	(c), l
      000972 ED 61            [12] 2162 	out	(c), h
      000974 19               [11] 2163 	add	hl, de
      000975 D9               [ 4] 2164 	exx
      000976 ED A3            [16] 2165 	outi
      000978 ED A3            [16] 2166 	outi
      00097A D9               [ 4] 2167 	exx
      00097B ED 69            [12] 2168 	out	(c), l
      00097D ED 61            [12] 2169 	out	(c), h
      00097F 19               [11] 2170 	add	hl, de
      000980 D9               [ 4] 2171 	exx
      000981 ED A3            [16] 2172 	outi
      000983 ED A3            [16] 2173 	outi
      000985 D9               [ 4] 2174 	exx
      000986 ED 69            [12] 2175 	out	(c), l
      000988 ED 61            [12] 2176 	out	(c), h
      00098A 19               [11] 2177 	add	hl, de
      00098B D9               [ 4] 2178 	exx
      00098C ED A3            [16] 2179 	outi
      00098E ED A3            [16] 2180 	outi
      000990 D9               [ 4] 2181 	exx
      000991 ED 69            [12] 2182 	out	(c), l
      000993 ED 61            [12] 2183 	out	(c), h
      000995 19               [11] 2184 	add	hl, de
      000996 D9               [ 4] 2185 	exx
      000997 ED A3            [16] 2186 	outi
      000999 ED A3            [16] 2187 	outi
      00099B D9               [ 4] 2188 	exx
      00099C ED 69            [12] 2189 	out	(c), l
      00099E ED 61            [12] 2190 	out	(c), h
      0009A0 19               [11] 2191 	add	hl, de
      0009A1 D9               [ 4] 2192 	exx
      0009A2 ED A3            [16] 2193 	outi
      0009A4 ED A3            [16] 2194 	outi
      0009A6 D9               [ 4] 2195 	exx
      0009A7 ED 69            [12] 2196 	out	(c), l
      0009A9 ED 61            [12] 2197 	out	(c), h
      0009AB 19               [11] 2198 	add	hl, de
      0009AC D9               [ 4] 2199 	exx
      0009AD ED A3            [16] 2200 	outi
      0009AF ED A3            [16] 2201 	outi
      0009B1 D9               [ 4] 2202 	exx
      0009B2 ED 69            [12] 2203 	out	(c), l
      0009B4 ED 61            [12] 2204 	out	(c), h
      0009B6 19               [11] 2205 	add	hl, de
      0009B7 D9               [ 4] 2206 	exx
      0009B8 ED A3            [16] 2207 	outi
      0009BA ED A3            [16] 2208 	outi
      0009BC D9               [ 4] 2209 	exx
      0009BD ED 69            [12] 2210 	out	(c), l
      0009BF ED 61            [12] 2211 	out	(c), h
      0009C1 19               [11] 2212 	add	hl, de
      0009C2 D9               [ 4] 2213 	exx
      0009C3 ED A3            [16] 2214 	outi
      0009C5 ED A3            [16] 2215 	outi
      0009C7 D9               [ 4] 2216 	exx
      0009C8 ED 69            [12] 2217 	out	(c), l
      0009CA ED 61            [12] 2218 	out	(c), h
      0009CC 19               [11] 2219 	add	hl, de
      0009CD D9               [ 4] 2220 	exx
      0009CE ED A3            [16] 2221 	outi
      0009D0 ED A3            [16] 2222 	outi
      0009D2 D9               [ 4] 2223 	exx
      0009D3 ED 69            [12] 2224 	out	(c), l
      0009D5 ED 61            [12] 2225 	out	(c), h
      0009D7 19               [11] 2226 	add	hl, de
      0009D8 D9               [ 4] 2227 	exx
      0009D9 ED A3            [16] 2228 	outi
      0009DB ED A3            [16] 2229 	outi
      0009DD D9               [ 4] 2230 	exx
      0009DE ED 69            [12] 2231 	out	(c), l
      0009E0 ED 61            [12] 2232 	out	(c), h
      0009E2 19               [11] 2233 	add	hl, de
      0009E3 D9               [ 4] 2234 	exx
      0009E4 ED A3            [16] 2235 	outi
      0009E6 ED A3            [16] 2236 	outi
      0009E8 D9               [ 4] 2237 	exx
      0009E9 ED 69            [12] 2238 	out	(c), l
      0009EB ED 61            [12] 2239 	out	(c), h
      0009ED 19               [11] 2240 	add	hl, de
      0009EE D9               [ 4] 2241 	exx
      0009EF ED A3            [16] 2242 	outi
      0009F1 ED A3            [16] 2243 	outi
      0009F3 D9               [ 4] 2244 	exx
      0009F4 ED 69            [12] 2245 	out	(c), l
      0009F6 ED 61            [12] 2246 	out	(c), h
      0009F8 19               [11] 2247 	add	hl, de
      0009F9 D9               [ 4] 2248 	exx
      0009FA ED A3            [16] 2249 	outi
      0009FC ED A3            [16] 2250 	outi
      0009FE D9               [ 4] 2251 	exx
      0009FF ED 69            [12] 2252 	out	(c), l
      000A01 ED 61            [12] 2253 	out	(c), h
      000A03 19               [11] 2254 	add	hl, de
      000A04 D9               [ 4] 2255 	exx
      000A05 ED A3            [16] 2256 	outi
      000A07 ED A3            [16] 2257 	outi
      000A09 D9               [ 4] 2258 	exx
      000A0A ED 69            [12] 2259 	out	(c), l
      000A0C ED 61            [12] 2260 	out	(c), h
      000A0E 19               [11] 2261 	add	hl, de
      000A0F D9               [ 4] 2262 	exx
      000A10 ED A3            [16] 2263 	outi
      000A12 ED A3            [16] 2264 	outi
      000A14 D9               [ 4] 2265 	exx
      000A15 ED 69            [12] 2266 	out	(c), l
      000A17 ED 61            [12] 2267 	out	(c), h
      000A19 19               [11] 2268 	add	hl, de
      000A1A D9               [ 4] 2269 	exx
      000A1B ED A3            [16] 2270 	outi
      000A1D ED A3            [16] 2271 	outi
      000A1F D9               [ 4] 2272 	exx
      000A20 ED 69            [12] 2273 	out	(c), l
      000A22 ED 61            [12] 2274 	out	(c), h
      000A24 19               [11] 2275 	add	hl, de
      000A25 D9               [ 4] 2276 	exx
      000A26 ED A3            [16] 2277 	outi
      000A28 ED A3            [16] 2278 	outi
      000A2A D9               [ 4] 2279 	exx
      000A2B ED 69            [12] 2280 	out	(c), l
      000A2D ED 61            [12] 2281 	out	(c), h
      000A2F 19               [11] 2282 	add	hl, de
      000A30 D9               [ 4] 2283 	exx
      000A31 ED A3            [16] 2284 	outi
      000A33 ED A3            [16] 2285 	outi
      000A35                       2286 	_UnrolledColumnWrites:
      000A35 C9               [10] 2287 	ret
      000A36                       2288 	_Finalise:
                                   2289 ;libs\GSLib.c:1725: }
      000A36 C9               [10] 2290 	ret
                                   2291 ;libs\PSGlib.c:70: void PSGStop (void) {
                                   2292 ;	---------------------------------
                                   2293 ; Function PSGStop
                                   2294 ; ---------------------------------
      000A37                       2295 _PSGStop::
                                   2296 ;libs\PSGlib.c:74: if (PSGMusicStatus) {
      000A37 3Ar07r01         [13] 2297 	ld	a,(#_PSGMusicStatus + 0)
      000A3A B7               [ 4] 2298 	or	a, a
      000A3B C8               [11] 2299 	ret	Z
                                   2300 ;libs\PSGlib.c:75: PSGPort=PSGLatch|PSGChannel0|PSGVolumeData|0x0F;   // latch channel 0, volume=0xF (silent)
      000A3C 3E 9F            [ 7] 2301 	ld	a, #0x9f
      000A3E D3 7F            [11] 2302 	out	(_PSGPort), a
                                   2303 ;libs\PSGlib.c:76: PSGPort=PSGLatch|PSGChannel1|PSGVolumeData|0x0F;   // latch channel 1, volume=0xF (silent)
      000A40 3E BF            [ 7] 2304 	ld	a, #0xbf
      000A42 D3 7F            [11] 2305 	out	(_PSGPort), a
                                   2306 ;libs\PSGlib.c:77: if (!PSGChannel2SFX)
      000A44 3Ar1Cr01         [13] 2307 	ld	a,(#_PSGChannel2SFX + 0)
      000A47 B7               [ 4] 2308 	or	a, a
      000A48 20 04            [12] 2309 	jr	NZ, 00102$
                                   2310 ;libs\PSGlib.c:78: PSGPort=PSGLatch|PSGChannel2|PSGVolumeData|0x0F;   // latch channel 2, volume=0xF (silent)
      000A4A 3E DF            [ 7] 2311 	ld	a, #0xdf
      000A4C D3 7F            [11] 2312 	out	(_PSGPort), a
      000A4E                       2313 00102$:
                                   2314 ;libs\PSGlib.c:79: if (!PSGChannel3SFX)
      000A4E 3Ar1Dr01         [13] 2315 	ld	a,(#_PSGChannel3SFX + 0)
      000A51 B7               [ 4] 2316 	or	a, a
      000A52 20 04            [12] 2317 	jr	NZ, 00104$
                                   2318 ;libs\PSGlib.c:80: PSGPort=PSGLatch|PSGChannel3|PSGVolumeData|0x0F;   // latch channel 3, volume=0xF (silent)
      000A54 3E FF            [ 7] 2319 	ld	a, #0xff
      000A56 D3 7F            [11] 2320 	out	(_PSGPort), a
      000A58                       2321 00104$:
                                   2322 ;libs\PSGlib.c:81: PSGMusicStatus=PSG_STOPPED;
      000A58 3E 00            [ 7] 2323 	ld	a, #0x00
      000A5A 32r07r01         [13] 2324 	ld	(#_PSGMusicStatus), a
                                   2325 ;libs\PSGlib.c:83: }
      000A5D C9               [10] 2326 	ret
      000A5E                       2327 _GSL_LUTColumnUpdate:
      000A5E CC FE                 2328 	.dw #0xfecc
      000A60 D7 FE                 2329 	.dw #0xfed7
      000A62 E2 FE                 2330 	.dw #0xfee2
      000A64 ED FE                 2331 	.dw #0xfeed
      000A66 F8 FE                 2332 	.dw #0xfef8
      000A68 03 FF                 2333 	.dw #0xff03
      000A6A 0E FF                 2334 	.dw #0xff0e
      000A6C 19 FF                 2335 	.dw #0xff19
      000A6E 24 FF                 2336 	.dw #0xff24
      000A70 2F FF                 2337 	.dw #0xff2f
      000A72 3A FF                 2338 	.dw #0xff3a
      000A74 45 FF                 2339 	.dw #0xff45
      000A76 50 FF                 2340 	.dw #0xff50
      000A78 5B FF                 2341 	.dw #0xff5b
      000A7A 66 FF                 2342 	.dw #0xff66
      000A7C 71 FF                 2343 	.dw #0xff71
      000A7E 7C FF                 2344 	.dw #0xff7c
      000A80 87 FF                 2345 	.dw #0xff87
      000A82 92 FF                 2346 	.dw #0xff92
      000A84 9D FF                 2347 	.dw #0xff9d
      000A86 A8 FF                 2348 	.dw #0xffa8
      000A88 B3 FF                 2349 	.dw #0xffb3
      000A8A BE FF                 2350 	.dw #0xffbe
      000A8C C9 FF                 2351 	.dw #0xffc9
      000A8E D4 FF                 2352 	.dw #0xffd4
      000A90 DF FF                 2353 	.dw #0xffdf
      000A92 EA FF                 2354 	.dw #0xffea
      000A94 F5 FF                 2355 	.dw #0xfff5
      000A96 00 00                 2356 	.dw #0x0000
      000A98 F5 FF                 2357 	.dw #0xfff5
      000A9A EA FF                 2358 	.dw #0xffea
      000A9C DF FF                 2359 	.dw #0xffdf
      000A9E D4 FF                 2360 	.dw #0xffd4
      000AA0 C9 FF                 2361 	.dw #0xffc9
      000AA2 BE FF                 2362 	.dw #0xffbe
      000AA4 B3 FF                 2363 	.dw #0xffb3
      000AA6 A8 FF                 2364 	.dw #0xffa8
      000AA8 9D FF                 2365 	.dw #0xff9d
      000AAA 92 FF                 2366 	.dw #0xff92
      000AAC 87 FF                 2367 	.dw #0xff87
      000AAE 7C FF                 2368 	.dw #0xff7c
      000AB0 71 FF                 2369 	.dw #0xff71
      000AB2 66 FF                 2370 	.dw #0xff66
      000AB4 5B FF                 2371 	.dw #0xff5b
      000AB6 50 FF                 2372 	.dw #0xff50
      000AB8 45 FF                 2373 	.dw #0xff45
      000ABA 3A FF                 2374 	.dw #0xff3a
      000ABC 2F FF                 2375 	.dw #0xff2f
      000ABE 24 FF                 2376 	.dw #0xff24
      000AC0 19 FF                 2377 	.dw #0xff19
      000AC2 0E FF                 2378 	.dw #0xff0e
      000AC4 03 FF                 2379 	.dw #0xff03
      000AC6 F8 FE                 2380 	.dw #0xfef8
      000AC8 ED FE                 2381 	.dw #0xfeed
      000ACA E2 FE                 2382 	.dw #0xfee2
      000ACC D7 FE                 2383 	.dw #0xfed7
      000ACE                       2384 _GSL_LUTRowUpdate:
      000ACE 84 FF                 2385 	.dw #0xff84
      000AD0 88 FF                 2386 	.dw #0xff88
      000AD2 8C FF                 2387 	.dw #0xff8c
      000AD4 90 FF                 2388 	.dw #0xff90
      000AD6 94 FF                 2389 	.dw #0xff94
      000AD8 98 FF                 2390 	.dw #0xff98
      000ADA 9C FF                 2391 	.dw #0xff9c
      000ADC A0 FF                 2392 	.dw #0xffa0
      000ADE A4 FF                 2393 	.dw #0xffa4
      000AE0 A8 FF                 2394 	.dw #0xffa8
      000AE2 AC FF                 2395 	.dw #0xffac
      000AE4 B0 FF                 2396 	.dw #0xffb0
      000AE6 B4 FF                 2397 	.dw #0xffb4
      000AE8 B8 FF                 2398 	.dw #0xffb8
      000AEA BC FF                 2399 	.dw #0xffbc
      000AEC C0 FF                 2400 	.dw #0xffc0
      000AEE C4 FF                 2401 	.dw #0xffc4
      000AF0 C8 FF                 2402 	.dw #0xffc8
      000AF2 CC FF                 2403 	.dw #0xffcc
      000AF4 D0 FF                 2404 	.dw #0xffd0
      000AF6 D4 FF                 2405 	.dw #0xffd4
      000AF8 D8 FF                 2406 	.dw #0xffd8
      000AFA DC FF                 2407 	.dw #0xffdc
      000AFC E0 FF                 2408 	.dw #0xffe0
      000AFE E4 FF                 2409 	.dw #0xffe4
      000B00 E8 FF                 2410 	.dw #0xffe8
      000B02 EC FF                 2411 	.dw #0xffec
      000B04 F0 FF                 2412 	.dw #0xfff0
      000B06 F4 FF                 2413 	.dw #0xfff4
      000B08 F8 FF                 2414 	.dw #0xfff8
      000B0A FC FF                 2415 	.dw #0xfffc
      000B0C 00 00                 2416 	.dw #0x0000
      000B0E FC FF                 2417 	.dw #0xfffc
      000B10 F8 FF                 2418 	.dw #0xfff8
      000B12 F4 FF                 2419 	.dw #0xfff4
      000B14 F0 FF                 2420 	.dw #0xfff0
      000B16 EC FF                 2421 	.dw #0xffec
      000B18 E8 FF                 2422 	.dw #0xffe8
      000B1A E4 FF                 2423 	.dw #0xffe4
      000B1C E0 FF                 2424 	.dw #0xffe0
      000B1E DC FF                 2425 	.dw #0xffdc
      000B20 D8 FF                 2426 	.dw #0xffd8
      000B22 D4 FF                 2427 	.dw #0xffd4
      000B24 D0 FF                 2428 	.dw #0xffd0
      000B26 CC FF                 2429 	.dw #0xffcc
      000B28 C8 FF                 2430 	.dw #0xffc8
      000B2A C4 FF                 2431 	.dw #0xffc4
      000B2C C0 FF                 2432 	.dw #0xffc0
      000B2E BC FF                 2433 	.dw #0xffbc
      000B30 B8 FF                 2434 	.dw #0xffb8
      000B32 B4 FF                 2435 	.dw #0xffb4
      000B34 B0 FF                 2436 	.dw #0xffb0
      000B36 AC FF                 2437 	.dw #0xffac
      000B38 A8 FF                 2438 	.dw #0xffa8
      000B3A A4 FF                 2439 	.dw #0xffa4
      000B3C A0 FF                 2440 	.dw #0xffa0
      000B3E 9C FF                 2441 	.dw #0xff9c
      000B40 98 FF                 2442 	.dw #0xff98
      000B42 94 FF                 2443 	.dw #0xff94
      000B44 90 FF                 2444 	.dw #0xff90
      000B46 8C FF                 2445 	.dw #0xff8c
      000B48 88 FF                 2446 	.dw #0xff88
      000B4A 84 FF                 2447 	.dw #0xff84
      000B4C 80 FF                 2448 	.dw #0xff80
                                   2449 ;libs\PSGlib.c:85: void PSGResume (void) {
                                   2450 ;	---------------------------------
                                   2451 ; Function PSGResume
                                   2452 ; ---------------------------------
      000B4E                       2453 _PSGResume::
                                   2454 ;libs\PSGlib.c:89: if (!PSGMusicStatus) {
      000B4E 3Ar07r01         [13] 2455 	ld	a,(#_PSGMusicStatus + 0)
      000B51 B7               [ 4] 2456 	or	a, a
      000B52 C0               [11] 2457 	ret	NZ
                                   2458 ;libs\PSGlib.c:90: PSGPort=PSGLatch|PSGChannel0|PSGVolumeData|PSGChan0Volume;   // restore channel 0 volume
      000B53 3Ar15r01         [13] 2459 	ld	a,(#_PSGChan0Volume + 0)
      000B56 F6 90            [ 7] 2460 	or	a, #0x90
      000B58 D3 7F            [11] 2461 	out	(_PSGPort), a
                                   2462 ;libs\PSGlib.c:91: PSGPort=PSGLatch|PSGChannel1|PSGVolumeData|PSGChan1Volume;   // restore channel 1 volume
      000B5A 3Ar16r01         [13] 2463 	ld	a,(#_PSGChan1Volume + 0)
      000B5D F6 B0            [ 7] 2464 	or	a, #0xb0
      000B5F D3 7F            [11] 2465 	out	(_PSGPort), a
                                   2466 ;libs\PSGlib.c:92: if (!PSGChannel2SFX) {
      000B61 3Ar1Cr01         [13] 2467 	ld	a,(#_PSGChannel2SFX + 0)
      000B64 B7               [ 4] 2468 	or	a, a
      000B65 20 17            [12] 2469 	jr	NZ, 00102$
                                   2470 ;libs\PSGlib.c:93: PSGPort=PSGLatch|PSGChannel2|(PSGChan2LowTone&0x0F);       // restore channel 2 frequency
      000B67 3Ar19r01         [13] 2471 	ld	a,(#_PSGChan2LowTone + 0)
      000B6A E6 0F            [ 7] 2472 	and	a, #0x0f
      000B6C F6 C0            [ 7] 2473 	or	a, #0xc0
      000B6E D3 7F            [11] 2474 	out	(_PSGPort), a
                                   2475 ;libs\PSGlib.c:94: PSGPort=PSGChan2HighTone&0x3F;
      000B70 3Ar1Ar01         [13] 2476 	ld	a,(#_PSGChan2HighTone + 0)
      000B73 E6 3F            [ 7] 2477 	and	a, #0x3f
      000B75 D3 7F            [11] 2478 	out	(_PSGPort), a
                                   2479 ;libs\PSGlib.c:95: PSGPort=PSGLatch|PSGChannel2|PSGVolumeData|PSGChan2Volume; // restore channel 2 volume
      000B77 3Ar17r01         [13] 2480 	ld	a,(#_PSGChan2Volume + 0)
      000B7A F6 D0            [ 7] 2481 	or	a, #0xd0
      000B7C D3 7F            [11] 2482 	out	(_PSGPort), a
      000B7E                       2483 00102$:
                                   2484 ;libs\PSGlib.c:97: if (!PSGChannel3SFX) {
      000B7E 3Ar1Dr01         [13] 2485 	ld	a,(#_PSGChannel3SFX + 0)
      000B81 B7               [ 4] 2486 	or	a, a
      000B82 20 10            [12] 2487 	jr	NZ, 00104$
                                   2488 ;libs\PSGlib.c:98: PSGPort=PSGLatch|PSGChannel3|(PSGChan3LowTone&0x0F);       // restore channel 3 frequency
      000B84 3Ar1Br01         [13] 2489 	ld	a,(#_PSGChan3LowTone + 0)
      000B87 E6 0F            [ 7] 2490 	and	a, #0x0f
      000B89 F6 E0            [ 7] 2491 	or	a, #0xe0
      000B8B D3 7F            [11] 2492 	out	(_PSGPort), a
                                   2493 ;libs\PSGlib.c:99: PSGPort=PSGLatch|PSGChannel3|PSGVolumeData|PSGChan3Volume; // restore channel 3 volume
      000B8D 3Ar18r01         [13] 2494 	ld	a,(#_PSGChan3Volume + 0)
      000B90 F6 F0            [ 7] 2495 	or	a, #0xf0
      000B92 D3 7F            [11] 2496 	out	(_PSGPort), a
      000B94                       2497 00104$:
                                   2498 ;libs\PSGlib.c:101: PSGMusicStatus=PSG_PLAYING;
      000B94 3E 01            [ 7] 2499 	ld	a, #0x01
      000B96 32r07r01         [13] 2500 	ld	(#_PSGMusicStatus), a
                                   2501 ;libs\PSGlib.c:103: }
      000B99 C9               [10] 2502 	ret
                                   2503 ;libs\PSGlib.c:105: void PSGPlay (void *song) {
                                   2504 ;	---------------------------------
                                   2505 ; Function PSGPlay
                                   2506 ; ---------------------------------
      000B9A                       2507 _PSGPlay::
                                   2508 ;libs\PSGlib.c:109: PSGStop();
      000B9A CDr37r0A         [17] 2509 	call	_PSGStop
                                   2510 ;libs\PSGlib.c:110: PSGLoopFlag=1;
      000B9D FD 21r0Fr01      [14] 2511 	ld	iy, #_PSGLoopFlag
      000BA1 FD 36 00 01      [19] 2512 	ld	0 (iy), #0x01
                                   2513 ;libs\PSGlib.c:111: PSGMusicStart=song;           // store the begin point of music
      000BA5 D1               [10] 2514 	pop	de
      000BA6 C1               [10] 2515 	pop	bc
      000BA7 C5               [11] 2516 	push	bc
      000BA8 D5               [11] 2517 	push	de
      000BA9 ED 43r08r01      [20] 2518 	ld	(_PSGMusicStart), bc
                                   2519 ;libs\PSGlib.c:112: PSGMusicPointer=song;         // set music pointer to begin of music
      000BAD ED 43r0Ar01      [20] 2520 	ld	(_PSGMusicPointer), bc
                                   2521 ;libs\PSGlib.c:113: PSGMusicLoopPoint=song;       // looppointer points to begin too
      000BB1 ED 43r0Cr01      [20] 2522 	ld	(_PSGMusicLoopPoint), bc
                                   2523 ;libs\PSGlib.c:115: PSGMusicSkipFrames=0;         // reset the skip frames
                                   2524 ;libs\PSGlib.c:116: PSGMusicSubstringLen=0;       // reset the substring len (for compression)
      000BB5 3E 00            [ 7] 2525 	ld	a,#0x00
      000BB7 32r0Er01         [13] 2526 	ld	(#_PSGMusicSkipFrames),a
      000BBA 32r12r01         [13] 2527 	ld	(#_PSGMusicSubstringLen), a
                                   2528 ;libs\PSGlib.c:117: PSGMusicLastLatch=PSGLatch|PSGChannel0|PSGVolumeData|0x0F;   // latch channel 0, volume=0xF (silent)
      000BBD 3E 9F            [ 7] 2529 	ld	a, #0x9f
      000BBF 32r10r01         [13] 2530 	ld	(#_PSGMusicLastLatch), a
                                   2531 ;libs\PSGlib.c:118: PSGMusicStatus=PSG_PLAYING;
      000BC2 3E 01            [ 7] 2532 	ld	a, #0x01
      000BC4 32r07r01         [13] 2533 	ld	(#_PSGMusicStatus), a
                                   2534 ;libs\PSGlib.c:119: }
      000BC7 C9               [10] 2535 	ret
                                   2536 ;libs\PSGlib.c:121: void PSGCancelLoop (void) {
                                   2537 ;	---------------------------------
                                   2538 ; Function PSGCancelLoop
                                   2539 ; ---------------------------------
      000BC8                       2540 _PSGCancelLoop::
                                   2541 ;libs\PSGlib.c:125: PSGLoopFlag=0;
      000BC8 3E 00            [ 7] 2542 	ld	a, #0x00
      000BCA 32r0Fr01         [13] 2543 	ld	(#_PSGLoopFlag), a
                                   2544 ;libs\PSGlib.c:126: }
      000BCD C9               [10] 2545 	ret
                                   2546 ;libs\PSGlib.c:128: void PSGPlayNoRepeat (void *song) {
                                   2547 ;	---------------------------------
                                   2548 ; Function PSGPlayNoRepeat
                                   2549 ; ---------------------------------
      000BCE                       2550 _PSGPlayNoRepeat::
                                   2551 ;libs\PSGlib.c:132: PSGPlay(song);
      000BCE C1               [10] 2552 	pop	bc
      000BCF E1               [10] 2553 	pop	hl
      000BD0 E5               [11] 2554 	push	hl
      000BD1 C5               [11] 2555 	push	bc
      000BD2 E5               [11] 2556 	push	hl
      000BD3 CDr9Ar0B         [17] 2557 	call	_PSGPlay
      000BD6 F1               [10] 2558 	pop	af
                                   2559 ;libs\PSGlib.c:133: PSGLoopFlag=0;
      000BD7 3E 00            [ 7] 2560 	ld	a, #0x00
      000BD9 32r0Fr01         [13] 2561 	ld	(#_PSGLoopFlag), a
                                   2562 ;libs\PSGlib.c:134: }
      000BDC C9               [10] 2563 	ret
                                   2564 ;libs\PSGlib.c:136: unsigned char PSGGetStatus (void) {
                                   2565 ;	---------------------------------
                                   2566 ; Function PSGGetStatus
                                   2567 ; ---------------------------------
      000BDD                       2568 _PSGGetStatus::
                                   2569 ;libs\PSGlib.c:140: return(PSGMusicStatus);
      000BDD 3Ar07r01         [13] 2570 	ld	a, (#_PSGMusicStatus + 0)
      000BE0 6F               [ 4] 2571 	ld	l, a
                                   2572 ;libs\PSGlib.c:141: }
      000BE1 C9               [10] 2573 	ret
                                   2574 ;libs\PSGlib.c:143: void PSGSilenceChannels (void) {
                                   2575 ;	---------------------------------
                                   2576 ; Function PSGSilenceChannels
                                   2577 ; ---------------------------------
      000BE2                       2578 _PSGSilenceChannels::
                                   2579 ;libs\PSGlib.c:147: PSGPort=PSGLatch|PSGChannel0|PSGVolumeData|0x0F;
      000BE2 3E 9F            [ 7] 2580 	ld	a, #0x9f
      000BE4 D3 7F            [11] 2581 	out	(_PSGPort), a
                                   2582 ;libs\PSGlib.c:148: PSGPort=PSGLatch|PSGChannel1|PSGVolumeData|0x0F;
      000BE6 3E BF            [ 7] 2583 	ld	a, #0xbf
      000BE8 D3 7F            [11] 2584 	out	(_PSGPort), a
                                   2585 ;libs\PSGlib.c:149: PSGPort=PSGLatch|PSGChannel2|PSGVolumeData|0x0F;
      000BEA 3E DF            [ 7] 2586 	ld	a, #0xdf
      000BEC D3 7F            [11] 2587 	out	(_PSGPort), a
                                   2588 ;libs\PSGlib.c:150: PSGPort=PSGLatch|PSGChannel3|PSGVolumeData|0x0F;
      000BEE 3E FF            [ 7] 2589 	ld	a, #0xff
      000BF0 D3 7F            [11] 2590 	out	(_PSGPort), a
                                   2591 ;libs\PSGlib.c:151: }
      000BF2 C9               [10] 2592 	ret
                                   2593 ;libs\PSGlib.c:153: void PSGRestoreVolumes (void) {
                                   2594 ;	---------------------------------
                                   2595 ; Function PSGRestoreVolumes
                                   2596 ; ---------------------------------
      000BF3                       2597 _PSGRestoreVolumes::
                                   2598 ;libs\PSGlib.c:158: PSGPort=PSGLatch|PSGChannel0|PSGVolumeData|((PSGChan0Volume+PSGMusicVolumeAttenuation>15)?15:PSGChan0Volume+PSGMusicVolumeAttenuation);
      000BF3 3Ar11r01         [13] 2599 	ld	a, (#_PSGMusicVolumeAttenuation + 0)
      000BF6 4F               [ 4] 2600 	ld	c, a
      000BF7 06 00            [ 7] 2601 	ld	b, #0x00
                                   2602 ;libs\PSGlib.c:157: if (PSGMusicStatus) {
      000BF9 3Ar07r01         [13] 2603 	ld	a,(#_PSGMusicStatus + 0)
      000BFC B7               [ 4] 2604 	or	a, a
      000BFD 28 4E            [12] 2605 	jr	Z, 00102$
                                   2606 ;libs\PSGlib.c:158: PSGPort=PSGLatch|PSGChannel0|PSGVolumeData|((PSGChan0Volume+PSGMusicVolumeAttenuation>15)?15:PSGChan0Volume+PSGMusicVolumeAttenuation);
      000BFF 3Ar15r01         [13] 2607 	ld	a, (#_PSGChan0Volume + 0)
      000C02 6F               [ 4] 2608 	ld	l, a
      000C03 26 00            [ 7] 2609 	ld	h, #0x00
      000C05 09               [11] 2610 	add	hl, bc
      000C06 3E 0F            [ 7] 2611 	ld	a, #0x0f
      000C08 BD               [ 4] 2612 	cp	a, l
      000C09 3E 00            [ 7] 2613 	ld	a, #0x00
      000C0B 9C               [ 4] 2614 	sbc	a, h
      000C0C E2r11r0C         [10] 2615 	jp	PO, 00168$
      000C0F EE 80            [ 7] 2616 	xor	a, #0x80
      000C11                       2617 00168$:
      000C11 F2r19r0C         [10] 2618 	jp	P, 00115$
      000C14 11 0F 00         [10] 2619 	ld	de, #0x000f
      000C17 18 08            [12] 2620 	jr	00116$
      000C19                       2621 00115$:
      000C19 21r11r01         [10] 2622 	ld	hl, #_PSGMusicVolumeAttenuation
      000C1C 3Ar15r01         [13] 2623 	ld	a,(#_PSGChan0Volume + 0)
      000C1F 86               [ 7] 2624 	add	a, (hl)
      000C20 5F               [ 4] 2625 	ld	e, a
      000C21                       2626 00116$:
      000C21 7B               [ 4] 2627 	ld	a, e
      000C22 F6 90            [ 7] 2628 	or	a, #0x90
      000C24 D3 7F            [11] 2629 	out	(_PSGPort), a
                                   2630 ;libs\PSGlib.c:159: PSGPort=PSGLatch|PSGChannel1|PSGVolumeData|((PSGChan1Volume+PSGMusicVolumeAttenuation>15)?15:PSGChan1Volume+PSGMusicVolumeAttenuation);
      000C26 3Ar16r01         [13] 2631 	ld	a, (#_PSGChan1Volume + 0)
      000C29 6F               [ 4] 2632 	ld	l, a
      000C2A 26 00            [ 7] 2633 	ld	h, #0x00
      000C2C 09               [11] 2634 	add	hl, bc
      000C2D 3E 0F            [ 7] 2635 	ld	a, #0x0f
      000C2F BD               [ 4] 2636 	cp	a, l
      000C30 3E 00            [ 7] 2637 	ld	a, #0x00
      000C32 9C               [ 4] 2638 	sbc	a, h
      000C33 E2r38r0C         [10] 2639 	jp	PO, 00169$
      000C36 EE 80            [ 7] 2640 	xor	a, #0x80
      000C38                       2641 00169$:
      000C38 F2r40r0C         [10] 2642 	jp	P, 00117$
      000C3B 11 0F 00         [10] 2643 	ld	de, #0x000f
      000C3E 18 08            [12] 2644 	jr	00118$
      000C40                       2645 00117$:
      000C40 21r11r01         [10] 2646 	ld	hl, #_PSGMusicVolumeAttenuation
      000C43 3Ar16r01         [13] 2647 	ld	a,(#_PSGChan1Volume + 0)
      000C46 86               [ 7] 2648 	add	a, (hl)
      000C47 5F               [ 4] 2649 	ld	e, a
      000C48                       2650 00118$:
      000C48 7B               [ 4] 2651 	ld	a, e
      000C49 F6 B0            [ 7] 2652 	or	a, #0xb0
      000C4B D3 7F            [11] 2653 	out	(_PSGPort), a
      000C4D                       2654 00102$:
                                   2655 ;libs\PSGlib.c:161: if (PSGChannel2SFX)
      000C4D 3Ar1Cr01         [13] 2656 	ld	a,(#_PSGChannel2SFX + 0)
      000C50 B7               [ 4] 2657 	or	a, a
      000C51 28 09            [12] 2658 	jr	Z, 00106$
                                   2659 ;libs\PSGlib.c:162: PSGPort=PSGLatch|PSGChannel2|PSGVolumeData|PSGSFXChan2Volume;
      000C53 3Ar1Er01         [13] 2660 	ld	a,(#_PSGSFXChan2Volume + 0)
      000C56 F6 D0            [ 7] 2661 	or	a, #0xd0
      000C58 D3 7F            [11] 2662 	out	(_PSGPort), a
      000C5A 18 2D            [12] 2663 	jr	00107$
      000C5C                       2664 00106$:
                                   2665 ;libs\PSGlib.c:163: else if (PSGMusicStatus)
      000C5C 3Ar07r01         [13] 2666 	ld	a,(#_PSGMusicStatus + 0)
      000C5F B7               [ 4] 2667 	or	a, a
      000C60 28 27            [12] 2668 	jr	Z, 00107$
                                   2669 ;libs\PSGlib.c:164: PSGPort=PSGLatch|PSGChannel2|PSGVolumeData|((PSGChan2Volume+PSGMusicVolumeAttenuation>15)?15:PSGChan2Volume+PSGMusicVolumeAttenuation);
      000C62 3Ar17r01         [13] 2670 	ld	a, (#_PSGChan2Volume + 0)
      000C65 6F               [ 4] 2671 	ld	l, a
      000C66 26 00            [ 7] 2672 	ld	h, #0x00
      000C68 09               [11] 2673 	add	hl, bc
      000C69 3E 0F            [ 7] 2674 	ld	a, #0x0f
      000C6B BD               [ 4] 2675 	cp	a, l
      000C6C 3E 00            [ 7] 2676 	ld	a, #0x00
      000C6E 9C               [ 4] 2677 	sbc	a, h
      000C6F E2r74r0C         [10] 2678 	jp	PO, 00170$
      000C72 EE 80            [ 7] 2679 	xor	a, #0x80
      000C74                       2680 00170$:
      000C74 F2r7Cr0C         [10] 2681 	jp	P, 00119$
      000C77 11 0F 00         [10] 2682 	ld	de, #0x000f
      000C7A 18 08            [12] 2683 	jr	00120$
      000C7C                       2684 00119$:
      000C7C 21r11r01         [10] 2685 	ld	hl, #_PSGMusicVolumeAttenuation
      000C7F 3Ar17r01         [13] 2686 	ld	a,(#_PSGChan2Volume + 0)
      000C82 86               [ 7] 2687 	add	a, (hl)
      000C83 5F               [ 4] 2688 	ld	e, a
      000C84                       2689 00120$:
      000C84 7B               [ 4] 2690 	ld	a, e
      000C85 F6 D0            [ 7] 2691 	or	a, #0xd0
      000C87 D3 7F            [11] 2692 	out	(_PSGPort), a
      000C89                       2693 00107$:
                                   2694 ;libs\PSGlib.c:165: if (PSGChannel3SFX)
      000C89 3Ar1Dr01         [13] 2695 	ld	a,(#_PSGChannel3SFX + 0)
      000C8C B7               [ 4] 2696 	or	a, a
      000C8D 28 08            [12] 2697 	jr	Z, 00111$
                                   2698 ;libs\PSGlib.c:166: PSGPort=PSGLatch|PSGChannel3|PSGVolumeData|PSGSFXChan3Volume;
      000C8F 3Ar1Fr01         [13] 2699 	ld	a,(#_PSGSFXChan3Volume + 0)
      000C92 F6 F0            [ 7] 2700 	or	a, #0xf0
      000C94 D3 7F            [11] 2701 	out	(_PSGPort), a
      000C96 C9               [10] 2702 	ret
      000C97                       2703 00111$:
                                   2704 ;libs\PSGlib.c:167: else if (PSGMusicStatus)
      000C97 3Ar07r01         [13] 2705 	ld	a,(#_PSGMusicStatus + 0)
      000C9A B7               [ 4] 2706 	or	a, a
      000C9B C8               [11] 2707 	ret	Z
                                   2708 ;libs\PSGlib.c:168: PSGPort=PSGLatch|PSGChannel3|PSGVolumeData|((PSGChan3Volume+PSGMusicVolumeAttenuation>15)?15:PSGChan3Volume+PSGMusicVolumeAttenuation);
      000C9C 3Ar18r01         [13] 2709 	ld	a, (#_PSGChan3Volume + 0)
      000C9F 6F               [ 4] 2710 	ld	l, a
      000CA0 26 00            [ 7] 2711 	ld	h, #0x00
      000CA2 09               [11] 2712 	add	hl, bc
      000CA3 3E 0F            [ 7] 2713 	ld	a, #0x0f
      000CA5 BD               [ 4] 2714 	cp	a, l
      000CA6 3E 00            [ 7] 2715 	ld	a, #0x00
      000CA8 9C               [ 4] 2716 	sbc	a, h
      000CA9 E2rAEr0C         [10] 2717 	jp	PO, 00171$
      000CAC EE 80            [ 7] 2718 	xor	a, #0x80
      000CAE                       2719 00171$:
      000CAE F2rB6r0C         [10] 2720 	jp	P, 00121$
      000CB1 01 0F 00         [10] 2721 	ld	bc, #0x000f
      000CB4 18 08            [12] 2722 	jr	00122$
      000CB6                       2723 00121$:
      000CB6 21r11r01         [10] 2724 	ld	hl, #_PSGMusicVolumeAttenuation
      000CB9 3Ar18r01         [13] 2725 	ld	a,(#_PSGChan3Volume + 0)
      000CBC 86               [ 7] 2726 	add	a, (hl)
      000CBD 4F               [ 4] 2727 	ld	c, a
      000CBE                       2728 00122$:
      000CBE 79               [ 4] 2729 	ld	a, c
      000CBF F6 F0            [ 7] 2730 	or	a, #0xf0
      000CC1 D3 7F            [11] 2731 	out	(_PSGPort), a
                                   2732 ;libs\PSGlib.c:169: }
      000CC3 C9               [10] 2733 	ret
                                   2734 ;libs\PSGlib.c:171: void PSGSetMusicVolumeAttenuation (unsigned char attenuation) {
                                   2735 ;	---------------------------------
                                   2736 ; Function PSGSetMusicVolumeAttenuation
                                   2737 ; ---------------------------------
      000CC4                       2738 _PSGSetMusicVolumeAttenuation::
      000CC4 DD E5            [15] 2739 	push	ix
      000CC6 DD 21 00 00      [14] 2740 	ld	ix,#0
      000CCA DD 39            [15] 2741 	add	ix,sp
                                   2742 ;libs\PSGlib.c:175: PSGMusicVolumeAttenuation=attenuation;
      000CCC DD 7E 04         [19] 2743 	ld	a, 4 (ix)
      000CCF 32r11r01         [13] 2744 	ld	(#_PSGMusicVolumeAttenuation), a
                                   2745 ;libs\PSGlib.c:176: if (PSGMusicStatus) {
      000CD2 3Ar07r01         [13] 2746 	ld	a,(#_PSGMusicStatus + 0)
      000CD5 B7               [ 4] 2747 	or	a, a
      000CD6 CAr88r0D         [10] 2748 	jp	Z, 00107$
                                   2749 ;libs\PSGlib.c:177: PSGPort=PSGLatch|PSGChannel0|PSGVolumeData|((PSGChan0Volume+PSGMusicVolumeAttenuation>15)?15:PSGChan0Volume+PSGMusicVolumeAttenuation);
      000CD9 3Ar15r01         [13] 2750 	ld	a,(#_PSGChan0Volume + 0)
      000CDC 1E 00            [ 7] 2751 	ld	e, #0x00
      000CDE 21r11r01         [10] 2752 	ld	hl, #_PSGMusicVolumeAttenuation
      000CE1 4E               [ 7] 2753 	ld	c, (hl)
      000CE2 06 00            [ 7] 2754 	ld	b, #0x00
      000CE4 6F               [ 4] 2755 	ld	l, a
      000CE5 63               [ 4] 2756 	ld	h, e
      000CE6 09               [11] 2757 	add	hl, bc
      000CE7 3E 0F            [ 7] 2758 	ld	a, #0x0f
      000CE9 BD               [ 4] 2759 	cp	a, l
      000CEA 3E 00            [ 7] 2760 	ld	a, #0x00
      000CEC 9C               [ 4] 2761 	sbc	a, h
      000CED E2rF2r0C         [10] 2762 	jp	PO, 00152$
      000CF0 EE 80            [ 7] 2763 	xor	a, #0x80
      000CF2                       2764 00152$:
      000CF2 F2rFAr0C         [10] 2765 	jp	P, 00109$
      000CF5 11 0F 00         [10] 2766 	ld	de, #0x000f
      000CF8 18 08            [12] 2767 	jr	00110$
      000CFA                       2768 00109$:
      000CFA 21r11r01         [10] 2769 	ld	hl, #_PSGMusicVolumeAttenuation
      000CFD 3Ar15r01         [13] 2770 	ld	a,(#_PSGChan0Volume + 0)
      000D00 86               [ 7] 2771 	add	a, (hl)
      000D01 5F               [ 4] 2772 	ld	e, a
      000D02                       2773 00110$:
      000D02 7B               [ 4] 2774 	ld	a, e
      000D03 F6 90            [ 7] 2775 	or	a, #0x90
      000D05 D3 7F            [11] 2776 	out	(_PSGPort), a
                                   2777 ;libs\PSGlib.c:178: PSGPort=PSGLatch|PSGChannel1|PSGVolumeData|((PSGChan1Volume+PSGMusicVolumeAttenuation>15)?15:PSGChan1Volume+PSGMusicVolumeAttenuation);
      000D07 3Ar16r01         [13] 2778 	ld	a, (#_PSGChan1Volume + 0)
      000D0A 6F               [ 4] 2779 	ld	l, a
      000D0B 26 00            [ 7] 2780 	ld	h, #0x00
      000D0D 09               [11] 2781 	add	hl, bc
      000D0E 3E 0F            [ 7] 2782 	ld	a, #0x0f
      000D10 BD               [ 4] 2783 	cp	a, l
      000D11 3E 00            [ 7] 2784 	ld	a, #0x00
      000D13 9C               [ 4] 2785 	sbc	a, h
      000D14 E2r19r0D         [10] 2786 	jp	PO, 00153$
      000D17 EE 80            [ 7] 2787 	xor	a, #0x80
      000D19                       2788 00153$:
      000D19 F2r21r0D         [10] 2789 	jp	P, 00111$
      000D1C 11 0F 00         [10] 2790 	ld	de, #0x000f
      000D1F 18 08            [12] 2791 	jr	00112$
      000D21                       2792 00111$:
      000D21 21r11r01         [10] 2793 	ld	hl, #_PSGMusicVolumeAttenuation
      000D24 3Ar16r01         [13] 2794 	ld	a,(#_PSGChan1Volume + 0)
      000D27 86               [ 7] 2795 	add	a, (hl)
      000D28 5F               [ 4] 2796 	ld	e, a
      000D29                       2797 00112$:
      000D29 7B               [ 4] 2798 	ld	a, e
      000D2A F6 B0            [ 7] 2799 	or	a, #0xb0
      000D2C D3 7F            [11] 2800 	out	(_PSGPort), a
                                   2801 ;libs\PSGlib.c:179: if (!PSGChannel2SFX)
      000D2E 3Ar1Cr01         [13] 2802 	ld	a,(#_PSGChannel2SFX + 0)
      000D31 B7               [ 4] 2803 	or	a, a
      000D32 20 27            [12] 2804 	jr	NZ, 00102$
                                   2805 ;libs\PSGlib.c:180: PSGPort=PSGLatch|PSGChannel2|PSGVolumeData|((PSGChan2Volume+PSGMusicVolumeAttenuation>15)?15:PSGChan2Volume+PSGMusicVolumeAttenuation);
      000D34 3Ar17r01         [13] 2806 	ld	a, (#_PSGChan2Volume + 0)
      000D37 6F               [ 4] 2807 	ld	l, a
      000D38 26 00            [ 7] 2808 	ld	h, #0x00
      000D3A 09               [11] 2809 	add	hl, bc
      000D3B 3E 0F            [ 7] 2810 	ld	a, #0x0f
      000D3D BD               [ 4] 2811 	cp	a, l
      000D3E 3E 00            [ 7] 2812 	ld	a, #0x00
      000D40 9C               [ 4] 2813 	sbc	a, h
      000D41 E2r46r0D         [10] 2814 	jp	PO, 00154$
      000D44 EE 80            [ 7] 2815 	xor	a, #0x80
      000D46                       2816 00154$:
      000D46 F2r4Er0D         [10] 2817 	jp	P, 00113$
      000D49 11 0F 00         [10] 2818 	ld	de, #0x000f
      000D4C 18 08            [12] 2819 	jr	00114$
      000D4E                       2820 00113$:
      000D4E 21r11r01         [10] 2821 	ld	hl, #_PSGMusicVolumeAttenuation
      000D51 3Ar17r01         [13] 2822 	ld	a,(#_PSGChan2Volume + 0)
      000D54 86               [ 7] 2823 	add	a, (hl)
      000D55 5F               [ 4] 2824 	ld	e, a
      000D56                       2825 00114$:
      000D56 7B               [ 4] 2826 	ld	a, e
      000D57 F6 D0            [ 7] 2827 	or	a, #0xd0
      000D59 D3 7F            [11] 2828 	out	(_PSGPort), a
      000D5B                       2829 00102$:
                                   2830 ;libs\PSGlib.c:181: if (!PSGChannel3SFX)
      000D5B 3Ar1Dr01         [13] 2831 	ld	a,(#_PSGChannel3SFX + 0)
      000D5E B7               [ 4] 2832 	or	a, a
      000D5F 20 27            [12] 2833 	jr	NZ, 00107$
                                   2834 ;libs\PSGlib.c:182: PSGPort=PSGLatch|PSGChannel3|PSGVolumeData|((PSGChan3Volume+PSGMusicVolumeAttenuation>15)?15:PSGChan3Volume+PSGMusicVolumeAttenuation);
      000D61 3Ar18r01         [13] 2835 	ld	a, (#_PSGChan3Volume + 0)
      000D64 6F               [ 4] 2836 	ld	l, a
      000D65 26 00            [ 7] 2837 	ld	h, #0x00
      000D67 09               [11] 2838 	add	hl, bc
      000D68 3E 0F            [ 7] 2839 	ld	a, #0x0f
      000D6A BD               [ 4] 2840 	cp	a, l
      000D6B 3E 00            [ 7] 2841 	ld	a, #0x00
      000D6D 9C               [ 4] 2842 	sbc	a, h
      000D6E E2r73r0D         [10] 2843 	jp	PO, 00155$
      000D71 EE 80            [ 7] 2844 	xor	a, #0x80
      000D73                       2845 00155$:
      000D73 F2r7Br0D         [10] 2846 	jp	P, 00115$
      000D76 01 0F 00         [10] 2847 	ld	bc, #0x000f
      000D79 18 08            [12] 2848 	jr	00116$
      000D7B                       2849 00115$:
      000D7B 21r11r01         [10] 2850 	ld	hl, #_PSGMusicVolumeAttenuation
      000D7E 3Ar18r01         [13] 2851 	ld	a,(#_PSGChan3Volume + 0)
      000D81 86               [ 7] 2852 	add	a, (hl)
      000D82 4F               [ 4] 2853 	ld	c, a
      000D83                       2854 00116$:
      000D83 79               [ 4] 2855 	ld	a, c
      000D84 F6 F0            [ 7] 2856 	or	a, #0xf0
      000D86 D3 7F            [11] 2857 	out	(_PSGPort), a
      000D88                       2858 00107$:
                                   2859 ;libs\PSGlib.c:184: }
      000D88 DD E1            [14] 2860 	pop	ix
      000D8A C9               [10] 2861 	ret
                                   2862 ;libs\PSGlib.c:186: void PSGSFXStop (void) {
                                   2863 ;	---------------------------------
                                   2864 ; Function PSGSFXStop
                                   2865 ; ---------------------------------
      000D8B                       2866 _PSGSFXStop::
      000D8B DD E5            [15] 2867 	push	ix
      000D8D DD 21 00 00      [14] 2868 	ld	ix,#0
      000D91 DD 39            [15] 2869 	add	ix,sp
      000D93 F5               [11] 2870 	push	af
                                   2871 ;libs\PSGlib.c:190: if (PSGSFXStatus) {
      000D94 3Ar20r01         [13] 2872 	ld	a,(#_PSGSFXStatus + 0)
      000D97 B7               [ 4] 2873 	or	a, a
      000D98 CAr4Er0E         [10] 2874 	jp	Z, 00113$
                                   2875 ;libs\PSGlib.c:195: PSGPort=PSGLatch|PSGChannel2|PSGVolumeData|(((PSGChan2Volume&0x0F)+PSGMusicVolumeAttenuation>15)?15:(PSGChan2Volume&0x0F)+PSGMusicVolumeAttenuation);
      000D9B FD 21r11r01      [14] 2876 	ld	iy, #_PSGMusicVolumeAttenuation
      000D9F FD 7E 00         [19] 2877 	ld	a, 0 (iy)
      000DA2 DD 77 FE         [19] 2878 	ld	-2 (ix), a
      000DA5 DD 36 FF 00      [19] 2879 	ld	-1 (ix), #0
      000DA9 FD 4E 00         [19] 2880 	ld	c, 0 (iy)
                                   2881 ;libs\PSGlib.c:191: if (PSGChannel2SFX) {
      000DAC 3Ar1Cr01         [13] 2882 	ld	a,(#_PSGChannel2SFX + 0)
      000DAF B7               [ 4] 2883 	or	a, a
      000DB0 28 4C            [12] 2884 	jr	Z, 00105$
                                   2885 ;libs\PSGlib.c:192: if (PSGMusicStatus) {
      000DB2 3Ar07r01         [13] 2886 	ld	a,(#_PSGMusicStatus + 0)
      000DB5 B7               [ 4] 2887 	or	a, a
      000DB6 28 3D            [12] 2888 	jr	Z, 00102$
                                   2889 ;libs\PSGlib.c:193: PSGPort=PSGLatch|PSGChannel2|(PSGChan2LowTone&0x0F);
      000DB8 3Ar19r01         [13] 2890 	ld	a,(#_PSGChan2LowTone + 0)
      000DBB E6 0F            [ 7] 2891 	and	a, #0x0f
      000DBD F6 C0            [ 7] 2892 	or	a, #0xc0
      000DBF D3 7F            [11] 2893 	out	(_PSGPort), a
                                   2894 ;libs\PSGlib.c:194: PSGPort=PSGChan2HighTone&0x3F;
      000DC1 3Ar1Ar01         [13] 2895 	ld	a,(#_PSGChan2HighTone + 0)
      000DC4 E6 3F            [ 7] 2896 	and	a, #0x3f
      000DC6 D3 7F            [11] 2897 	out	(_PSGPort), a
                                   2898 ;libs\PSGlib.c:195: PSGPort=PSGLatch|PSGChannel2|PSGVolumeData|(((PSGChan2Volume&0x0F)+PSGMusicVolumeAttenuation>15)?15:(PSGChan2Volume&0x0F)+PSGMusicVolumeAttenuation);
      000DC8 3Ar17r01         [13] 2899 	ld	a,(#_PSGChan2Volume + 0)
      000DCB E6 0F            [ 7] 2900 	and	a, #0x0f
      000DCD 5F               [ 4] 2901 	ld	e, a
      000DCE 16 00            [ 7] 2902 	ld	d, #0x00
      000DD0 E1               [10] 2903 	pop	hl
      000DD1 E5               [11] 2904 	push	hl
      000DD2 19               [11] 2905 	add	hl, de
      000DD3 3E 0F            [ 7] 2906 	ld	a, #0x0f
      000DD5 BD               [ 4] 2907 	cp	a, l
      000DD6 3E 00            [ 7] 2908 	ld	a, #0x00
      000DD8 9C               [ 4] 2909 	sbc	a, h
      000DD9 E2rDEr0D         [10] 2910 	jp	PO, 00154$
      000DDC EE 80            [ 7] 2911 	xor	a, #0x80
      000DDE                       2912 00154$:
      000DDE F2rE6r0D         [10] 2913 	jp	P, 00115$
      000DE1 11 0F 00         [10] 2914 	ld	de, #0x000f
      000DE4 18 08            [12] 2915 	jr	00116$
      000DE6                       2916 00115$:
      000DE6 3Ar17r01         [13] 2917 	ld	a,(#_PSGChan2Volume + 0)
      000DE9 E6 0F            [ 7] 2918 	and	a, #0x0f
      000DEB 81               [ 4] 2919 	add	a, c
      000DEC 5F               [ 4] 2920 	ld	e, a
      000DED 17               [ 4] 2921 	rla
      000DEE                       2922 00116$:
      000DEE 7B               [ 4] 2923 	ld	a, e
      000DEF F6 D0            [ 7] 2924 	or	a, #0xd0
      000DF1 D3 7F            [11] 2925 	out	(_PSGPort), a
      000DF3 18 04            [12] 2926 	jr	00103$
      000DF5                       2927 00102$:
                                   2928 ;libs\PSGlib.c:197: PSGPort=PSGLatch|PSGChannel2|PSGVolumeData|0x0F;
      000DF5 3E DF            [ 7] 2929 	ld	a, #0xdf
      000DF7 D3 7F            [11] 2930 	out	(_PSGPort), a
      000DF9                       2931 00103$:
                                   2932 ;libs\PSGlib.c:199: PSGChannel2SFX=PSG_STOPPED;
      000DF9 3E 00            [ 7] 2933 	ld	a, #0x00
      000DFB 32r1Cr01         [13] 2934 	ld	(#_PSGChannel2SFX), a
      000DFE                       2935 00105$:
                                   2936 ;libs\PSGlib.c:202: if (PSGChannel3SFX) {
      000DFE 3Ar1Dr01         [13] 2937 	ld	a,(#_PSGChannel3SFX + 0)
      000E01 B7               [ 4] 2938 	or	a, a
      000E02 28 45            [12] 2939 	jr	Z, 00110$
                                   2940 ;libs\PSGlib.c:203: if (PSGMusicStatus) {
      000E04 3Ar07r01         [13] 2941 	ld	a,(#_PSGMusicStatus + 0)
      000E07 B7               [ 4] 2942 	or	a, a
      000E08 28 36            [12] 2943 	jr	Z, 00107$
                                   2944 ;libs\PSGlib.c:204: PSGPort=PSGLatch|PSGChannel3|(PSGChan3LowTone&0x0F);
      000E0A 3Ar1Br01         [13] 2945 	ld	a,(#_PSGChan3LowTone + 0)
      000E0D E6 0F            [ 7] 2946 	and	a, #0x0f
      000E0F F6 E0            [ 7] 2947 	or	a, #0xe0
      000E11 D3 7F            [11] 2948 	out	(_PSGPort), a
                                   2949 ;libs\PSGlib.c:205: PSGPort=PSGLatch|PSGChannel3|PSGVolumeData|(((PSGChan3Volume&0x0F)+PSGMusicVolumeAttenuation>15)?15:(PSGChan3Volume&0x0F)+PSGMusicVolumeAttenuation);
      000E13 3Ar18r01         [13] 2950 	ld	a,(#_PSGChan3Volume + 0)
      000E16 E6 0F            [ 7] 2951 	and	a, #0x0f
      000E18 5F               [ 4] 2952 	ld	e, a
      000E19 16 00            [ 7] 2953 	ld	d, #0x00
      000E1B E1               [10] 2954 	pop	hl
      000E1C E5               [11] 2955 	push	hl
      000E1D 19               [11] 2956 	add	hl, de
      000E1E 3E 0F            [ 7] 2957 	ld	a, #0x0f
      000E20 BD               [ 4] 2958 	cp	a, l
      000E21 3E 00            [ 7] 2959 	ld	a, #0x00
      000E23 9C               [ 4] 2960 	sbc	a, h
      000E24 E2r29r0E         [10] 2961 	jp	PO, 00155$
      000E27 EE 80            [ 7] 2962 	xor	a, #0x80
      000E29                       2963 00155$:
      000E29 F2r31r0E         [10] 2964 	jp	P, 00117$
      000E2C 01 0F 00         [10] 2965 	ld	bc, #0x000f
      000E2F 18 08            [12] 2966 	jr	00118$
      000E31                       2967 00117$:
      000E31 3Ar18r01         [13] 2968 	ld	a,(#_PSGChan3Volume + 0)
      000E34 E6 0F            [ 7] 2969 	and	a, #0x0f
      000E36 81               [ 4] 2970 	add	a, c
      000E37 4F               [ 4] 2971 	ld	c, a
      000E38 17               [ 4] 2972 	rla
      000E39                       2973 00118$:
      000E39 79               [ 4] 2974 	ld	a, c
      000E3A F6 F0            [ 7] 2975 	or	a, #0xf0
      000E3C D3 7F            [11] 2976 	out	(_PSGPort), a
      000E3E 18 04            [12] 2977 	jr	00108$
      000E40                       2978 00107$:
                                   2979 ;libs\PSGlib.c:207: PSGPort=PSGLatch|PSGChannel3|PSGVolumeData|0x0F;
      000E40 3E FF            [ 7] 2980 	ld	a, #0xff
      000E42 D3 7F            [11] 2981 	out	(_PSGPort), a
      000E44                       2982 00108$:
                                   2983 ;libs\PSGlib.c:209: PSGChannel3SFX=PSG_STOPPED;
      000E44 3E 00            [ 7] 2984 	ld	a, #0x00
      000E46 32r1Dr01         [13] 2985 	ld	(#_PSGChannel3SFX), a
      000E49                       2986 00110$:
                                   2987 ;libs\PSGlib.c:211: PSGSFXStatus=PSG_STOPPED;
      000E49 3E 00            [ 7] 2988 	ld	a, #0x00
      000E4B 32r20r01         [13] 2989 	ld	(#_PSGSFXStatus), a
      000E4E                       2990 00113$:
                                   2991 ;libs\PSGlib.c:213: }
      000E4E DD F9            [10] 2992 	ld	sp, ix
      000E50 DD E1            [14] 2993 	pop	ix
      000E52 C9               [10] 2994 	ret
                                   2995 ;libs\PSGlib.c:215: void PSGSFXPlay (void *sfx, unsigned char channels) {
                                   2996 ;	---------------------------------
                                   2997 ; Function PSGSFXPlay
                                   2998 ; ---------------------------------
      000E53                       2999 _PSGSFXPlay::
                                   3000 ;libs\PSGlib.c:220: PSGSFXStop();
      000E53 CDr8Br0D         [17] 3001 	call	_PSGSFXStop
                                   3002 ;libs\PSGlib.c:221: PSGSFXLoopFlag=0;
      000E56 FD 21r28r01      [14] 3003 	ld	iy, #_PSGSFXLoopFlag
      000E5A FD 36 00 00      [19] 3004 	ld	0 (iy), #0x00
                                   3005 ;libs\PSGlib.c:222: PSGSFXStart=sfx;              // store begin of SFX
      000E5E D1               [10] 3006 	pop	de
      000E5F C1               [10] 3007 	pop	bc
      000E60 C5               [11] 3008 	push	bc
      000E61 D5               [11] 3009 	push	de
      000E62 ED 43r21r01      [20] 3010 	ld	(_PSGSFXStart), bc
                                   3011 ;libs\PSGlib.c:223: PSGSFXPointer=sfx;            // set the pointer to begin of SFX
      000E66 ED 43r23r01      [20] 3012 	ld	(_PSGSFXPointer), bc
                                   3013 ;libs\PSGlib.c:224: PSGSFXLoopPoint=sfx;          // looppointer points to begin too
      000E6A ED 43r25r01      [20] 3014 	ld	(_PSGSFXLoopPoint), bc
                                   3015 ;libs\PSGlib.c:225: PSGSFXSkipFrames=0;           // reset the skip frames
                                   3016 ;libs\PSGlib.c:226: PSGSFXSubstringLen=0;         // reset the substring len
      000E6E 3E 00            [ 7] 3017 	ld	a,#0x00
      000E70 32r27r01         [13] 3018 	ld	(#_PSGSFXSkipFrames),a
      000E73 32r29r01         [13] 3019 	ld	(#_PSGSFXSubstringLen), a
                                   3020 ;libs\PSGlib.c:227: PSGChannel2SFX=(channels&SFX_CHANNEL2)?PSG_PLAYING:PSG_STOPPED;
      000E76 FD 21 04 00      [14] 3021 	ld	iy, #4
      000E7A FD 39            [15] 3022 	add	iy, sp
      000E7C FD 4E 00         [19] 3023 	ld	c, 0 (iy)
      000E7F CB 41            [ 8] 3024 	bit	0, c
      000E81 28 05            [12] 3025 	jr	Z, 00103$
      000E83 11 01 00         [10] 3026 	ld	de, #0x0001
      000E86 18 03            [12] 3027 	jr	00104$
      000E88                       3028 00103$:
      000E88 11 00 00         [10] 3029 	ld	de, #0x0000
      000E8B                       3030 00104$:
      000E8B 7B               [ 4] 3031 	ld	a, e
      000E8C 32r1Cr01         [13] 3032 	ld	(#_PSGChannel2SFX), a
                                   3033 ;libs\PSGlib.c:228: PSGChannel3SFX=(channels&SFX_CHANNEL3)?PSG_PLAYING:PSG_STOPPED;
      000E8F CB 49            [ 8] 3034 	bit	1, c
      000E91 28 05            [12] 3035 	jr	Z, 00105$
      000E93 01 01 00         [10] 3036 	ld	bc, #0x0001
      000E96 18 03            [12] 3037 	jr	00106$
      000E98                       3038 00105$:
      000E98 01 00 00         [10] 3039 	ld	bc, #0x0000
      000E9B                       3040 00106$:
      000E9B 79               [ 4] 3041 	ld	a, c
      000E9C 32r1Dr01         [13] 3042 	ld	(#_PSGChannel3SFX), a
                                   3043 ;libs\PSGlib.c:229: PSGSFXStatus=PSG_PLAYING;
      000E9F 3E 01            [ 7] 3044 	ld	a, #0x01
      000EA1 32r20r01         [13] 3045 	ld	(#_PSGSFXStatus), a
                                   3046 ;libs\PSGlib.c:230: }
      000EA4 C9               [10] 3047 	ret
                                   3048 ;libs\PSGlib.c:232: void PSGSFXCancelLoop (void) {
                                   3049 ;	---------------------------------
                                   3050 ; Function PSGSFXCancelLoop
                                   3051 ; ---------------------------------
      000EA5                       3052 _PSGSFXCancelLoop::
                                   3053 ;libs\PSGlib.c:236: PSGSFXLoopFlag=0;
      000EA5 3E 00            [ 7] 3054 	ld	a, #0x00
      000EA7 32r28r01         [13] 3055 	ld	(#_PSGSFXLoopFlag), a
                                   3056 ;libs\PSGlib.c:237: }
      000EAA C9               [10] 3057 	ret
                                   3058 ;libs\PSGlib.c:239: unsigned char PSGSFXGetStatus (void) {
                                   3059 ;	---------------------------------
                                   3060 ; Function PSGSFXGetStatus
                                   3061 ; ---------------------------------
      000EAB                       3062 _PSGSFXGetStatus::
                                   3063 ;libs\PSGlib.c:243: return(PSGSFXStatus);
      000EAB 3Ar20r01         [13] 3064 	ld	a, (#_PSGSFXStatus + 0)
      000EAE 6F               [ 4] 3065 	ld	l, a
                                   3066 ;libs\PSGlib.c:244: }
      000EAF C9               [10] 3067 	ret
                                   3068 ;libs\PSGlib.c:246: void PSGSFXPlayLoop (void *sfx, unsigned char channels) {
                                   3069 ;	---------------------------------
                                   3070 ; Function PSGSFXPlayLoop
                                   3071 ; ---------------------------------
      000EB0                       3072 _PSGSFXPlayLoop::
                                   3073 ;libs\PSGlib.c:251: PSGSFXPlay(sfx, channels);
      000EB0 FD 21 04 00      [14] 3074 	ld	iy, #4
      000EB4 FD 39            [15] 3075 	add	iy, sp
      000EB6 FD 7E 00         [19] 3076 	ld	a, 0 (iy)
      000EB9 F5               [11] 3077 	push	af
      000EBA 33               [ 6] 3078 	inc	sp
      000EBB FD 6E FE         [19] 3079 	ld	l, -2 (iy)
      000EBE FD 66 FF         [19] 3080 	ld	h, -1 (iy)
      000EC1 E5               [11] 3081 	push	hl
      000EC2 CDr53r0E         [17] 3082 	call	_PSGSFXPlay
      000EC5 F1               [10] 3083 	pop	af
      000EC6 33               [ 6] 3084 	inc	sp
                                   3085 ;libs\PSGlib.c:252: PSGSFXLoopFlag=1;
      000EC7 3E 01            [ 7] 3086 	ld	a, #0x01
      000EC9 32r28r01         [13] 3087 	ld	(#_PSGSFXLoopFlag), a
                                   3088 ;libs\PSGlib.c:253: }
      000ECC C9               [10] 3089 	ret
                                   3090 ;libs\PSGlib.c:255: void PSGFrame (void) {
                                   3091 ;	---------------------------------
                                   3092 ; Function PSGFrame
                                   3093 ; ---------------------------------
      000ECD                       3094 _PSGFrame::
                                   3095 ;libs\PSGlib.c:450: __endasm;
      000ECD 3Ar07r01         [13] 3096 	ld	a,(_PSGMusicStatus) ; check if we have got to play a tune
      000ED0 B7               [ 4] 3097 	or	a
      000ED1 C8               [11] 3098 	ret	z
      000ED2 3Ar0Er01         [13] 3099 	ld	a,(_PSGMusicSkipFrames) ; check if we have got to skip frames
      000ED5 B7               [ 4] 3100 	or	a
      000ED6 C2r61r0F         [10] 3101 	jp	nz,_skipFrame
      000ED9 2Ar0Ar01         [16] 3102 	ld	hl,(_PSGMusicPointer) ; read current address
      000EDC                       3103 	_intLoop:
      000EDC 46               [ 7] 3104 	ld	b,(hl) ; load PSG byte (in B)
      000EDD 23               [ 6] 3105 	inc	hl ; point to next byte
      000EDE 3Ar12r01         [13] 3106 	ld	a,(_PSGMusicSubstringLen) ; read substring len
      000EE1 B7               [ 4] 3107 	or	a
      000EE2 28 09            [12] 3108 	jr	z,_continue ; check if it is 0 (we are not in a substring)
      000EE4 3D               [ 4] 3109 	dec	a ; decrease len
      000EE5 32r12r01         [13] 3110 	ld	(_PSGMusicSubstringLen),a ; save len
      000EE8 20 03            [12] 3111 	jr	nz,_continue
      000EEA 2Ar13r01         [16] 3112 	ld	hl,(_PSGMusicSubstringRetAddr) ; substring is over, retrieve return address
      000EED                       3113 	_continue:
      000EED 78               [ 4] 3114 	ld	a,b ; copy PSG byte into A
      000EEE FE 80            [ 7] 3115 	cp	#0x80 ; is it a latch?
      000EF0 38 74            [12] 3116 	jr	c,_noLatch ; if < $80 then it is NOT a latch
      000EF2 32r10r01         [13] 3117 	ld	(_PSGMusicLastLatch),a ; it is a latch - save it in "LastLatch"
                                   3118 ;	we have got the latch PSG byte both in A and in B
                                   3119 ;	and we have to check if the value should pass to PSG or not
      000EF5 CB 67            [ 8] 3120 	bit	4,a ; test if it is a volume
      000EF7 20 38            [12] 3121 	jr	nz,_latch_Volume ; jump if volume data
      000EF9 CB 77            [ 8] 3122 	bit	6,a ; test if the latch it is for channels 0-1 or for 2-3
      000EFB CAr8Dr0F         [10] 3123 	jp	z,_send2PSG_A ; send data to PSG if it is for channels 0-1
                                   3124 ;	we have got the latch (tone, chn 2 or 3) PSG byte both in A and in B
                                   3125 ;	and we have to check if the value should be passed to PSG or not
      000EFE CB 6F            [ 8] 3126 	bit	5,a ; test if tone it is for channel 2 or 3
      000F00 28 23            [12] 3127 	jr	z,_ifchn2 ; jump if channel 2
      000F02 32r1Br01         [13] 3128 	ld	(_PSGChan3LowTone),a ; save tone LOW data
      000F05 3Ar1Dr01         [13] 3129 	ld	a,(_PSGChannel3SFX) ; channel 3 free?
      000F08 B7               [ 4] 3130 	or	a
      000F09 C2rDCr0E         [10] 3131 	jp	nz,_intLoop
      000F0C 3Ar1Br01         [13] 3132 	ld	a,(_PSGChan3LowTone)
      000F0F E6 03            [ 7] 3133 	and	#3 ; test if channel 3 is set to use the frequency of channel 2
      000F11 FE 03            [ 7] 3134 	cp	#3
      000F13 20 77            [12] 3135 	jr	nz,_send2PSG_B ; if channel 3 does not use frequency of channel 2 jump
      000F15 3Ar20r01         [13] 3136 	ld	a,(_PSGSFXStatus) ; test if an SFX is playing
      000F18 B7               [ 4] 3137 	or	a
      000F19 28 71            [12] 3138 	jr	z,_send2PSG_B ; if no SFX is playing jump
      000F1B 32r1Dr01         [13] 3139 	ld	(_PSGChannel3SFX),a ; otherwise mark channel 3 as occupied
      000F1E 3E FF            [ 7] 3140 	ld	a,#0x80|#0b01100000|#0b00010000|#0x0F ; and silence channel 3
      000F20 D3 7F            [11] 3141 	out	(#0x7f),a
      000F22 C3rDCr0E         [10] 3142 	jp	_intLoop
      000F25                       3143 	_ifchn2:
      000F25 32r19r01         [13] 3144 	ld	(_PSGChan2LowTone),a ; save tone LOW data
      000F28 3Ar1Cr01         [13] 3145 	ld	a,(_PSGChannel2SFX) ; channel 2 free?
      000F2B B7               [ 4] 3146 	or	a
      000F2C 28 5E            [12] 3147 	jr	z,_send2PSG_B
      000F2E C3rDCr0E         [10] 3148 	jp	_intLoop
      000F31                       3149 	_latch_Volume:
      000F31 CB 77            [ 8] 3150 	bit	6,a ; test if the latch it is for channels 0-1 or for 2-3
      000F33 20 10            [12] 3151 	jr	nz,_latch_Volume_23 ; volume is for channel 2 or 3
      000F35 CB 6F            [ 8] 3152 	bit	5,a ; test if volume it is for channel 0 or 1
      000F37 28 06            [12] 3153 	jr	z,_chn0 ; jump for channel 0
      000F39 32r16r01         [13] 3154 	ld	(_PSGChan1Volume),a ; save volume data
      000F3C C3r93r0F         [10] 3155 	jp	_sendVolume2PSG_A
      000F3F                       3156 	_chn0:
      000F3F 32r15r01         [13] 3157 	ld	(_PSGChan0Volume),a ; save volume data
      000F42 C3r93r0F         [10] 3158 	jp	_sendVolume2PSG_A
      000F45                       3159 	_latch_Volume_23:
      000F45 CB 6F            [ 8] 3160 	bit	5,a ; test if volume it is for channel 2 or 3
      000F47 28 0C            [12] 3161 	jr	z,_chn2 ; jump for channel 2
      000F49 32r18r01         [13] 3162 	ld	(_PSGChan3Volume),a ; save volume data
      000F4C 3Ar1Dr01         [13] 3163 	ld	a,(_PSGChannel3SFX) ; channel 3 free?
      000F4F B7               [ 4] 3164 	or	a
      000F50 28 40            [12] 3165 	jr	z,_sendVolume2PSG_B
      000F52 C3rDCr0E         [10] 3166 	jp	_intLoop
      000F55                       3167 	_chn2:
      000F55 32r17r01         [13] 3168 	ld	(_PSGChan2Volume),a ; save volume data
      000F58 3Ar1Cr01         [13] 3169 	ld	a,(_PSGChannel2SFX) ; channel 2 free?
      000F5B B7               [ 4] 3170 	or	a
      000F5C 28 34            [12] 3171 	jr	z,_sendVolume2PSG_B
      000F5E C3rDCr0E         [10] 3172 	jp	_intLoop
      000F61                       3173 	_skipFrame:
      000F61 3D               [ 4] 3174 	dec	a
      000F62 32r0Er01         [13] 3175 	ld	(_PSGMusicSkipFrames),a
      000F65 C9               [10] 3176 	ret
      000F66                       3177 	_noLatch:
      000F66 FE 40            [ 7] 3178 	cp	#0x40
      000F68 38 06            [12] 3179 	jr	c,_command ; if < $40 then it is a command
                                   3180 ;	it is a data
      000F6A 3Ar10r01         [13] 3181 	ld	a,(_PSGMusicLastLatch) ; retrieve last latch
      000F6D C3rABr0F         [10] 3182 	jp	_output_NoLatch
      000F70                       3183 	_command:
      000F70 FE 38            [ 7] 3184 	cp	#0x38
      000F72 28 07            [12] 3185 	jr	z,_done ; no additional frames
      000F74 38 09            [12] 3186 	jr	c,_otherCommands ; other commands?
      000F76 E6 07            [ 7] 3187 	and	#0x07 ; take only the last 3 bits for skip frames
      000F78 32r0Er01         [13] 3188 	ld	(_PSGMusicSkipFrames),a ; we got additional frames
      000F7B                       3189 	_done:
      000F7B 22r0Ar01         [16] 3190 	ld	(_PSGMusicPointer),hl ; save current address
      000F7E C9               [10] 3191 	ret	; frame done
      000F7F                       3192 	_otherCommands:
      000F7F FE 08            [ 7] 3193 	cp	#0x08
      000F81 30 42            [12] 3194 	jr	nc,_substring
      000F83 FE 00            [ 7] 3195 	cp	#0x00
      000F85 28 31            [12] 3196 	jr	z,_musicLoop
      000F87 FE 01            [ 7] 3197 	cp	#0x01
      000F89 28 27            [12] 3198 	jr	z,_setLoopPoint
                                   3199 ;	***************************************************************************
                                   3200 ;	we should never get here!
                                   3201 ;	if we do, it means the PSG file is probably corrupted, so we just RET
                                   3202 ;	***************************************************************************
      000F8B C9               [10] 3203 	ret
      000F8C                       3204 	_send2PSG_B:
      000F8C 78               [ 4] 3205 	ld	a,b
      000F8D                       3206 	_send2PSG_A:
      000F8D D3 7F            [11] 3207 	out	(#0x7f),a ; output the byte
      000F8F C3rDCr0E         [10] 3208 	jp	_intLoop
      000F92                       3209 	_sendVolume2PSG_B:
      000F92 78               [ 4] 3210 	ld	a,b
      000F93                       3211 	_sendVolume2PSG_A:
      000F93 4F               [ 4] 3212 	ld	c,a ; save the PSG command byte
      000F94 E6 0F            [ 7] 3213 	and	#0x0F ; keep lower nibble
      000F96 47               [ 4] 3214 	ld	b,a ; save value
      000F97 3Ar11r01         [13] 3215 	ld	a,(_PSGMusicVolumeAttenuation) ; load volume attenuation
      000F9A 80               [ 4] 3216 	add	a,b ; add value
      000F9B FE 0F            [ 7] 3217 	cp	#0x0F ; check overflow
      000F9D 38 02            [12] 3218 	jr	c,_no_overflow ; if it is <=15 then ok
      000F9F 3E 0F            [ 7] 3219 	ld	a,#0x0F ; else, reset to 15
      000FA1                       3220 	_no_overflow:
      000FA1 47               [ 4] 3221 	ld	b,a ; save new attenuated volume value
      000FA2 79               [ 4] 3222 	ld	a,c ; retrieve PSG command
      000FA3 E6 F0            [ 7] 3223 	and	#0xF0 ; keep upper nibble
      000FA5 B0               [ 4] 3224 	or	b ; set attenuated volume
      000FA6 D3 7F            [11] 3225 	out	(#0x7f),a ; output the byte
      000FA8 C3rDCr0E         [10] 3226 	jp	_intLoop
      000FAB                       3227 	_output_NoLatch:
                                   3228 ;	we got the last latch in A and the PSG data in B
                                   3229 ;	and we have to check if the value should pass to PSG or not
                                   3230 ;	note that non-latch commands can be only contain frequencies (no volumes)
                                   3231 ;	for channels 0,1,2 only (no noise)
      000FAB CB 77            [ 8] 3232 	bit	6,a ; test if the latch it is for channels 0-1 or for chn 2
      000FAD 20 29            [12] 3233 	jr	nz,_high_part_Tone ; it is tone data for channel 2
      000FAF C3r8Cr0F         [10] 3234 	jp	_send2PSG_B ; otherwise, it is for chn 0 or 1 so we have done!
      000FB2                       3235 	_setLoopPoint:
      000FB2 22r0Cr01         [16] 3236 	ld	(_PSGMusicLoopPoint),hl
      000FB5 C3rDCr0E         [10] 3237 	jp	_intLoop
      000FB8                       3238 	_musicLoop:
      000FB8 3Ar0Fr01         [13] 3239 	ld	a,(_PSGLoopFlag) ; looping requested?
      000FBB B7               [ 4] 3240 	or	a
      000FBC CAr37r0A         [10] 3241 	jp	z,_PSGStop ; No:stop it! (tail call optimization)
      000FBF 2Ar0Cr01         [16] 3242 	ld	hl,(_PSGMusicLoopPoint)
      000FC2 C3rDCr0E         [10] 3243 	jp	_intLoop
      000FC5                       3244 	_substring:
      000FC5 D6 04            [ 7] 3245 	sub	#0x08 -4 ; len is value - $08 + 4
      000FC7 32r12r01         [13] 3246 	ld	(_PSGMusicSubstringLen),a ; save len
      000FCA 4E               [ 7] 3247 	ld	c,(hl) ; load substring address (offset)
      000FCB 23               [ 6] 3248 	inc	hl
      000FCC 46               [ 7] 3249 	ld	b,(hl)
      000FCD 23               [ 6] 3250 	inc	hl
      000FCE 22r13r01         [16] 3251 	ld	(_PSGMusicSubstringRetAddr),hl ; save return address
      000FD1 2Ar08r01         [16] 3252 	ld	hl,(_PSGMusicStart)
      000FD4 09               [11] 3253 	add	hl,bc ; make substring current
      000FD5 C3rDCr0E         [10] 3254 	jp	_intLoop
      000FD8                       3255 	_high_part_Tone:
                                   3256 ;	we got the last latch in A and the PSG data in B
                                   3257 ;	and we have to check if the value should pass to PSG or not
                                   3258 ;	PSG data can only be for channel 2, here
      000FD8 78               [ 4] 3259 	ld	a,b ; move PSG data in A
      000FD9 32r1Ar01         [13] 3260 	ld	(_PSGChan2HighTone),a ; save channel 2 tone HIGH data
      000FDC 3Ar1Cr01         [13] 3261 	ld	a,(_PSGChannel2SFX) ; channel 2 free?
      000FDF B7               [ 4] 3262 	or	a
      000FE0 28 AA            [12] 3263 	jr	z,_send2PSG_B
      000FE2 C3rDCr0E         [10] 3264 	jp	_intLoop
                                   3265 ;libs\PSGlib.c:451: }
      000FE5 C9               [10] 3266 	ret
                                   3267 ;libs\PSGlib.c:453: void PSGSFXFrame (void) {
                                   3268 ;	---------------------------------
                                   3269 ; Function PSGSFXFrame
                                   3270 ; ---------------------------------
      000FE6                       3271 _PSGSFXFrame::
                                   3272 ;libs\PSGlib.c:550: __endasm;
      000FE6 3Ar20r01         [13] 3273 	ld	a,(_PSGSFXStatus) ; check if we have got to play SFX
      000FE9 B7               [ 4] 3274 	or	a
      000FEA C8               [11] 3275 	ret	z
      000FEB 3Ar27r01         [13] 3276 	ld	a,(_PSGSFXSkipFrames) ; check if we have got to skip frames
      000FEE B7               [ 4] 3277 	or	a
      000FEF C2r21r10         [10] 3278 	jp	nz,_skipSFXFrame
      000FF2 2Ar23r01         [16] 3279 	ld	hl,(_PSGSFXPointer) ; read current SFX address
      000FF5                       3280 	_intSFXLoop:
      000FF5 46               [ 7] 3281 	ld	b,(hl) ; load a byte in B, temporary
      000FF6 23               [ 6] 3282 	inc	hl ; point to next byte
      000FF7 3Ar29r01         [13] 3283 	ld	a,(_PSGSFXSubstringLen) ; read substring len
      000FFA B7               [ 4] 3284 	or	a ; check if it is 0 (we are not in a substring)
      000FFB 28 09            [12] 3285 	jr	z,_SFXcontinue
      000FFD 3D               [ 4] 3286 	dec	a ; decrease len
      000FFE 32r29r01         [13] 3287 	ld	(_PSGSFXSubstringLen),a ; save len
      001001 20 03            [12] 3288 	jr	nz,_SFXcontinue
      001003 2Ar2Ar01         [16] 3289 	ld	hl,(_PSGSFXSubstringRetAddr) ; substring over, retrieve return address
      001006                       3290 	_SFXcontinue:
      001006 78               [ 4] 3291 	ld	a,b ; restore byte
      001007 FE 40            [ 7] 3292 	cp	#0x40
      001009 DAr26r10         [10] 3293 	jp	c,_SFXcommand ; if less than $40 then it is a command
      00100C CB 67            [ 8] 3294 	bit	4,a ; check if it is a volume byte
      00100E 28 0C            [12] 3295 	jr	z,_SFXoutbyte ; if not, output it
      001010 CB 6F            [ 8] 3296 	bit	5,a ; check if it is volume for channel 2 or channel 3
      001012 20 05            [12] 3297 	jr	nz,_SFXvolumechn3
      001014 32r1Er01         [13] 3298 	ld	(_PSGSFXChan2Volume),a
      001017 18 03            [12] 3299 	jr	_SFXoutbyte
      001019                       3300 	_SFXvolumechn3:
      001019 32r1Fr01         [13] 3301 	ld	(_PSGSFXChan3Volume),a
      00101C                       3302 	_SFXoutbyte:
      00101C D3 7F            [11] 3303 	out	(#0x7f),a ; output the byte
      00101E C3rF5r0F         [10] 3304 	jp	_intSFXLoop
      001021                       3305 	_skipSFXFrame:
      001021 3D               [ 4] 3306 	dec	a
      001022 32r27r01         [13] 3307 	ld	(_PSGSFXSkipFrames),a
      001025 C9               [10] 3308 	ret
      001026                       3309 	_SFXcommand:
      001026 FE 38            [ 7] 3310 	cp	#0x38
      001028 28 07            [12] 3311 	jr	z,_SFXdone ; no additional frames
      00102A 38 09            [12] 3312 	jr	c,_SFXotherCommands ; other commands?
      00102C E6 07            [ 7] 3313 	and	#0x07 ; take only the last 3 bits for skip frames
      00102E 32r27r01         [13] 3314 	ld	(_PSGSFXSkipFrames),a ; we got additional frames to skip
      001031                       3315 	_SFXdone:
      001031 22r23r01         [16] 3316 	ld	(_PSGSFXPointer),hl ; save current address
      001034 C9               [10] 3317 	ret	; frame done
      001035                       3318 	_SFXotherCommands:
      001035 FE 08            [ 7] 3319 	cp	#0x08
      001037 30 1F            [12] 3320 	jr	nc,_SFXsubstring
      001039 FE 00            [ 7] 3321 	cp	#0x00
      00103B 28 0B            [12] 3322 	jr	z,_sfxLoop
      00103D FE 01            [ 7] 3323 	cp	#0x01
      00103F 28 01            [12] 3324 	jr	z,_SFXsetLoopPoint
                                   3325 ;	***************************************************************************
                                   3326 ;	we should never get here!
                                   3327 ;	if we do, it means the PSG SFX file is probably corrupted, so we just RET
                                   3328 ;	***************************************************************************
      001041 C9               [10] 3329 	ret
      001042                       3330 	_SFXsetLoopPoint:
      001042 22r25r01         [16] 3331 	ld	(_PSGSFXLoopPoint),hl
      001045 C3rF5r0F         [10] 3332 	jp	_intSFXLoop
      001048                       3333 	_sfxLoop:
      001048 3Ar28r01         [13] 3334 	ld	a,(_PSGSFXLoopFlag) ; is it a looping SFX?
      00104B B7               [ 4] 3335 	or	a
      00104C CAr8Br0D         [10] 3336 	jp	z,_PSGSFXStop ; No:stop it! (tail call optimization)
      00104F 2Ar25r01         [16] 3337 	ld	hl,(_PSGSFXLoopPoint)
      001052 22r23r01         [16] 3338 	ld	(_PSGSFXPointer),hl
      001055 C3rF5r0F         [10] 3339 	jp	_intSFXLoop
      001058                       3340 	_SFXsubstring:
      001058 D6 04            [ 7] 3341 	sub	#0x08 -4 ; len is value - $08 + 4
      00105A 32r29r01         [13] 3342 	ld	(_PSGSFXSubstringLen),a ; save len
      00105D 4E               [ 7] 3343 	ld	c,(hl) ; load substring address (offset)
      00105E 23               [ 6] 3344 	inc	hl
      00105F 46               [ 7] 3345 	ld	b,(hl)
      001060 23               [ 6] 3346 	inc	hl
      001061 22r2Ar01         [16] 3347 	ld	(_PSGSFXSubstringRetAddr),hl ; save return address
      001064 2Ar21r01         [16] 3348 	ld	hl,(_PSGSFXStart)
      001067 09               [11] 3349 	add	hl,bc ; make substring current
      001068 C3rF5r0F         [10] 3350 	jp	_intSFXLoop
                                   3351 ;libs\PSGlib.c:551: }
      00106B C9               [10] 3352 	ret
                                   3353 ;main.c:68: void main(void) 
                                   3354 ;	---------------------------------
                                   3355 ; Function main
                                   3356 ; ---------------------------------
      00106C                       3357 _main::
                                   3358 ;main.c:73: SMS_VRAMmemset(0x4000, 0x00, 0x4000);
      00106C 21 00 40         [10] 3359 	ld	hl, #0x4000
      00106F E5               [11] 3360 	push	hl
      001070 AF               [ 4] 3361 	xor	a, a
      001071 F5               [11] 3362 	push	af
      001072 33               [ 6] 3363 	inc	sp
      001073 2E 00            [ 7] 3364 	ld	l, #0x00
      001075 E5               [11] 3365 	push	hl
      001076 CDr00r00         [17] 3366 	call	_SMS_VRAMmemset
      001079 F1               [10] 3367 	pop	af
                                   3368 ;main.c:74: SMS_VRAMmemset(0xC000, 0x00, 0x0020);
      00107A 33               [ 6] 3369 	inc	sp
      00107B 21 20 00         [10] 3370 	ld	hl,#0x0020
      00107E E3               [19] 3371 	ex	(sp),hl
      00107F AF               [ 4] 3372 	xor	a, a
      001080 F5               [11] 3373 	push	af
      001081 33               [ 6] 3374 	inc	sp
      001082 21 00 C0         [10] 3375 	ld	hl, #0xc000
      001085 E5               [11] 3376 	push	hl
      001086 CDr00r00         [17] 3377 	call	_SMS_VRAMmemset
      001089 F1               [10] 3378 	pop	af
      00108A F1               [10] 3379 	pop	af
      00108B 33               [ 6] 3380 	inc	sp
                                   3381 ;main.c:75: SMS_loadTiles(&tiles_bin, 0, tiles_bin_size);
      00108C 21 00 0B         [10] 3382 	ld	hl, #0x0b00
      00108F E5               [11] 3383 	push	hl
      001090 65               [ 4] 3384 	ld	h, l
      001091 E5               [11] 3385 	push	hl
      001092 21r00r00         [10] 3386 	ld	hl, #_tiles_bin
      001095 E5               [11] 3387 	push	hl
      001096 CDr00r00         [17] 3388 	call	_SMS_loadTiles
      001099 21 06 00         [10] 3389 	ld	hl, #6
      00109C 39               [11] 3390 	add	hl, sp
      00109D F9               [ 6] 3391 	ld	sp, hl
                                   3392 ;main.c:76: SMS_loadBGPalette(&palette_bin);
      00109E 21r00r00         [10] 3393 	ld	hl, #_palette_bin
      0010A1 CDr00r00         [17] 3394 	call	_SMS_loadBGPalette
                                   3395 ;main.c:77: SMS_loadTiles(&sprite_tiles_bin, 256, sprite_tiles_bin_size);
      0010A4 21 00 18         [10] 3396 	ld	hl, #0x1800
      0010A7 E5               [11] 3397 	push	hl
      0010A8 26 01            [ 7] 3398 	ld	h, #0x01
      0010AA E5               [11] 3399 	push	hl
      0010AB 21r00r00         [10] 3400 	ld	hl, #_sprite_tiles_bin
      0010AE E5               [11] 3401 	push	hl
      0010AF CDr00r00         [17] 3402 	call	_SMS_loadTiles
      0010B2 21 06 00         [10] 3403 	ld	hl, #6
      0010B5 39               [11] 3404 	add	hl, sp
      0010B6 F9               [ 6] 3405 	ld	sp, hl
                                   3406 ;main.c:78: SMS_loadSpritePalette(&sprite_palette_bin);
      0010B7 21r00r00         [10] 3407 	ld	hl, #_sprite_palette_bin
      0010BA CDr00r00         [17] 3408 	call	_SMS_loadSpritePalette
                                   3409 ;main.c:85: for (int i = 0; i < scrolltable_bin_size; i++) scrolltable[i] = *(scrolltable_bin + i);
      0010BD                       3410 00122$:
      0010BD 01 00 00         [10] 3411 	ld	bc, #0x0000
      0010C0                       3412 00113$:
      0010C0 79               [ 4] 3413 	ld	a, c
      0010C1 D6 0D            [ 7] 3414 	sub	a, #0x0d
      0010C3 78               [ 4] 3415 	ld	a, b
      0010C4 17               [ 4] 3416 	rla
      0010C5 3F               [ 4] 3417 	ccf
      0010C6 1F               [ 4] 3418 	rra
      0010C7 DE 90            [ 7] 3419 	sbc	a, #0x90
      0010C9 30 0E            [12] 3420 	jr	NC, 00101$
      0010CB 21r30r01         [10] 3421 	ld	hl, #_scrolltable
      0010CE 09               [11] 3422 	add	hl, bc
      0010CF EB               [ 4] 3423 	ex	de, hl
      0010D0 21r00r00         [10] 3424 	ld	hl, #_scrolltable_bin
      0010D3 09               [11] 3425 	add	hl, bc
      0010D4 7E               [ 7] 3426 	ld	a, (hl)
      0010D5 12               [ 7] 3427 	ld	(de), a
      0010D6 03               [ 6] 3428 	inc	bc
      0010D7 18 E7            [12] 3429 	jr	00113$
      0010D9                       3430 00101$:
                                   3431 ;main.c:88: GSL_initializeMap(&scrolltable, &metatiles_bin);
      0010D9 21r00r00         [10] 3432 	ld	hl, #_metatiles_bin
      0010DC E5               [11] 3433 	push	hl
      0010DD 21r30r01         [10] 3434 	ld	hl, #_scrolltable
      0010E0 E5               [11] 3435 	push	hl
      0010E1 CDrFDr02         [17] 3436 	call	_GSL_initializeMap
      0010E4 F1               [10] 3437 	pop	af
      0010E5 F1               [10] 3438 	pop	af
                                   3439 ;main.c:89: GSL_positionWindow(768,832);
      0010E6 21 40 03         [10] 3440 	ld	hl, #0x0340
      0010E9 E5               [11] 3441 	push	hl
      0010EA 2E 00            [ 7] 3442 	ld	l, #0x00
      0010EC E5               [11] 3443 	push	hl
      0010ED CDr00r00         [17] 3444 	call	_GSL_positionWindow
      0010F0 F1               [10] 3445 	pop	af
      0010F1 F1               [10] 3446 	pop	af
                                   3447 ;main.c:90: GSL_refreshVDP();
      0010F2 CDr96r02         [17] 3448 	call	_GSL_refreshVDP
                                   3449 ;main.c:92: SMS_VDPturnOnFeature(VDPFEATURE_HIDEFIRSTCOL);
      0010F5 21 20 00         [10] 3450 	ld	hl, #0x0020
      0010F8 CDr00r00         [17] 3451 	call	_SMS_VDPturnOnFeature
                                   3452 ;main.c:93: SMS_displayOn();
      0010FB 21 40 01         [10] 3453 	ld	hl, #0x0140
      0010FE CDr00r00         [17] 3454 	call	_SMS_VDPturnOnFeature
                                   3455 ;main.c:95: PSGPlay(&village_psg);
      001101 21r00r00         [10] 3456 	ld	hl, #_village_psg
      001104 E5               [11] 3457 	push	hl
      001105 CDr9Ar0B         [17] 3458 	call	_PSGPlay
      001108 F1               [10] 3459 	pop	af
                                   3460 ;main.c:97: playerX = 904;
      001109 21 88 03         [10] 3461 	ld	hl, #0x0388
      00110C 22r00r00         [16] 3462 	ld	(_playerX), hl
                                   3463 ;main.c:98: playerY = 928;
      00110F 2E A0            [ 7] 3464 	ld	l, #0xa0
      001111 22r02r00         [16] 3465 	ld	(_playerY), hl
                                   3466 ;main.c:99: playerSpriteX = 136;
      001114 21r04r00         [10] 3467 	ld	hl, #_playerSpriteX
      001117 36 88            [10] 3468 	ld	(hl), #0x88
                                   3469 ;main.c:100: playerSpriteY = 96;
      001119 21r05r00         [10] 3470 	ld	hl, #_playerSpriteY
      00111C 36 60            [10] 3471 	ld	(hl), #0x60
                                   3472 ;main.c:101: actionCount = 0;
      00111E 21r07r00         [10] 3473 	ld	hl, #_actionCount
      001121 36 00            [10] 3474 	ld	(hl), #0x00
      001123                       3475 00115$:
                                   3476 ;main.c:106: playerMetatile = *(GSL_metatileLookup(playerX, playerY)); 
      001123 2Ar02r00         [16] 3477 	ld	hl, (_playerY)
      001126 E5               [11] 3478 	push	hl
      001127 2Ar00r00         [16] 3479 	ld	hl, (_playerX)
      00112A E5               [11] 3480 	push	hl
      00112B CDr82r02         [17] 3481 	call	_GSL_metatileLookup
      00112E F1               [10] 3482 	pop	af
      00112F F1               [10] 3483 	pop	af
      001130 7E               [ 7] 3484 	ld	a, (hl)
                                   3485 ;main.c:107: if (playerMetatile == METATILE_DUNGEON_ENTRANCE) break;
      001131 D6 20            [ 7] 3486 	sub	a, #0x20
      001133 CArB7r11         [10] 3487 	jp	Z,00110$
                                   3488 ;main.c:109: SMS_initSprites(); 
      001136 CDr00r00         [17] 3489 	call	_SMS_initSprites
                                   3490 ;main.c:110: ks = SMS_getKeysStatus(); 
      001139 CDr00r00         [17] 3491 	call	_SMS_getKeysStatus
                                   3492 ;main.c:111: if (!(ks & PORT_A_KEY_2)) actionButtonWatch = 0;
      00113C CB 6D            [ 8] 3493 	bit	5, l
      00113E 20 05            [12] 3494 	jr	NZ, 00105$
      001140 21r09r00         [10] 3495 	ld	hl, #_actionButtonWatch
      001143 36 00            [10] 3496 	ld	(hl), #0x00
      001145                       3497 00105$:
                                   3498 ;main.c:116: if (actionCount == 0) processUserInput();
      001145 3Ar07r00         [13] 3499 	ld	a,(#_actionCount + 0)
      001148 B7               [ 4] 3500 	or	a, a
      001149 20 03            [12] 3501 	jr	NZ, 00107$
      00114B CDr58r13         [17] 3502 	call	_processUserInput
      00114E                       3503 00107$:
                                   3504 ;main.c:117: if (actionCount != 0) actionCount--;
      00114E FD 21r07r00      [14] 3505 	ld	iy, #_actionCount
      001152 FD 7E 00         [19] 3506 	ld	a, 0 (iy)
      001155 B7               [ 4] 3507 	or	a, a
      001156 28 03            [12] 3508 	jr	Z, 00109$
      001158 FD 35 00         [23] 3509 	dec	0 (iy)
      00115B                       3510 00109$:
                                   3511 ;main.c:119: playerX += playerXOffset;
      00115B 21r10r00         [10] 3512 	ld	hl, #_playerXOffset
      00115E D5               [11] 3513 	push	de
      00115F 11r00r00         [10] 3514 	ld	de, #_playerX
      001162 D5               [11] 3515 	push	de
      001163 D1               [10] 3516 	pop	de
      001164 1A               [ 7] 3517 	ld	a, (de)
      001165 86               [ 7] 3518 	add	a, (hl)
      001166 12               [ 7] 3519 	ld	(de), a
      001167 13               [ 6] 3520 	inc	de
      001168 1A               [ 7] 3521 	ld	a, (de)
      001169 23               [ 6] 3522 	inc	hl
      00116A 8E               [ 7] 3523 	adc	a, (hl)
      00116B 12               [ 7] 3524 	ld	(de), a
      00116C D1               [10] 3525 	pop	de
                                   3526 ;main.c:120: playerY += playerYOffset;
      00116D 21r12r00         [10] 3527 	ld	hl, #_playerYOffset
      001170 D5               [11] 3528 	push	de
      001171 11r02r00         [10] 3529 	ld	de, #_playerY
      001174 D5               [11] 3530 	push	de
      001175 D1               [10] 3531 	pop	de
      001176 1A               [ 7] 3532 	ld	a, (de)
      001177 86               [ 7] 3533 	add	a, (hl)
      001178 12               [ 7] 3534 	ld	(de), a
      001179 13               [ 6] 3535 	inc	de
      00117A 1A               [ 7] 3536 	ld	a, (de)
      00117B 23               [ 6] 3537 	inc	hl
      00117C 8E               [ 7] 3538 	adc	a, (hl)
      00117D 12               [ 7] 3539 	ld	(de), a
      00117E D1               [10] 3540 	pop	de
                                   3541 ;main.c:121: playerSpriteX += spriteXOffset;
      00117F 21r04r00         [10] 3542 	ld	hl, #_playerSpriteX
      001182 7E               [ 7] 3543 	ld	a, (hl)
      001183 FD 21r0Er00      [14] 3544 	ld	iy, #_spriteXOffset
      001187 FD 86 00         [19] 3545 	add	a, 0 (iy)
      00118A 77               [ 7] 3546 	ld	(hl), a
                                   3547 ;main.c:122: playerSpriteY += spriteYOffset;
      00118B 21r05r00         [10] 3548 	ld	hl, #_playerSpriteY
      00118E 7E               [ 7] 3549 	ld	a, (hl)
      00118F FD 21r0Fr00      [14] 3550 	ld	iy, #_spriteYOffset
      001193 FD 86 00         [19] 3551 	add	a, 0 (iy)
      001196 77               [ 7] 3552 	ld	(hl), a
                                   3553 ;main.c:123: GSL_scroll(scrollXOffset,scrollYOffset); // << GSL_scroll with offsets to scroll map.
      001197 3Ar0Dr00         [13] 3554 	ld	a,(#_scrollYOffset + 0)
      00119A F5               [11] 3555 	push	af
      00119B 33               [ 6] 3556 	inc	sp
      00119C 3Ar0Cr00         [13] 3557 	ld	a,(#_scrollXOffset + 0)
      00119F F5               [11] 3558 	push	af
      0011A0 33               [ 6] 3559 	inc	sp
      0011A1 CDr9Er02         [17] 3560 	call	_GSL_scroll
      0011A4 F1               [10] 3561 	pop	af
                                   3562 ;main.c:125: processSpritesActiveDisplay();
      0011A5 CDrC0r11         [17] 3563 	call	_processSpritesActiveDisplay
                                   3564 ;main.c:127: SMS_waitForVBlank(); 
      0011A8 CDr00r00         [17] 3565 	call	_SMS_waitForVBlank
                                   3566 ;main.c:128: GSL_VBlank();  // <<< Call GSL_VBlank to process any pending scroll / metatile updates.
      0011AB CDrB2r02         [17] 3567 	call	_GSL_VBlank
                                   3568 ;main.c:129: processSpritesVBlank();
      0011AE CDrE7r12         [17] 3569 	call	_processSpritesVBlank
                                   3570 ;main.c:130: PSGFrame();
      0011B1 CDrCDr0E         [17] 3571 	call	_PSGFrame
      0011B4 C3r23r11         [10] 3572 	jp	00115$
      0011B7                       3573 00110$:
                                   3574 ;main.c:133: SMS_displayOff();
      0011B7 21 40 01         [10] 3575 	ld	hl, #0x0140
      0011BA CDr00r00         [17] 3576 	call	_SMS_VDPturnOffFeature
                                   3577 ;main.c:135: }
      0011BD C3rBDr10         [10] 3578 	jp	00122$
                                   3579 ;main.c:139: void processSpritesActiveDisplay()
                                   3580 ;	---------------------------------
                                   3581 ; Function processSpritesActiveDisplay
                                   3582 ; ---------------------------------
      0011C0                       3583 _processSpritesActiveDisplay::
                                   3584 ;main.c:142: SMS_addSprite(playerSpriteX + 0xF8, playerSpriteY + 0xF8, 0);
      0011C0 3Ar05r00         [13] 3585 	ld	a,(#_playerSpriteY + 0)
      0011C3 C6 F8            [ 7] 3586 	add	a, #0xf8
      0011C5 47               [ 4] 3587 	ld	b, a
      0011C6 3Ar04r00         [13] 3588 	ld	a,(#_playerSpriteX + 0)
      0011C9 C6 F8            [ 7] 3589 	add	a, #0xf8
      0011CB 26 00            [ 7] 3590 	ld	h, #0x00
      0011CD 68               [ 4] 3591 	ld	l, b
      0011CE E5               [11] 3592 	push	hl
      0011CF F5               [11] 3593 	push	af
      0011D0 33               [ 6] 3594 	inc	sp
      0011D1 CDr00r00         [17] 3595 	call	_SMS_addSprite
      0011D4 F1               [10] 3596 	pop	af
      0011D5 33               [ 6] 3597 	inc	sp
                                   3598 ;main.c:143: SMS_addSprite(playerSpriteX + 0x00, playerSpriteY + 0xF8, 1);
      0011D6 3Ar05r00         [13] 3599 	ld	a,(#_playerSpriteY + 0)
      0011D9 C6 F8            [ 7] 3600 	add	a, #0xf8
      0011DB 26 01            [ 7] 3601 	ld	h, #0x01
      0011DD E5               [11] 3602 	push	hl
      0011DE 33               [ 6] 3603 	inc	sp
      0011DF F5               [11] 3604 	push	af
      0011E0 33               [ 6] 3605 	inc	sp
      0011E1 3Ar04r00         [13] 3606 	ld	a,(#_playerSpriteX + 0)
      0011E4 F5               [11] 3607 	push	af
      0011E5 33               [ 6] 3608 	inc	sp
      0011E6 CDr00r00         [17] 3609 	call	_SMS_addSprite
      0011E9 F1               [10] 3610 	pop	af
      0011EA 33               [ 6] 3611 	inc	sp
                                   3612 ;main.c:144: SMS_addSprite(playerSpriteX + 0xF8, playerSpriteY + 0x00, 2);
      0011EB 3Ar04r00         [13] 3613 	ld	a,(#_playerSpriteX + 0)
      0011EE C6 F8            [ 7] 3614 	add	a, #0xf8
      0011F0 26 02            [ 7] 3615 	ld	h, #0x02
      0011F2 E5               [11] 3616 	push	hl
      0011F3 33               [ 6] 3617 	inc	sp
      0011F4 FD 21r05r00      [14] 3618 	ld	iy, #_playerSpriteY
      0011F8 FD 66 00         [19] 3619 	ld	h, 0 (iy)
      0011FB E5               [11] 3620 	push	hl
      0011FC 33               [ 6] 3621 	inc	sp
      0011FD F5               [11] 3622 	push	af
      0011FE 33               [ 6] 3623 	inc	sp
      0011FF CDr00r00         [17] 3624 	call	_SMS_addSprite
      001202 F1               [10] 3625 	pop	af
      001203 33               [ 6] 3626 	inc	sp
                                   3627 ;main.c:145: SMS_addSprite(playerSpriteX + 0x00, playerSpriteY + 0x00, 3);
      001204 3E 03            [ 7] 3628 	ld	a, #0x03
      001206 F5               [11] 3629 	push	af
      001207 33               [ 6] 3630 	inc	sp
      001208 3Ar05r00         [13] 3631 	ld	a,(#_playerSpriteY + 0)
      00120B F5               [11] 3632 	push	af
      00120C 33               [ 6] 3633 	inc	sp
      00120D 3Ar04r00         [13] 3634 	ld	a,(#_playerSpriteX + 0)
      001210 F5               [11] 3635 	push	af
      001211 33               [ 6] 3636 	inc	sp
      001212 CDr00r00         [17] 3637 	call	_SMS_addSprite
      001215 F1               [10] 3638 	pop	af
      001216 33               [ 6] 3639 	inc	sp
                                   3640 ;main.c:149: if (action == ACTION_ATTACK)
      001217 3Ar08r00         [13] 3641 	ld	a,(#_action + 0)
      00121A 3D               [ 4] 3642 	dec	a
      00121B C0               [11] 3643 	ret	NZ
                                   3644 ;main.c:152: if (actionCount == 5) checkForAttackInteraction();
      00121C 3Ar07r00         [13] 3645 	ld	a,(#_actionCount + 0)
      00121F D6 05            [ 7] 3646 	sub	a, #0x05
      001221 20 03            [12] 3647 	jr	NZ, 00102$
      001223 CDr80r18         [17] 3648 	call	_checkForAttackInteraction
      001226                       3649 00102$:
                                   3650 ;main.c:154: currentAttackSprites = attackSprites + ((actionCount & 14) << 3);
      001226 3Ar07r00         [13] 3651 	ld	a,(#_actionCount + 0)
      001229 E6 0E            [ 7] 3652 	and	a, #0x0e
      00122B 26 00            [ 7] 3653 	ld	h, #0x00
      00122D 6F               [ 4] 3654 	ld	l, a
      00122E 29               [11] 3655 	add	hl, hl
      00122F 29               [11] 3656 	add	hl, hl
      001230 29               [11] 3657 	add	hl, hl
      001231 EB               [ 4] 3658 	ex	de,hl
      001232 21r2Er01         [10] 3659 	ld	hl, #_currentAttackSprites
      001235 FD 21r2Cr01      [14] 3660 	ld	iy, #_attackSprites
      001239 FD 7E 00         [19] 3661 	ld	a, 0 (iy)
      00123C 83               [ 4] 3662 	add	a, e
      00123D 77               [ 7] 3663 	ld	(hl), a
      00123E FD 7E 01         [19] 3664 	ld	a, 1 (iy)
      001241 8A               [ 4] 3665 	adc	a, d
      001242 23               [ 6] 3666 	inc	hl
      001243 77               [ 7] 3667 	ld	(hl), a
                                   3668 ;main.c:155: SMS_addSprite(playerSpriteX + *(currentAttackSprites + 0), playerSpriteY + *(currentAttackSprites + 1), *(currentAttackSprites + 2));
      001244 2Ar2Er01         [16] 3669 	ld	hl, (_currentAttackSprites)
      001247 23               [ 6] 3670 	inc	hl
      001248 23               [ 6] 3671 	inc	hl
      001249 4E               [ 7] 3672 	ld	c, (hl)
      00124A 2Ar2Er01         [16] 3673 	ld	hl, (_currentAttackSprites)
      00124D 23               [ 6] 3674 	inc	hl
      00124E 7E               [ 7] 3675 	ld	a, (hl)
      00124F 21r05r00         [10] 3676 	ld	hl, #_playerSpriteY
      001252 86               [ 7] 3677 	add	a, (hl)
      001253 47               [ 4] 3678 	ld	b, a
      001254 2Ar2Er01         [16] 3679 	ld	hl, (_currentAttackSprites)
      001257 7E               [ 7] 3680 	ld	a, (hl)
      001258 21r04r00         [10] 3681 	ld	hl, #_playerSpriteX
      00125B 86               [ 7] 3682 	add	a, (hl)
      00125C 61               [ 4] 3683 	ld	h, c
      00125D 68               [ 4] 3684 	ld	l, b
      00125E E5               [11] 3685 	push	hl
      00125F F5               [11] 3686 	push	af
      001260 33               [ 6] 3687 	inc	sp
      001261 CDr00r00         [17] 3688 	call	_SMS_addSprite
      001264 F1               [10] 3689 	pop	af
      001265 33               [ 6] 3690 	inc	sp
                                   3691 ;main.c:156: SMS_addSprite(playerSpriteX + *(currentAttackSprites + 3), playerSpriteY + *(currentAttackSprites + 4), *(currentAttackSprites + 5));
      001266 2Ar2Er01         [16] 3692 	ld	hl, (_currentAttackSprites)
      001269 11 05 00         [10] 3693 	ld	de, #0x0005
      00126C 19               [11] 3694 	add	hl, de
      00126D 4E               [ 7] 3695 	ld	c, (hl)
      00126E 2Ar2Er01         [16] 3696 	ld	hl, (_currentAttackSprites)
      001271 11 04 00         [10] 3697 	ld	de, #0x0004
      001274 19               [11] 3698 	add	hl, de
      001275 7E               [ 7] 3699 	ld	a, (hl)
      001276 21r05r00         [10] 3700 	ld	hl, #_playerSpriteY
      001279 86               [ 7] 3701 	add	a, (hl)
      00127A 47               [ 4] 3702 	ld	b, a
      00127B 2Ar2Er01         [16] 3703 	ld	hl, (_currentAttackSprites)
      00127E 23               [ 6] 3704 	inc	hl
      00127F 23               [ 6] 3705 	inc	hl
      001280 23               [ 6] 3706 	inc	hl
      001281 7E               [ 7] 3707 	ld	a, (hl)
      001282 21r04r00         [10] 3708 	ld	hl, #_playerSpriteX
      001285 86               [ 7] 3709 	add	a, (hl)
      001286 61               [ 4] 3710 	ld	h, c
      001287 68               [ 4] 3711 	ld	l, b
      001288 E5               [11] 3712 	push	hl
      001289 F5               [11] 3713 	push	af
      00128A 33               [ 6] 3714 	inc	sp
      00128B CDr00r00         [17] 3715 	call	_SMS_addSprite
      00128E F1               [10] 3716 	pop	af
      00128F 33               [ 6] 3717 	inc	sp
                                   3718 ;main.c:157: SMS_addSprite(playerSpriteX + *(currentAttackSprites + 6), playerSpriteY + *(currentAttackSprites + 7), *(currentAttackSprites + 8));
      001290 2Ar2Er01         [16] 3719 	ld	hl, (_currentAttackSprites)
      001293 11 08 00         [10] 3720 	ld	de, #0x0008
      001296 19               [11] 3721 	add	hl, de
      001297 4E               [ 7] 3722 	ld	c, (hl)
      001298 2Ar2Er01         [16] 3723 	ld	hl, (_currentAttackSprites)
      00129B 11 07 00         [10] 3724 	ld	de, #0x0007
      00129E 19               [11] 3725 	add	hl, de
      00129F 7E               [ 7] 3726 	ld	a, (hl)
      0012A0 21r05r00         [10] 3727 	ld	hl, #_playerSpriteY
      0012A3 86               [ 7] 3728 	add	a, (hl)
      0012A4 47               [ 4] 3729 	ld	b, a
      0012A5 2Ar2Er01         [16] 3730 	ld	hl, (_currentAttackSprites)
      0012A8 11 06 00         [10] 3731 	ld	de, #0x0006
      0012AB 19               [11] 3732 	add	hl, de
      0012AC 7E               [ 7] 3733 	ld	a, (hl)
      0012AD 21r04r00         [10] 3734 	ld	hl, #_playerSpriteX
      0012B0 86               [ 7] 3735 	add	a, (hl)
      0012B1 61               [ 4] 3736 	ld	h, c
      0012B2 68               [ 4] 3737 	ld	l, b
      0012B3 E5               [11] 3738 	push	hl
      0012B4 F5               [11] 3739 	push	af
      0012B5 33               [ 6] 3740 	inc	sp
      0012B6 CDr00r00         [17] 3741 	call	_SMS_addSprite
      0012B9 F1               [10] 3742 	pop	af
      0012BA 33               [ 6] 3743 	inc	sp
                                   3744 ;main.c:158: SMS_addSprite(playerSpriteX + *(currentAttackSprites + 9), playerSpriteY + *(currentAttackSprites + 10), *(currentAttackSprites + 11));
      0012BB 2Ar2Er01         [16] 3745 	ld	hl, (_currentAttackSprites)
      0012BE 11 0B 00         [10] 3746 	ld	de, #0x000b
      0012C1 19               [11] 3747 	add	hl, de
      0012C2 4E               [ 7] 3748 	ld	c, (hl)
      0012C3 2Ar2Er01         [16] 3749 	ld	hl, (_currentAttackSprites)
      0012C6 11 0A 00         [10] 3750 	ld	de, #0x000a
      0012C9 19               [11] 3751 	add	hl, de
      0012CA 7E               [ 7] 3752 	ld	a, (hl)
      0012CB 21r05r00         [10] 3753 	ld	hl, #_playerSpriteY
      0012CE 86               [ 7] 3754 	add	a, (hl)
      0012CF 47               [ 4] 3755 	ld	b, a
      0012D0 2Ar2Er01         [16] 3756 	ld	hl, (_currentAttackSprites)
      0012D3 11 09 00         [10] 3757 	ld	de, #0x0009
      0012D6 19               [11] 3758 	add	hl, de
      0012D7 7E               [ 7] 3759 	ld	a, (hl)
      0012D8 21r04r00         [10] 3760 	ld	hl, #_playerSpriteX
      0012DB 86               [ 7] 3761 	add	a, (hl)
      0012DC 61               [ 4] 3762 	ld	h, c
      0012DD 68               [ 4] 3763 	ld	l, b
      0012DE E5               [11] 3764 	push	hl
      0012DF F5               [11] 3765 	push	af
      0012E0 33               [ 6] 3766 	inc	sp
      0012E1 CDr00r00         [17] 3767 	call	_SMS_addSprite
      0012E4 F1               [10] 3768 	pop	af
      0012E5 33               [ 6] 3769 	inc	sp
                                   3770 ;main.c:160: }
      0012E6 C9               [10] 3771 	ret
                                   3772 ;main.c:163: void processSpritesVBlank()
                                   3773 ;	---------------------------------
                                   3774 ; Function processSpritesVBlank
                                   3775 ; ---------------------------------
      0012E7                       3776 _processSpritesVBlank::
                                   3777 ;main.c:166: UNSAFE_SMS_copySpritestoSAT();
      0012E7 CDr00r00         [17] 3778 	call	_UNSAFE_SMS_copySpritestoSAT
                                   3779 ;main.c:169: if (action == ACTION_ATTACK) 
      0012EA 3Ar08r00         [13] 3780 	ld	a,(#_action + 0)
      0012ED 3D               [ 4] 3781 	dec	a
      0012EE 20 49            [12] 3782 	jr	NZ, 00102$
                                   3783 ;main.c:171: UNSAFE_SMS_load4Tiles(sprite_tiles_bin + *(spriteTileOffsets + ((actionCount & 14) >> 1)), 256);
      0012F0 3Ar07r00         [13] 3784 	ld	a,(#_actionCount + 0)
      0012F3 E6 0E            [ 7] 3785 	and	a, #0x0e
      0012F5 5F               [ 4] 3786 	ld	e, a
      0012F6 16 00            [ 7] 3787 	ld	d, #0x00
      0012F8 CB 2A            [ 8] 3788 	sra	d
      0012FA CB 1B            [ 8] 3789 	rr	e
      0012FC EB               [ 4] 3790 	ex	de, hl
      0012FD 29               [11] 3791 	add	hl, hl
      0012FE EB               [ 4] 3792 	ex	de, hl
      0012FF 2Ar0Ar00         [16] 3793 	ld	hl, (_spriteTileOffsets)
      001302 19               [11] 3794 	add	hl, de
      001303 4E               [ 7] 3795 	ld	c, (hl)
      001304 23               [ 6] 3796 	inc	hl
      001305 46               [ 7] 3797 	ld	b, (hl)
      001306 21r00r00         [10] 3798 	ld	hl, #_sprite_tiles_bin
      001309 09               [11] 3799 	add	hl, bc
      00130A E5               [11] 3800 	push	hl
      00130B 21 00 20         [10] 3801 	ld	hl, #0x2000
      00130E E5               [11] 3802 	push	hl
      00130F CDr00r00         [17] 3803 	call	_UNSAFE_SMS_VRAMmemcpy128
      001312 F1               [10] 3804 	pop	af
      001313 F1               [10] 3805 	pop	af
                                   3806 ;main.c:172: UNSAFE_SMS_load4Tiles(128 + sprite_tiles_bin + *(spriteTileOffsets + ((actionCount & 14) >> 1)), 260);
      001314 3Ar07r00         [13] 3807 	ld	a,(#_actionCount + 0)
      001317 E6 0E            [ 7] 3808 	and	a, #0x0e
      001319 5F               [ 4] 3809 	ld	e, a
      00131A 16 00            [ 7] 3810 	ld	d, #0x00
      00131C CB 2A            [ 8] 3811 	sra	d
      00131E CB 1B            [ 8] 3812 	rr	e
      001320 EB               [ 4] 3813 	ex	de, hl
      001321 29               [11] 3814 	add	hl, hl
      001322 EB               [ 4] 3815 	ex	de, hl
      001323 2Ar0Ar00         [16] 3816 	ld	hl, (_spriteTileOffsets)
      001326 19               [11] 3817 	add	hl, de
      001327 4E               [ 7] 3818 	ld	c, (hl)
      001328 23               [ 6] 3819 	inc	hl
      001329 46               [ 7] 3820 	ld	b, (hl)
      00132A 21r80r00         [10] 3821 	ld	hl, #(_sprite_tiles_bin + 0x0080)
      00132D 09               [11] 3822 	add	hl, bc
      00132E E5               [11] 3823 	push	hl
      00132F 21 80 20         [10] 3824 	ld	hl, #0x2080
      001332 E5               [11] 3825 	push	hl
      001333 CDr00r00         [17] 3826 	call	_UNSAFE_SMS_VRAMmemcpy128
      001336 F1               [10] 3827 	pop	af
      001337 F1               [10] 3828 	pop	af
      001338 C9               [10] 3829 	ret
      001339                       3830 00102$:
                                   3831 ;main.c:176: else UNSAFE_SMS_load4Tiles(sprite_tiles_bin + *(spriteTileOffsets + animationCount), 256);
      001339 3Ar06r00         [13] 3832 	ld	a, (#_animationCount + 0)
      00133C 6F               [ 4] 3833 	ld	l, a
      00133D 26 00            [ 7] 3834 	ld	h, #0x00
      00133F 29               [11] 3835 	add	hl, hl
      001340 4D               [ 4] 3836 	ld	c, l
      001341 44               [ 4] 3837 	ld	b, h
      001342 2Ar0Ar00         [16] 3838 	ld	hl, (_spriteTileOffsets)
      001345 09               [11] 3839 	add	hl, bc
      001346 4E               [ 7] 3840 	ld	c, (hl)
      001347 23               [ 6] 3841 	inc	hl
      001348 46               [ 7] 3842 	ld	b, (hl)
      001349 21r00r00         [10] 3843 	ld	hl, #_sprite_tiles_bin
      00134C 09               [11] 3844 	add	hl, bc
      00134D E5               [11] 3845 	push	hl
      00134E 21 00 20         [10] 3846 	ld	hl, #0x2000
      001351 E5               [11] 3847 	push	hl
      001352 CDr00r00         [17] 3848 	call	_UNSAFE_SMS_VRAMmemcpy128
      001355 F1               [10] 3849 	pop	af
      001356 F1               [10] 3850 	pop	af
                                   3851 ;main.c:177: }
      001357 C9               [10] 3852 	ret
                                   3853 ;main.c:182: void processUserInput()
                                   3854 ;	---------------------------------
                                   3855 ; Function processUserInput
                                   3856 ; ---------------------------------
      001358                       3857 _processUserInput::
                                   3858 ;main.c:184: unsigned int ks = SMS_getKeysStatus(); 
      001358 CDr00r00         [17] 3859 	call	_SMS_getKeysStatus
      00135B EB               [ 4] 3860 	ex	de, hl
                                   3861 ;main.c:187: action = ACTION_STATIONARY;
      00135C 21r08r00         [10] 3862 	ld	hl, #_action
      00135F 36 02            [10] 3863 	ld	(hl), #0x02
                                   3864 ;main.c:188: scrollXOffset = 0;
      001361 21r0Cr00         [10] 3865 	ld	hl, #_scrollXOffset
      001364 36 00            [10] 3866 	ld	(hl), #0x00
                                   3867 ;main.c:189: scrollYOffset = 0;
      001366 21r0Dr00         [10] 3868 	ld	hl, #_scrollYOffset
      001369 36 00            [10] 3869 	ld	(hl), #0x00
                                   3870 ;main.c:190: playerXOffset = 0;
      00136B 21 00 00         [10] 3871 	ld	hl, #0x0000
      00136E 22r10r00         [16] 3872 	ld	(_playerXOffset), hl
                                   3873 ;main.c:191: playerYOffset = 0;
      001371 6C               [ 4] 3874 	ld	l, h
      001372 22r12r00         [16] 3875 	ld	(_playerYOffset), hl
                                   3876 ;main.c:192: spriteXOffset = 0;
                                   3877 ;main.c:193: spriteYOffset = 0;
      001375 3E 00            [ 7] 3878 	ld	a,#0x00
      001377 32r0Er00         [13] 3879 	ld	(#_spriteXOffset),a
      00137A 32r0Fr00         [13] 3880 	ld	(#_spriteYOffset), a
                                   3881 ;main.c:195: if (actionButtonWatch == 0 && (ks & PORT_A_KEY_2))
      00137D FD 21r09r00      [14] 3882 	ld	iy, #_actionButtonWatch
      001381 FD 7E 00         [19] 3883 	ld	a, 0 (iy)
      001384 B7               [ 4] 3884 	or	a, a
      001385 20 05            [12] 3885 	jr	NZ, 00113$
      001387 CB 6B            [ 8] 3886 	bit	5, e
                                   3887 ;main.c:197: processAttackKey();
                                   3888 ;main.c:198: return;
      001389 C2r0Dr18         [10] 3889 	jp	NZ,_processAttackKey
      00138C                       3890 00113$:
                                   3891 ;main.c:200: else if (ks & PORT_A_KEY_UP)
      00138C CB 43            [ 8] 3892 	bit	0, e
                                   3893 ;main.c:202: processUpKey();
                                   3894 ;main.c:203: return;
      00138E C2rA1r13         [10] 3895 	jp	NZ,_processUpKey
                                   3896 ;main.c:206: else if (ks & PORT_A_KEY_DOWN)
      001391 CB 4B            [ 8] 3897 	bit	1, e
                                   3898 ;main.c:208: processDownKey();
                                   3899 ;main.c:209: return;
      001393 C2rF0r14         [10] 3900 	jp	NZ,_processDownKey
                                   3901 ;main.c:212: else if (ks & PORT_A_KEY_LEFT)
      001396 CB 53            [ 8] 3902 	bit	2, e
                                   3903 ;main.c:214: processLeftKey();
                                   3904 ;main.c:215: return;
      001398 C2r53r16         [10] 3905 	jp	NZ,_processLeftKey
                                   3906 ;main.c:218: else if (ks & PORT_A_KEY_RIGHT)
      00139B CB 5B            [ 8] 3907 	bit	3, e
                                   3908 ;main.c:220: processRightKey();
                                   3909 ;main.c:221: return;
      00139D C2r31r17         [10] 3910 	jp	NZ,_processRightKey
                                   3911 ;main.c:223: }
      0013A0 C9               [10] 3912 	ret
                                   3913 ;main.c:226: void processUpKey()
                                   3914 ;	---------------------------------
                                   3915 ; Function processUpKey
                                   3916 ; ---------------------------------
      0013A1                       3917 _processUpKey::
      0013A1 DD E5            [15] 3918 	push	ix
      0013A3 DD 21 00 00      [14] 3919 	ld	ix,#0
      0013A7 DD 39            [15] 3920 	add	ix,sp
      0013A9 F5               [11] 3921 	push	af
                                   3922 ;main.c:230: unsigned char topLeftMetatile = *(GSL_metatileLookup(playerX - 8, playerY - 1));
      0013AA ED 5Br02r00      [20] 3923 	ld	de, (_playerY)
      0013AE 1B               [ 6] 3924 	dec	de
      0013AF FD 21r00r00      [14] 3925 	ld	iy, #_playerX
      0013B3 FD 7E 00         [19] 3926 	ld	a, 0 (iy)
      0013B6 C6 F8            [ 7] 3927 	add	a, #0xf8
      0013B8 4F               [ 4] 3928 	ld	c, a
      0013B9 FD 7E 01         [19] 3929 	ld	a, 1 (iy)
      0013BC CE FF            [ 7] 3930 	adc	a, #0xff
      0013BE 47               [ 4] 3931 	ld	b, a
      0013BF D5               [11] 3932 	push	de
      0013C0 C5               [11] 3933 	push	bc
      0013C1 CDr82r02         [17] 3934 	call	_GSL_metatileLookup
      0013C4 F1               [10] 3935 	pop	af
      0013C5 F1               [10] 3936 	pop	af
      0013C6 7E               [ 7] 3937 	ld	a, (hl)
      0013C7 DD 77 FE         [19] 3938 	ld	-2 (ix), a
                                   3939 ;main.c:231: unsigned char topRightMetatile = *(GSL_metatileLookup(playerX + 7, playerY - 1));
      0013CA ED 4Br02r00      [20] 3940 	ld	bc, (_playerY)
      0013CE 0B               [ 6] 3941 	dec	bc
      0013CF 2Ar00r00         [16] 3942 	ld	hl, (_playerX)
      0013D2 11 07 00         [10] 3943 	ld	de, #0x0007
      0013D5 19               [11] 3944 	add	hl, de
      0013D6 C5               [11] 3945 	push	bc
      0013D7 E5               [11] 3946 	push	hl
      0013D8 CDr82r02         [17] 3947 	call	_GSL_metatileLookup
      0013DB F1               [10] 3948 	pop	af
      0013DC F1               [10] 3949 	pop	af
      0013DD 4E               [ 7] 3950 	ld	c, (hl)
                                   3951 ;main.c:239: animationCount = (animationCount - 1) & 3;
      0013DE 3Ar06r00         [13] 3952 	ld	a,(#_animationCount + 0)
      0013E1 3D               [ 4] 3953 	dec	a
      0013E2 E6 03            [ 7] 3954 	and	a, #0x03
      0013E4 DD 77 FF         [19] 3955 	ld	-1 (ix), a
                                   3956 ;main.c:234: if (playerY == 8 || ((metatilesMetaLUT[topLeftMetatile] & 1) == 0 && (metatilesMetaLUT[topRightMetatile] & 1)  == 0))
      0013E7 FD 21r02r00      [14] 3957 	ld	iy, #_playerY
      0013EB FD 7E 00         [19] 3958 	ld	a, 0 (iy)
      0013EE D6 08            [ 7] 3959 	sub	a, #0x08
      0013F0 FD B6 01         [19] 3960 	or	a, 1 (iy)
      0013F3 28 23            [12] 3961 	jr	Z, 00101$
      0013F5 3Er82            [ 7] 3962 	ld	a, #<(_metatilesMetaLUT)
      0013F7 DD 86 FE         [19] 3963 	add	a, -2 (ix)
      0013FA 6F               [ 4] 3964 	ld	l, a
      0013FB 3Es01            [ 7] 3965 	ld	a, #>(_metatilesMetaLUT)
      0013FD CE 00            [ 7] 3966 	adc	a, #0x00
      0013FF 67               [ 4] 3967 	ld	h, a
      001400 6E               [ 7] 3968 	ld	l, (hl)
      001401 7D               [ 4] 3969 	ld	a, l
      001402 E6 01            [ 7] 3970 	and	a, #0x01
      001404 5F               [ 4] 3971 	ld	e, a
      001405 16 00            [ 7] 3972 	ld	d, #0x00
      001407 3Er82            [ 7] 3973 	ld	a, #<(_metatilesMetaLUT)
      001409 81               [ 4] 3974 	add	a, c
      00140A 4F               [ 4] 3975 	ld	c, a
      00140B 3Es01            [ 7] 3976 	ld	a, #>(_metatilesMetaLUT)
      00140D CE 00            [ 7] 3977 	adc	a, #0x00
      00140F 47               [ 4] 3978 	ld	b, a
      001410 7A               [ 4] 3979 	ld	a, d
      001411 B3               [ 4] 3980 	or	a, e
      001412 20 3E            [12] 3981 	jr	NZ, 00102$
      001414 0A               [ 7] 3982 	ld	a, (bc)
      001415 0F               [ 4] 3983 	rrca
      001416 38 3A            [12] 3984 	jr	C, 00102$
      001418                       3985 00101$:
                                   3986 ;main.c:237: action = ACTION_MOVE;
      001418 21r08r00         [10] 3987 	ld	hl, #_action
      00141B 36 00            [10] 3988 	ld	(hl), #0x00
                                   3989 ;main.c:238: direction = DIRECTION_UP;
      00141D 21r14r00         [10] 3990 	ld	hl, #_direction
      001420 36 00            [10] 3991 	ld	(hl), #0x00
                                   3992 ;main.c:239: animationCount = (animationCount - 1) & 3;
      001422 DD 7E FF         [19] 3993 	ld	a, -1 (ix)
      001425 32r06r00         [13] 3994 	ld	(#_animationCount),a
                                   3995 ;main.c:240: actionCount = 4;
      001428 21r07r00         [10] 3996 	ld	hl, #_actionCount
      00142B 36 04            [10] 3997 	ld	(hl), #0x04
                                   3998 ;main.c:241: spriteTileOffsets = spriteMoveUp;
      00142D 21r0Ar00         [10] 3999 	ld	hl, #_spriteMoveUp+0
      001430 22r0Ar00         [16] 4000 	ld	(_spriteTileOffsets), hl
                                   4001 ;main.c:243: scrollXOffset = 0;
      001433 21r0Cr00         [10] 4002 	ld	hl, #_scrollXOffset
      001436 36 00            [10] 4003 	ld	(hl), #0x00
                                   4004 ;main.c:244: scrollYOffset = 0;
      001438 21r0Dr00         [10] 4005 	ld	hl, #_scrollYOffset
      00143B 36 00            [10] 4006 	ld	(hl), #0x00
                                   4007 ;main.c:245: playerXOffset = 0;
      00143D 21 00 00         [10] 4008 	ld	hl, #0x0000
      001440 22r10r00         [16] 4009 	ld	(_playerXOffset), hl
                                   4010 ;main.c:246: playerYOffset = 0;
      001443 6C               [ 4] 4011 	ld	l, h
      001444 22r12r00         [16] 4012 	ld	(_playerYOffset), hl
                                   4013 ;main.c:247: spriteXOffset = 0;
                                   4014 ;main.c:248: spriteYOffset = 0;
      001447 3E 00            [ 7] 4015 	ld	a,#0x00
      001449 32r0Er00         [13] 4016 	ld	(#_spriteXOffset),a
      00144C 32r0Fr00         [13] 4017 	ld	(#_spriteYOffset), a
                                   4018 ;main.c:250: return;
      00144F C3rEBr14         [10] 4019 	jp	00115$
      001452                       4020 00102$:
                                   4021 ;main.c:255: if ((metatilesMetaLUT[topLeftMetatile] & 1) == 1 && (metatilesMetaLUT[topRightMetatile] & 1)  == 0)
      001452 7D               [ 4] 4022 	ld	a, l
      001453 E6 01            [ 7] 4023 	and	a, #0x01
      001455 6F               [ 4] 4024 	ld	l, a
      001456 26 00            [ 7] 4025 	ld	h, #0x00
      001458 7D               [ 4] 4026 	ld	a, l
      001459 3D               [ 4] 4027 	dec	a
      00145A B4               [ 4] 4028 	or	a, h
      00145B 20 0A            [12] 4029 	jr	NZ, 00106$
      00145D 0A               [ 7] 4030 	ld	a, (bc)
      00145E 0F               [ 4] 4031 	rrca
      00145F 38 06            [12] 4032 	jr	C, 00106$
                                   4033 ;main.c:257: processLeftKey();
      001461 CDr53r16         [17] 4034 	call	_processLeftKey
                                   4035 ;main.c:258: return;
      001464 C3rEBr14         [10] 4036 	jp	00115$
      001467                       4037 00106$:
                                   4038 ;main.c:260: if ((metatilesMetaLUT[topLeftMetatile] & 1) == 0 && (metatilesMetaLUT[topRightMetatile] & 1)  == 1)
      001467 7A               [ 4] 4039 	ld	a, d
      001468 B3               [ 4] 4040 	or	a, e
      001469 20 10            [12] 4041 	jr	NZ, 00109$
      00146B 0A               [ 7] 4042 	ld	a, (bc)
      00146C E6 01            [ 7] 4043 	and	a, #0x01
      00146E 4F               [ 4] 4044 	ld	c, a
      00146F 06 00            [ 7] 4045 	ld	b, #0x00
      001471 79               [ 4] 4046 	ld	a, c
      001472 3D               [ 4] 4047 	dec	a
      001473 B0               [ 4] 4048 	or	a, b
      001474 20 05            [12] 4049 	jr	NZ, 00109$
                                   4050 ;main.c:262: processRightKey();
      001476 CDr31r17         [17] 4051 	call	_processRightKey
                                   4052 ;main.c:263: return;
      001479 18 70            [12] 4053 	jr	00115$
      00147B                       4054 00109$:
                                   4055 ;main.c:267: action = ACTION_MOVE;
      00147B 21r08r00         [10] 4056 	ld	hl, #_action
      00147E 36 00            [10] 4057 	ld	(hl), #0x00
                                   4058 ;main.c:268: direction = DIRECTION_UP;
      001480 21r14r00         [10] 4059 	ld	hl, #_direction
      001483 36 00            [10] 4060 	ld	(hl), #0x00
                                   4061 ;main.c:269: animationCount = (animationCount - 1) & 3;
      001485 DD 7E FF         [19] 4062 	ld	a, -1 (ix)
      001488 32r06r00         [13] 4063 	ld	(#_animationCount),a
                                   4064 ;main.c:270: actionCount = 4;
      00148B 21r07r00         [10] 4065 	ld	hl, #_actionCount
      00148E 36 04            [10] 4066 	ld	(hl), #0x04
                                   4067 ;main.c:271: spriteTileOffsets = spriteMoveUp;
      001490 21r0Ar00         [10] 4068 	ld	hl, #_spriteMoveUp+0
      001493 22r0Ar00         [16] 4069 	ld	(_spriteTileOffsets), hl
                                   4070 ;main.c:273: scrollXOffset = 0;
      001496 21r0Cr00         [10] 4071 	ld	hl, #_scrollXOffset
      001499 36 00            [10] 4072 	ld	(hl), #0x00
                                   4073 ;main.c:274: playerXOffset = 0;
      00149B 21 00 00         [10] 4074 	ld	hl, #0x0000
      00149E 22r10r00         [16] 4075 	ld	(_playerXOffset), hl
                                   4076 ;main.c:275: spriteXOffset = 0;
      0014A1 21r0Er00         [10] 4077 	ld	hl, #_spriteXOffset
      0014A4 36 00            [10] 4078 	ld	(hl), #0x00
                                   4079 ;main.c:276: playerYOffset = 0xFFFE;
      0014A6 21 FE FF         [10] 4080 	ld	hl, #0xfffe
      0014A9 22r12r00         [16] 4081 	ld	(_playerYOffset), hl
                                   4082 ;main.c:280: if (playerY <= 96 || playerY > GSL_getMapHeightInPixels() - 96)
      0014AC 3E 60            [ 7] 4083 	ld	a, #0x60
      0014AE FD 21r02r00      [14] 4084 	ld	iy, #_playerY
      0014B2 FD BE 00         [19] 4085 	cp	a, 0 (iy)
      0014B5 3E 00            [ 7] 4086 	ld	a, #0x00
      0014B7 FD 9E 01         [19] 4087 	sbc	a, 1 (iy)
      0014BA 30 19            [12] 4088 	jr	NC, 00111$
      0014BC CDrDCr02         [17] 4089 	call	_GSL_getMapHeightInPixels
      0014BF 7D               [ 4] 4090 	ld	a, l
      0014C0 C6 A0            [ 7] 4091 	add	a, #0xa0
      0014C2 4F               [ 4] 4092 	ld	c, a
      0014C3 7C               [ 4] 4093 	ld	a, h
      0014C4 CE FF            [ 7] 4094 	adc	a, #0xff
      0014C6 47               [ 4] 4095 	ld	b, a
      0014C7 79               [ 4] 4096 	ld	a, c
      0014C8 FD 21r02r00      [14] 4097 	ld	iy, #_playerY
      0014CC FD 96 00         [19] 4098 	sub	a, 0 (iy)
      0014CF 78               [ 4] 4099 	ld	a, b
      0014D0 FD 9E 01         [19] 4100 	sbc	a, 1 (iy)
      0014D3 30 0C            [12] 4101 	jr	NC, 00112$
      0014D5                       4102 00111$:
                                   4103 ;main.c:282: spriteYOffset = 0xFE;
      0014D5 3E FE            [ 7] 4104 	ld	a, #0xfe
      0014D7 32r0Fr00         [13] 4105 	ld	(#_spriteYOffset), a
                                   4106 ;main.c:283: scrollYOffset = 0;
      0014DA 3E 00            [ 7] 4107 	ld	a, #0x00
      0014DC 32r0Dr00         [13] 4108 	ld	(#_scrollYOffset), a
      0014DF 18 0A            [12] 4109 	jr	00115$
      0014E1                       4110 00112$:
                                   4111 ;main.c:287: spriteYOffset = 0;
      0014E1 3E 00            [ 7] 4112 	ld	a, #0x00
      0014E3 32r0Fr00         [13] 4113 	ld	(#_spriteYOffset), a
                                   4114 ;main.c:288: scrollYOffset = 0xFE;
      0014E6 3E FE            [ 7] 4115 	ld	a, #0xfe
      0014E8 32r0Dr00         [13] 4116 	ld	(#_scrollYOffset), a
      0014EB                       4117 00115$:
                                   4118 ;main.c:290: }
      0014EB DD F9            [10] 4119 	ld	sp, ix
      0014ED DD E1            [14] 4120 	pop	ix
      0014EF C9               [10] 4121 	ret
                                   4122 ;main.c:293: void processDownKey()
                                   4123 ;	---------------------------------
                                   4124 ; Function processDownKey
                                   4125 ; ---------------------------------
      0014F0                       4126 _processDownKey::
      0014F0 DD E5            [15] 4127 	push	ix
      0014F2 DD 21 00 00      [14] 4128 	ld	ix,#0
      0014F6 DD 39            [15] 4129 	add	ix,sp
      0014F8 F5               [11] 4130 	push	af
      0014F9 3B               [ 6] 4131 	dec	sp
                                   4132 ;main.c:297: unsigned char bottomLeftMetatile = *(GSL_metatileLookup(playerX - 8, playerY + 8));
      0014FA FD 21r02r00      [14] 4133 	ld	iy, #_playerY
      0014FE FD 7E 00         [19] 4134 	ld	a, 0 (iy)
      001501 C6 08            [ 7] 4135 	add	a, #0x08
      001503 5F               [ 4] 4136 	ld	e, a
      001504 FD 7E 01         [19] 4137 	ld	a, 1 (iy)
      001507 CE 00            [ 7] 4138 	adc	a, #0x00
      001509 57               [ 4] 4139 	ld	d, a
      00150A FD 21r00r00      [14] 4140 	ld	iy, #_playerX
      00150E FD 7E 00         [19] 4141 	ld	a, 0 (iy)
      001511 C6 F8            [ 7] 4142 	add	a, #0xf8
      001513 4F               [ 4] 4143 	ld	c, a
      001514 FD 7E 01         [19] 4144 	ld	a, 1 (iy)
      001517 CE FF            [ 7] 4145 	adc	a, #0xff
      001519 47               [ 4] 4146 	ld	b, a
      00151A D5               [11] 4147 	push	de
      00151B C5               [11] 4148 	push	bc
      00151C CDr82r02         [17] 4149 	call	_GSL_metatileLookup
      00151F F1               [10] 4150 	pop	af
      001520 F1               [10] 4151 	pop	af
      001521 7E               [ 7] 4152 	ld	a, (hl)
      001522 DD 77 FD         [19] 4153 	ld	-3 (ix), a
                                   4154 ;main.c:298: unsigned char bottomRightMetatile = *(GSL_metatileLookup(playerX + 7, playerY + 8));
      001525 FD 21r02r00      [14] 4155 	ld	iy, #_playerY
      001529 FD 7E 00         [19] 4156 	ld	a, 0 (iy)
      00152C C6 08            [ 7] 4157 	add	a, #0x08
      00152E 4F               [ 4] 4158 	ld	c, a
      00152F FD 7E 01         [19] 4159 	ld	a, 1 (iy)
      001532 CE 00            [ 7] 4160 	adc	a, #0x00
      001534 47               [ 4] 4161 	ld	b, a
      001535 2Ar00r00         [16] 4162 	ld	hl, (_playerX)
      001538 11 07 00         [10] 4163 	ld	de, #0x0007
      00153B 19               [11] 4164 	add	hl, de
      00153C C5               [11] 4165 	push	bc
      00153D E5               [11] 4166 	push	hl
      00153E CDr82r02         [17] 4167 	call	_GSL_metatileLookup
      001541 F1               [10] 4168 	pop	af
      001542 F1               [10] 4169 	pop	af
      001543 7E               [ 7] 4170 	ld	a, (hl)
      001544 DD 77 FE         [19] 4171 	ld	-2 (ix), a
                                   4172 ;main.c:301: if (playerY == GSL_getMapHeightInPixels() - 8 || ((metatilesMetaLUT[bottomLeftMetatile] & 1) == 0 && (metatilesMetaLUT[bottomRightMetatile] & 1) == 0))
      001547 CDrDCr02         [17] 4173 	call	_GSL_getMapHeightInPixels
      00154A 01 F8 FF         [10] 4174 	ld	bc, #0xfff8
      00154D 09               [11] 4175 	add	hl,bc
      00154E 4D               [ 4] 4176 	ld	c, l
      00154F 44               [ 4] 4177 	ld	b, h
                                   4178 ;main.c:306: animationCount = (animationCount - 1) & 3;
      001550 3Ar06r00         [13] 4179 	ld	a,(#_animationCount + 0)
      001553 3D               [ 4] 4180 	dec	a
      001554 E6 03            [ 7] 4181 	and	a, #0x03
      001556 DD 77 FF         [19] 4182 	ld	-1 (ix), a
                                   4183 ;main.c:301: if (playerY == GSL_getMapHeightInPixels() - 8 || ((metatilesMetaLUT[bottomLeftMetatile] & 1) == 0 && (metatilesMetaLUT[bottomRightMetatile] & 1) == 0))
      001559 2Ar02r00         [16] 4184 	ld	hl, (_playerY)
      00155C BF               [ 4] 4185 	cp	a, a
      00155D ED 42            [15] 4186 	sbc	hl, bc
      00155F 28 20            [12] 4187 	jr	Z, 00101$
      001561 01r82r01         [10] 4188 	ld	bc, #_metatilesMetaLUT+0
      001564 DD 6E FD         [19] 4189 	ld	l, -3 (ix)
      001567 26 00            [ 7] 4190 	ld	h, #0x00
      001569 09               [11] 4191 	add	hl, bc
      00156A 6E               [ 7] 4192 	ld	l, (hl)
      00156B 7D               [ 4] 4193 	ld	a, l
      00156C E6 01            [ 7] 4194 	and	a, #0x01
      00156E 5F               [ 4] 4195 	ld	e, a
      00156F 16 00            [ 7] 4196 	ld	d, #0x00
      001571 79               [ 4] 4197 	ld	a, c
      001572 DD 86 FE         [19] 4198 	add	a, -2 (ix)
      001575 4F               [ 4] 4199 	ld	c, a
      001576 30 01            [12] 4200 	jr	NC, 00153$
      001578 04               [ 4] 4201 	inc	b
      001579                       4202 00153$:
      001579 7A               [ 4] 4203 	ld	a, d
      00157A B3               [ 4] 4204 	or	a, e
      00157B 20 3E            [12] 4205 	jr	NZ, 00102$
      00157D 0A               [ 7] 4206 	ld	a, (bc)
      00157E 0F               [ 4] 4207 	rrca
      00157F 38 3A            [12] 4208 	jr	C, 00102$
      001581                       4209 00101$:
                                   4210 ;main.c:304: action = ACTION_MOVE;
      001581 21r08r00         [10] 4211 	ld	hl, #_action
      001584 36 00            [10] 4212 	ld	(hl), #0x00
                                   4213 ;main.c:305: direction = DIRECTION_DOWN;
      001586 21r14r00         [10] 4214 	ld	hl, #_direction
      001589 36 01            [10] 4215 	ld	(hl), #0x01
                                   4216 ;main.c:306: animationCount = (animationCount - 1) & 3;
      00158B DD 7E FF         [19] 4217 	ld	a, -1 (ix)
      00158E 32r06r00         [13] 4218 	ld	(#_animationCount),a
                                   4219 ;main.c:307: actionCount = 4;
      001591 21r07r00         [10] 4220 	ld	hl, #_actionCount
      001594 36 04            [10] 4221 	ld	(hl), #0x04
                                   4222 ;main.c:308: spriteTileOffsets = spriteMoveDown;
      001596 21r12r00         [10] 4223 	ld	hl, #_spriteMoveDown+0
      001599 22r0Ar00         [16] 4224 	ld	(_spriteTileOffsets), hl
                                   4225 ;main.c:310: scrollXOffset = 0;
      00159C 21r0Cr00         [10] 4226 	ld	hl, #_scrollXOffset
      00159F 36 00            [10] 4227 	ld	(hl), #0x00
                                   4228 ;main.c:311: scrollYOffset = 0;
      0015A1 21r0Dr00         [10] 4229 	ld	hl, #_scrollYOffset
      0015A4 36 00            [10] 4230 	ld	(hl), #0x00
                                   4231 ;main.c:312: playerXOffset = 0;
      0015A6 21 00 00         [10] 4232 	ld	hl, #0x0000
      0015A9 22r10r00         [16] 4233 	ld	(_playerXOffset), hl
                                   4234 ;main.c:313: playerYOffset = 0;
      0015AC 6C               [ 4] 4235 	ld	l, h
      0015AD 22r12r00         [16] 4236 	ld	(_playerYOffset), hl
                                   4237 ;main.c:314: spriteXOffset = 0;
                                   4238 ;main.c:315: spriteYOffset = 0;
      0015B0 3E 00            [ 7] 4239 	ld	a,#0x00
      0015B2 32r0Er00         [13] 4240 	ld	(#_spriteXOffset),a
      0015B5 32r0Fr00         [13] 4241 	ld	(#_spriteYOffset), a
                                   4242 ;main.c:317: return;
      0015B8 C3r4Er16         [10] 4243 	jp	00115$
      0015BB                       4244 00102$:
                                   4245 ;main.c:322: if ((metatilesMetaLUT[bottomLeftMetatile] & 1) == 1 && (metatilesMetaLUT[bottomRightMetatile] & 1) == 0)
      0015BB 7D               [ 4] 4246 	ld	a, l
      0015BC E6 01            [ 7] 4247 	and	a, #0x01
      0015BE 6F               [ 4] 4248 	ld	l, a
      0015BF 26 00            [ 7] 4249 	ld	h, #0x00
      0015C1 7D               [ 4] 4250 	ld	a, l
      0015C2 3D               [ 4] 4251 	dec	a
      0015C3 B4               [ 4] 4252 	or	a, h
      0015C4 20 0A            [12] 4253 	jr	NZ, 00106$
      0015C6 0A               [ 7] 4254 	ld	a, (bc)
      0015C7 0F               [ 4] 4255 	rrca
      0015C8 38 06            [12] 4256 	jr	C, 00106$
                                   4257 ;main.c:324: processLeftKey();
      0015CA CDr53r16         [17] 4258 	call	_processLeftKey
                                   4259 ;main.c:325: return;
      0015CD C3r4Er16         [10] 4260 	jp	00115$
      0015D0                       4261 00106$:
                                   4262 ;main.c:327: if ((metatilesMetaLUT[bottomLeftMetatile] & 1) == 0 && (metatilesMetaLUT[bottomRightMetatile] & 1) == 1)
      0015D0 7A               [ 4] 4263 	ld	a, d
      0015D1 B3               [ 4] 4264 	or	a, e
      0015D2 20 10            [12] 4265 	jr	NZ, 00109$
      0015D4 0A               [ 7] 4266 	ld	a, (bc)
      0015D5 E6 01            [ 7] 4267 	and	a, #0x01
      0015D7 4F               [ 4] 4268 	ld	c, a
      0015D8 06 00            [ 7] 4269 	ld	b, #0x00
      0015DA 79               [ 4] 4270 	ld	a, c
      0015DB 3D               [ 4] 4271 	dec	a
      0015DC B0               [ 4] 4272 	or	a, b
      0015DD 20 05            [12] 4273 	jr	NZ, 00109$
                                   4274 ;main.c:329: processRightKey();
      0015DF CDr31r17         [17] 4275 	call	_processRightKey
                                   4276 ;main.c:330: return;
      0015E2 18 6A            [12] 4277 	jr	00115$
      0015E4                       4278 00109$:
                                   4279 ;main.c:334: action = ACTION_MOVE;
      0015E4 21r08r00         [10] 4280 	ld	hl, #_action
      0015E7 36 00            [10] 4281 	ld	(hl), #0x00
                                   4282 ;main.c:335: direction = DIRECTION_DOWN;
      0015E9 21r14r00         [10] 4283 	ld	hl, #_direction
      0015EC 36 01            [10] 4284 	ld	(hl), #0x01
                                   4285 ;main.c:336: animationCount = (animationCount - 1) & 3;
      0015EE DD 7E FF         [19] 4286 	ld	a, -1 (ix)
      0015F1 32r06r00         [13] 4287 	ld	(#_animationCount),a
                                   4288 ;main.c:337: actionCount = 4;
      0015F4 21r07r00         [10] 4289 	ld	hl, #_actionCount
      0015F7 36 04            [10] 4290 	ld	(hl), #0x04
                                   4291 ;main.c:338: spriteTileOffsets = spriteMoveDown;
      0015F9 21r12r00         [10] 4292 	ld	hl, #_spriteMoveDown+0
      0015FC 22r0Ar00         [16] 4293 	ld	(_spriteTileOffsets), hl
                                   4294 ;main.c:340: scrollXOffset = 0;
      0015FF 21r0Cr00         [10] 4295 	ld	hl, #_scrollXOffset
      001602 36 00            [10] 4296 	ld	(hl), #0x00
                                   4297 ;main.c:341: playerXOffset = 0;
      001604 21 00 00         [10] 4298 	ld	hl, #0x0000
      001607 22r10r00         [16] 4299 	ld	(_playerXOffset), hl
                                   4300 ;main.c:342: spriteXOffset = 0;
      00160A FD 21r0Er00      [14] 4301 	ld	iy, #_spriteXOffset
      00160E FD 36 00 00      [19] 4302 	ld	0 (iy), #0x00
                                   4303 ;main.c:343: playerYOffset = 2;
      001612 2E 02            [ 7] 4304 	ld	l, #0x02
      001614 22r12r00         [16] 4305 	ld	(_playerYOffset), hl
                                   4306 ;main.c:347: if (playerY < 96 || playerY >= GSL_getMapHeightInPixels() - 96)
      001617 FD 21r02r00      [14] 4307 	ld	iy, #_playerY
      00161B FD 7E 00         [19] 4308 	ld	a, 0 (iy)
      00161E D6 60            [ 7] 4309 	sub	a, #0x60
      001620 FD 7E 01         [19] 4310 	ld	a, 1 (iy)
      001623 DE 00            [ 7] 4311 	sbc	a, #0x00
      001625 38 11            [12] 4312 	jr	C, 00111$
      001627 CDrDCr02         [17] 4313 	call	_GSL_getMapHeightInPixels
      00162A 01 A0 FF         [10] 4314 	ld	bc, #0xffa0
      00162D 09               [11] 4315 	add	hl,bc
      00162E 4D               [ 4] 4316 	ld	c, l
      00162F 44               [ 4] 4317 	ld	b, h
      001630 2Ar02r00         [16] 4318 	ld	hl, (_playerY)
      001633 AF               [ 4] 4319 	xor	a, a
      001634 ED 42            [15] 4320 	sbc	hl, bc
      001636 38 0C            [12] 4321 	jr	C, 00112$
      001638                       4322 00111$:
                                   4323 ;main.c:349: spriteYOffset = 2;
      001638 3E 02            [ 7] 4324 	ld	a, #0x02
      00163A 32r0Fr00         [13] 4325 	ld	(#_spriteYOffset), a
                                   4326 ;main.c:350: scrollYOffset = 0;
      00163D 3E 00            [ 7] 4327 	ld	a, #0x00
      00163F 32r0Dr00         [13] 4328 	ld	(#_scrollYOffset), a
      001642 18 0A            [12] 4329 	jr	00115$
      001644                       4330 00112$:
                                   4331 ;main.c:354: spriteYOffset = 0;
      001644 3E 00            [ 7] 4332 	ld	a, #0x00
      001646 32r0Fr00         [13] 4333 	ld	(#_spriteYOffset), a
                                   4334 ;main.c:355: scrollYOffset = 2;
      001649 3E 02            [ 7] 4335 	ld	a, #0x02
      00164B 32r0Dr00         [13] 4336 	ld	(#_scrollYOffset), a
      00164E                       4337 00115$:
                                   4338 ;main.c:357: }
      00164E DD F9            [10] 4339 	ld	sp, ix
      001650 DD E1            [14] 4340 	pop	ix
      001652 C9               [10] 4341 	ret
                                   4342 ;main.c:360: void processLeftKey()
                                   4343 ;	---------------------------------
                                   4344 ; Function processLeftKey
                                   4345 ; ---------------------------------
      001653                       4346 _processLeftKey::
                                   4347 ;main.c:364: unsigned char lowerLeftMetatile = *(GSL_metatileLookup(playerX - 9, playerY));
      001653 FD 21r00r00      [14] 4348 	ld	iy, #_playerX
      001657 FD 7E 00         [19] 4349 	ld	a, 0 (iy)
      00165A C6 F7            [ 7] 4350 	add	a, #0xf7
      00165C 4F               [ 4] 4351 	ld	c, a
      00165D FD 7E 01         [19] 4352 	ld	a, 1 (iy)
      001660 CE FF            [ 7] 4353 	adc	a, #0xff
      001662 47               [ 4] 4354 	ld	b, a
      001663 2Ar02r00         [16] 4355 	ld	hl, (_playerY)
      001666 E5               [11] 4356 	push	hl
      001667 C5               [11] 4357 	push	bc
      001668 CDr82r02         [17] 4358 	call	_GSL_metatileLookup
      00166B F1               [10] 4359 	pop	af
      00166C F1               [10] 4360 	pop	af
      00166D 4E               [ 7] 4361 	ld	c, (hl)
                                   4362 ;main.c:372: animationCount = (animationCount - 1) & 3;
      00166E 3Ar06r00         [13] 4363 	ld	a,(#_animationCount + 0)
      001671 3D               [ 4] 4364 	dec	a
      001672 E6 03            [ 7] 4365 	and	a, #0x03
      001674 5F               [ 4] 4366 	ld	e, a
                                   4367 ;main.c:367: if (playerX == 16 || (metatilesMetaLUT[lowerLeftMetatile] & 1) == 0)
      001675 FD 21r00r00      [14] 4368 	ld	iy, #_playerX
      001679 FD 7E 00         [19] 4369 	ld	a, 0 (iy)
      00167C D6 10            [ 7] 4370 	sub	a, #0x10
      00167E FD B6 01         [19] 4371 	or	a, 1 (iy)
      001681 28 0A            [12] 4372 	jr	Z, 00101$
      001683 21r82r01         [10] 4373 	ld	hl, #_metatilesMetaLUT+0
      001686 06 00            [ 7] 4374 	ld	b, #0x00
      001688 09               [11] 4375 	add	hl, bc
      001689 7E               [ 7] 4376 	ld	a, (hl)
      00168A 0F               [ 4] 4377 	rrca
      00168B 38 36            [12] 4378 	jr	C, 00102$
      00168D                       4379 00101$:
                                   4380 ;main.c:370: action = ACTION_MOVE;
      00168D 21r08r00         [10] 4381 	ld	hl, #_action
      001690 36 00            [10] 4382 	ld	(hl), #0x00
                                   4383 ;main.c:371: direction = DIRECTION_LEFT;
      001692 21r14r00         [10] 4384 	ld	hl, #_direction
      001695 36 02            [10] 4385 	ld	(hl), #0x02
                                   4386 ;main.c:372: animationCount = (animationCount - 1) & 3;
      001697 21r06r00         [10] 4387 	ld	hl, #_animationCount
      00169A 73               [ 7] 4388 	ld	(hl), e
                                   4389 ;main.c:373: actionCount = 4;
      00169B 21r07r00         [10] 4390 	ld	hl, #_actionCount
      00169E 36 04            [10] 4391 	ld	(hl), #0x04
                                   4392 ;main.c:374: spriteTileOffsets = spriteMoveLeft;
      0016A0 21r1Ar00         [10] 4393 	ld	hl, #_spriteMoveLeft+0
      0016A3 22r0Ar00         [16] 4394 	ld	(_spriteTileOffsets), hl
                                   4395 ;main.c:376: scrollXOffset = 0;
      0016A6 21r0Cr00         [10] 4396 	ld	hl, #_scrollXOffset
      0016A9 36 00            [10] 4397 	ld	(hl), #0x00
                                   4398 ;main.c:377: scrollYOffset = 0;
      0016AB 21r0Dr00         [10] 4399 	ld	hl, #_scrollYOffset
      0016AE 36 00            [10] 4400 	ld	(hl), #0x00
                                   4401 ;main.c:378: playerXOffset = 0;
      0016B0 21 00 00         [10] 4402 	ld	hl, #0x0000
      0016B3 22r10r00         [16] 4403 	ld	(_playerXOffset), hl
                                   4404 ;main.c:379: playerYOffset = 0;
      0016B6 6C               [ 4] 4405 	ld	l, h
      0016B7 22r12r00         [16] 4406 	ld	(_playerYOffset), hl
                                   4407 ;main.c:380: spriteXOffset = 0;
                                   4408 ;main.c:381: spriteYOffset = 0;
      0016BA 3E 00            [ 7] 4409 	ld	a,#0x00
      0016BC 32r0Er00         [13] 4410 	ld	(#_spriteXOffset),a
      0016BF 32r0Fr00         [13] 4411 	ld	(#_spriteYOffset), a
                                   4412 ;main.c:383: return;
      0016C2 C9               [10] 4413 	ret
      0016C3                       4414 00102$:
                                   4415 ;main.c:387: action = ACTION_MOVE;
      0016C3 21r08r00         [10] 4416 	ld	hl, #_action
      0016C6 36 00            [10] 4417 	ld	(hl), #0x00
                                   4418 ;main.c:388: direction = DIRECTION_LEFT;
      0016C8 21r14r00         [10] 4419 	ld	hl, #_direction
      0016CB 36 02            [10] 4420 	ld	(hl), #0x02
                                   4421 ;main.c:389: animationCount = (animationCount - 1) & 3;
      0016CD 21r06r00         [10] 4422 	ld	hl, #_animationCount
      0016D0 73               [ 7] 4423 	ld	(hl), e
                                   4424 ;main.c:390: actionCount = 4;
      0016D1 21r07r00         [10] 4425 	ld	hl, #_actionCount
      0016D4 36 04            [10] 4426 	ld	(hl), #0x04
                                   4427 ;main.c:391: spriteTileOffsets = spriteMoveLeft;
      0016D6 21r1Ar00         [10] 4428 	ld	hl, #_spriteMoveLeft+0
      0016D9 22r0Ar00         [16] 4429 	ld	(_spriteTileOffsets), hl
                                   4430 ;main.c:393: playerXOffset = 0xFFFE;
      0016DC 21 FE FF         [10] 4431 	ld	hl, #0xfffe
      0016DF 22r10r00         [16] 4432 	ld	(_playerXOffset), hl
                                   4433 ;main.c:394: scrollYOffset = 0;
      0016E2 21r0Dr00         [10] 4434 	ld	hl, #_scrollYOffset
      0016E5 36 00            [10] 4435 	ld	(hl), #0x00
                                   4436 ;main.c:395: playerYOffset = 0;
      0016E7 21 00 00         [10] 4437 	ld	hl, #0x0000
      0016EA 22r12r00         [16] 4438 	ld	(_playerYOffset), hl
                                   4439 ;main.c:396: spriteYOffset = 0;
      0016ED 3E 00            [ 7] 4440 	ld	a, #0x00
      0016EF 32r0Fr00         [13] 4441 	ld	(#_spriteYOffset), a
                                   4442 ;main.c:400: if (playerX <= 136 || playerX > GSL_getMapWidthInPixels() - 120)
      0016F2 3E 88            [ 7] 4443 	ld	a, #0x88
      0016F4 FD 21r00r00      [14] 4444 	ld	iy, #_playerX
      0016F8 FD BE 00         [19] 4445 	cp	a, 0 (iy)
      0016FB 3E 00            [ 7] 4446 	ld	a, #0x00
      0016FD FD 9E 01         [19] 4447 	sbc	a, 1 (iy)
      001700 30 19            [12] 4448 	jr	NC, 00104$
      001702 CDrD8r02         [17] 4449 	call	_GSL_getMapWidthInPixels
      001705 7D               [ 4] 4450 	ld	a, l
      001706 C6 88            [ 7] 4451 	add	a, #0x88
      001708 4F               [ 4] 4452 	ld	c, a
      001709 7C               [ 4] 4453 	ld	a, h
      00170A CE FF            [ 7] 4454 	adc	a, #0xff
      00170C 47               [ 4] 4455 	ld	b, a
      00170D 79               [ 4] 4456 	ld	a, c
      00170E FD 21r00r00      [14] 4457 	ld	iy, #_playerX
      001712 FD 96 00         [19] 4458 	sub	a, 0 (iy)
      001715 78               [ 4] 4459 	ld	a, b
      001716 FD 9E 01         [19] 4460 	sbc	a, 1 (iy)
      001719 30 0B            [12] 4461 	jr	NC, 00105$
      00171B                       4462 00104$:
                                   4463 ;main.c:402: spriteXOffset = 0xFE;
      00171B 3E FE            [ 7] 4464 	ld	a, #0xfe
      00171D 32r0Er00         [13] 4465 	ld	(#_spriteXOffset), a
                                   4466 ;main.c:403: scrollXOffset = 0;
      001720 3E 00            [ 7] 4467 	ld	a, #0x00
      001722 32r0Cr00         [13] 4468 	ld	(#_scrollXOffset), a
      001725 C9               [10] 4469 	ret
      001726                       4470 00105$:
                                   4471 ;main.c:407: spriteXOffset = 0;
      001726 3E 00            [ 7] 4472 	ld	a, #0x00
      001728 32r0Er00         [13] 4473 	ld	(#_spriteXOffset), a
                                   4474 ;main.c:408: scrollXOffset = 0xFE;
      00172B 3E FE            [ 7] 4475 	ld	a, #0xfe
      00172D 32r0Cr00         [13] 4476 	ld	(#_scrollXOffset), a
                                   4477 ;main.c:410: }
      001730 C9               [10] 4478 	ret
                                   4479 ;main.c:414: void processRightKey()
                                   4480 ;	---------------------------------
                                   4481 ; Function processRightKey
                                   4482 ; ---------------------------------
      001731                       4483 _processRightKey::
                                   4484 ;main.c:418: unsigned char lowerRightMetatile = *(GSL_metatileLookup(playerX + 8, playerY));
      001731 FD 21r00r00      [14] 4485 	ld	iy, #_playerX
      001735 FD 7E 00         [19] 4486 	ld	a, 0 (iy)
      001738 C6 08            [ 7] 4487 	add	a, #0x08
      00173A 4F               [ 4] 4488 	ld	c, a
      00173B FD 7E 01         [19] 4489 	ld	a, 1 (iy)
      00173E CE 00            [ 7] 4490 	adc	a, #0x00
      001740 47               [ 4] 4491 	ld	b, a
      001741 2Ar02r00         [16] 4492 	ld	hl, (_playerY)
      001744 E5               [11] 4493 	push	hl
      001745 C5               [11] 4494 	push	bc
      001746 CDr82r02         [17] 4495 	call	_GSL_metatileLookup
      001749 F1               [10] 4496 	pop	af
      00174A F1               [10] 4497 	pop	af
      00174B 4E               [ 7] 4498 	ld	c, (hl)
                                   4499 ;main.c:421: if (playerX == GSL_getMapWidthInPixels() - 8 || (metatilesMetaLUT[lowerRightMetatile] & 1) == 0)
      00174C C5               [11] 4500 	push	bc
      00174D CDrD8r02         [17] 4501 	call	_GSL_getMapWidthInPixels
      001750 C1               [10] 4502 	pop	bc
      001751 11 F8 FF         [10] 4503 	ld	de, #0xfff8
      001754 19               [11] 4504 	add	hl, de
      001755 EB               [ 4] 4505 	ex	de,hl
                                   4506 ;main.c:426: animationCount = (animationCount - 1) & 3;
      001756 3Ar06r00         [13] 4507 	ld	a,(#_animationCount + 0)
      001759 3D               [ 4] 4508 	dec	a
      00175A E6 03            [ 7] 4509 	and	a, #0x03
      00175C 47               [ 4] 4510 	ld	b, a
                                   4511 ;main.c:421: if (playerX == GSL_getMapWidthInPixels() - 8 || (metatilesMetaLUT[lowerRightMetatile] & 1) == 0)
      00175D 2Ar00r00         [16] 4512 	ld	hl, (_playerX)
      001760 BF               [ 4] 4513 	cp	a, a
      001761 ED 52            [15] 4514 	sbc	hl, de
      001763 28 0B            [12] 4515 	jr	Z, 00101$
      001765 11r82r01         [10] 4516 	ld	de, #_metatilesMetaLUT+0
      001768 69               [ 4] 4517 	ld	l, c
      001769 26 00            [ 7] 4518 	ld	h, #0x00
      00176B 19               [11] 4519 	add	hl, de
      00176C 7E               [ 7] 4520 	ld	a, (hl)
      00176D 0F               [ 4] 4521 	rrca
      00176E 38 36            [12] 4522 	jr	C, 00102$
      001770                       4523 00101$:
                                   4524 ;main.c:424: action = ACTION_MOVE;
      001770 21r08r00         [10] 4525 	ld	hl, #_action
      001773 36 00            [10] 4526 	ld	(hl), #0x00
                                   4527 ;main.c:425: direction = DIRECTION_RIGHT;
      001775 21r14r00         [10] 4528 	ld	hl, #_direction
      001778 36 03            [10] 4529 	ld	(hl), #0x03
                                   4530 ;main.c:426: animationCount = (animationCount - 1) & 3;
      00177A 21r06r00         [10] 4531 	ld	hl, #_animationCount
      00177D 70               [ 7] 4532 	ld	(hl), b
                                   4533 ;main.c:427: actionCount = 4;
      00177E 21r07r00         [10] 4534 	ld	hl, #_actionCount
      001781 36 04            [10] 4535 	ld	(hl), #0x04
                                   4536 ;main.c:428: spriteTileOffsets = spriteMoveRight;
      001783 21r22r00         [10] 4537 	ld	hl, #_spriteMoveRight+0
      001786 22r0Ar00         [16] 4538 	ld	(_spriteTileOffsets), hl
                                   4539 ;main.c:430: scrollXOffset = 0;
      001789 21r0Cr00         [10] 4540 	ld	hl, #_scrollXOffset
      00178C 36 00            [10] 4541 	ld	(hl), #0x00
                                   4542 ;main.c:431: scrollYOffset = 0;
      00178E 21r0Dr00         [10] 4543 	ld	hl, #_scrollYOffset
      001791 36 00            [10] 4544 	ld	(hl), #0x00
                                   4545 ;main.c:432: playerXOffset = 0;
      001793 21 00 00         [10] 4546 	ld	hl, #0x0000
      001796 22r10r00         [16] 4547 	ld	(_playerXOffset), hl
                                   4548 ;main.c:433: playerYOffset = 0;
      001799 6C               [ 4] 4549 	ld	l, h
      00179A 22r12r00         [16] 4550 	ld	(_playerYOffset), hl
                                   4551 ;main.c:434: spriteXOffset = 0;
                                   4552 ;main.c:435: spriteYOffset = 0;
      00179D 3E 00            [ 7] 4553 	ld	a,#0x00
      00179F 32r0Er00         [13] 4554 	ld	(#_spriteXOffset),a
      0017A2 32r0Fr00         [13] 4555 	ld	(#_spriteYOffset), a
                                   4556 ;main.c:437: return;
      0017A5 C9               [10] 4557 	ret
      0017A6                       4558 00102$:
                                   4559 ;main.c:441: action = ACTION_MOVE;
      0017A6 21r08r00         [10] 4560 	ld	hl, #_action
      0017A9 36 00            [10] 4561 	ld	(hl), #0x00
                                   4562 ;main.c:442: direction = DIRECTION_RIGHT;
      0017AB 21r14r00         [10] 4563 	ld	hl, #_direction
      0017AE 36 03            [10] 4564 	ld	(hl), #0x03
                                   4565 ;main.c:443: animationCount = (animationCount - 1) & 3;
      0017B0 21r06r00         [10] 4566 	ld	hl, #_animationCount
      0017B3 70               [ 7] 4567 	ld	(hl), b
                                   4568 ;main.c:444: actionCount = 4;
      0017B4 21r07r00         [10] 4569 	ld	hl, #_actionCount
      0017B7 36 04            [10] 4570 	ld	(hl), #0x04
                                   4571 ;main.c:445: spriteTileOffsets = spriteMoveRight;
      0017B9 21r22r00         [10] 4572 	ld	hl, #_spriteMoveRight+0
      0017BC 22r0Ar00         [16] 4573 	ld	(_spriteTileOffsets), hl
                                   4574 ;main.c:447: playerXOffset = 2;
      0017BF 21 02 00         [10] 4575 	ld	hl, #0x0002
      0017C2 22r10r00         [16] 4576 	ld	(_playerXOffset), hl
                                   4577 ;main.c:448: scrollYOffset = 0;
      0017C5 FD 21r0Dr00      [14] 4578 	ld	iy, #_scrollYOffset
      0017C9 FD 36 00 00      [19] 4579 	ld	0 (iy), #0x00
                                   4580 ;main.c:449: playerYOffset = 0; 
      0017CD 6C               [ 4] 4581 	ld	l, h
      0017CE 22r12r00         [16] 4582 	ld	(_playerYOffset), hl
                                   4583 ;main.c:450: spriteYOffset = 0;
      0017D1 3E 00            [ 7] 4584 	ld	a, #0x00
      0017D3 32r0Fr00         [13] 4585 	ld	(#_spriteYOffset), a
                                   4586 ;main.c:454: if (playerX < 136 || playerX >= GSL_getMapWidthInPixels() - 120)
      0017D6 FD 21r00r00      [14] 4587 	ld	iy, #_playerX
      0017DA FD 7E 00         [19] 4588 	ld	a, 0 (iy)
      0017DD D6 88            [ 7] 4589 	sub	a, #0x88
      0017DF FD 7E 01         [19] 4590 	ld	a, 1 (iy)
      0017E2 DE 00            [ 7] 4591 	sbc	a, #0x00
      0017E4 38 11            [12] 4592 	jr	C, 00104$
      0017E6 CDrD8r02         [17] 4593 	call	_GSL_getMapWidthInPixels
      0017E9 01 88 FF         [10] 4594 	ld	bc, #0xff88
      0017EC 09               [11] 4595 	add	hl,bc
      0017ED 4D               [ 4] 4596 	ld	c, l
      0017EE 44               [ 4] 4597 	ld	b, h
      0017EF 2Ar00r00         [16] 4598 	ld	hl, (_playerX)
      0017F2 AF               [ 4] 4599 	xor	a, a
      0017F3 ED 42            [15] 4600 	sbc	hl, bc
      0017F5 38 0B            [12] 4601 	jr	C, 00105$
      0017F7                       4602 00104$:
                                   4603 ;main.c:456: spriteXOffset = 2;
      0017F7 3E 02            [ 7] 4604 	ld	a, #0x02
      0017F9 32r0Er00         [13] 4605 	ld	(#_spriteXOffset), a
                                   4606 ;main.c:457: scrollXOffset = 0;
      0017FC 3E 00            [ 7] 4607 	ld	a, #0x00
      0017FE 32r0Cr00         [13] 4608 	ld	(#_scrollXOffset), a
      001801 C9               [10] 4609 	ret
      001802                       4610 00105$:
                                   4611 ;main.c:461: spriteXOffset = 0;
      001802 3E 00            [ 7] 4612 	ld	a, #0x00
      001804 32r0Er00         [13] 4613 	ld	(#_spriteXOffset), a
                                   4614 ;main.c:462: scrollXOffset = 2;
      001807 3E 02            [ 7] 4615 	ld	a, #0x02
      001809 32r0Cr00         [13] 4616 	ld	(#_scrollXOffset), a
                                   4617 ;main.c:464: }
      00180C C9               [10] 4618 	ret
                                   4619 ;main.c:467: void processAttackKey()
                                   4620 ;	---------------------------------
                                   4621 ; Function processAttackKey
                                   4622 ; ---------------------------------
      00180D                       4623 _processAttackKey::
                                   4624 ;main.c:470: actionButtonWatch = 1;
      00180D 3E 01            [ 7] 4625 	ld	a, #0x01
      00180F 32r09r00         [13] 4626 	ld	(#_actionButtonWatch), a
                                   4627 ;main.c:474: switch (direction)
      001812 FD 21r14r00      [14] 4628 	ld	iy, #_direction
      001816 FD 7E 00         [19] 4629 	ld	a, 0 (iy)
      001819 B7               [ 4] 4630 	or	a, a
      00181A 28 16            [12] 4631 	jr	Z, 00101$
      00181C FD 7E 00         [19] 4632 	ld	a, 0 (iy)
      00181F 3D               [ 4] 4633 	dec	a
      001820 28 1E            [12] 4634 	jr	Z, 00102$
      001822 FD 7E 00         [19] 4635 	ld	a, 0 (iy)
      001825 D6 02            [ 7] 4636 	sub	a, #0x02
      001827 28 25            [12] 4637 	jr	Z, 00103$
      001829 FD 7E 00         [19] 4638 	ld	a, 0 (iy)
      00182C D6 03            [ 7] 4639 	sub	a, #0x03
      00182E 28 2C            [12] 4640 	jr	Z, 00104$
      001830 18 36            [12] 4641 	jr	00105$
                                   4642 ;main.c:476: case DIRECTION_UP:
      001832                       4643 00101$:
                                   4644 ;main.c:477: attackSprites = spriteAttackUpMeta;
      001832 21r52r00         [10] 4645 	ld	hl, #_spriteAttackUpMeta+0
      001835 22r2Cr01         [16] 4646 	ld	(_attackSprites), hl
                                   4647 ;main.c:478: spriteTileOffsets = spriteAttackUp;
      001838 21r2Ar00         [10] 4648 	ld	hl, #_spriteAttackUp+0
      00183B 22r0Ar00         [16] 4649 	ld	(_spriteTileOffsets), hl
                                   4650 ;main.c:479: break;
      00183E 18 28            [12] 4651 	jr	00105$
                                   4652 ;main.c:481: case DIRECTION_DOWN:
      001840                       4653 00102$:
                                   4654 ;main.c:482: attackSprites = spriteAttackDownMeta;
      001840 21r9Er00         [10] 4655 	ld	hl, #_spriteAttackDownMeta+0
      001843 22r2Cr01         [16] 4656 	ld	(_attackSprites), hl
                                   4657 ;main.c:483: spriteTileOffsets = spriteAttackDown;
      001846 21r34r00         [10] 4658 	ld	hl, #_spriteAttackDown+0
      001849 22r0Ar00         [16] 4659 	ld	(_spriteTileOffsets), hl
                                   4660 ;main.c:484: break;
      00184C 18 1A            [12] 4661 	jr	00105$
                                   4662 ;main.c:486: case DIRECTION_LEFT: 
      00184E                       4663 00103$:
                                   4664 ;main.c:487: attackSprites = spriteAttackLeftMeta;
      00184E 21rEAr00         [10] 4665 	ld	hl, #_spriteAttackLeftMeta+0
      001851 22r2Cr01         [16] 4666 	ld	(_attackSprites), hl
                                   4667 ;main.c:488: spriteTileOffsets = spriteAttackLeft;
      001854 21r3Er00         [10] 4668 	ld	hl, #_spriteAttackLeft+0
      001857 22r0Ar00         [16] 4669 	ld	(_spriteTileOffsets), hl
                                   4670 ;main.c:489: break;
      00185A 18 0C            [12] 4671 	jr	00105$
                                   4672 ;main.c:491: case DIRECTION_RIGHT:
      00185C                       4673 00104$:
                                   4674 ;main.c:492: attackSprites = spriteAttackRightMeta;
      00185C 21r36r01         [10] 4675 	ld	hl, #_spriteAttackRightMeta+0
      00185F 22r2Cr01         [16] 4676 	ld	(_attackSprites), hl
                                   4677 ;main.c:493: spriteTileOffsets = spriteAttackRight;
      001862 21r48r00         [10] 4678 	ld	hl, #_spriteAttackRight+0
      001865 22r0Ar00         [16] 4679 	ld	(_spriteTileOffsets), hl
                                   4680 ;main.c:495: }
      001868                       4681 00105$:
                                   4682 ;main.c:498: actionCount = 9;
      001868 3E 09            [ 7] 4683 	ld	a, #0x09
      00186A 32r07r00         [13] 4684 	ld	(#_actionCount), a
                                   4685 ;main.c:499: animationCount = 0;
                                   4686 ;main.c:500: scrollXOffset = 0;
      00186D 3E 00            [ 7] 4687 	ld	a,#0x00
      00186F 32r06r00         [13] 4688 	ld	(#_animationCount),a
      001872 32r0Cr00         [13] 4689 	ld	(#_scrollXOffset), a
                                   4690 ;main.c:501: scrollYOffset = 0;
      001875 3E 00            [ 7] 4691 	ld	a, #0x00
      001877 32r0Dr00         [13] 4692 	ld	(#_scrollYOffset), a
                                   4693 ;main.c:502: action = ACTION_ATTACK;
      00187A 3E 01            [ 7] 4694 	ld	a, #0x01
      00187C 32r08r00         [13] 4695 	ld	(#_action), a
                                   4696 ;main.c:504: }
      00187F C9               [10] 4697 	ret
                                   4698 ;main.c:515: void checkForAttackInteraction()
                                   4699 ;	---------------------------------
                                   4700 ; Function checkForAttackInteraction
                                   4701 ; ---------------------------------
      001880                       4702 _checkForAttackInteraction::
                                   4703 ;main.c:521: metatile = GSL_metatileLookup(playerX - 8, playerY - 1);
      001880 FD 21r00r00      [14] 4704 	ld	iy, #_playerX
      001884 FD 7E 00         [19] 4705 	ld	a, 0 (iy)
      001887 C6 F8            [ 7] 4706 	add	a, #0xf8
      001889 4F               [ 4] 4707 	ld	c, a
      00188A FD 7E 01         [19] 4708 	ld	a, 1 (iy)
      00188D CE FF            [ 7] 4709 	adc	a, #0xff
      00188F 47               [ 4] 4710 	ld	b, a
                                   4711 ;main.c:520: if (direction == DIRECTION_UP) 
      001890 3Ar14r00         [13] 4712 	ld	a,(#_direction + 0)
      001893 B7               [ 4] 4713 	or	a, a
      001894 20 0E            [12] 4714 	jr	NZ, 00108$
                                   4715 ;main.c:521: metatile = GSL_metatileLookup(playerX - 8, playerY - 1);
      001896 ED 5Br02r00      [20] 4716 	ld	de, (_playerY)
      00189A 1B               [ 6] 4717 	dec	de
      00189B D5               [11] 4718 	push	de
      00189C C5               [11] 4719 	push	bc
      00189D CDr82r02         [17] 4720 	call	_GSL_metatileLookup
      0018A0 F1               [10] 4721 	pop	af
      0018A1 F1               [10] 4722 	pop	af
      0018A2 18 54            [12] 4723 	jr	00109$
      0018A4                       4724 00108$:
                                   4725 ;main.c:522: else if (direction == DIRECTION_DOWN) 
      0018A4 3Ar14r00         [13] 4726 	ld	a,(#_direction + 0)
      0018A7 3D               [ 4] 4727 	dec	a
      0018A8 20 10            [12] 4728 	jr	NZ, 00105$
                                   4729 ;main.c:523: metatile = GSL_metatileLookup(playerX - 8, playerY + 8);
      0018AA 2Ar02r00         [16] 4730 	ld	hl, (_playerY)
      0018AD 11 08 00         [10] 4731 	ld	de, #0x0008
      0018B0 19               [11] 4732 	add	hl, de
      0018B1 E5               [11] 4733 	push	hl
      0018B2 C5               [11] 4734 	push	bc
      0018B3 CDr82r02         [17] 4735 	call	_GSL_metatileLookup
      0018B6 F1               [10] 4736 	pop	af
      0018B7 F1               [10] 4737 	pop	af
      0018B8 18 3E            [12] 4738 	jr	00109$
      0018BA                       4739 00105$:
                                   4740 ;main.c:525: metatile = GSL_metatileLookup(playerX - 9, playerY - 8);
      0018BA FD 21r02r00      [14] 4741 	ld	iy, #_playerY
      0018BE FD 7E 00         [19] 4742 	ld	a, 0 (iy)
      0018C1 C6 F8            [ 7] 4743 	add	a, #0xf8
      0018C3 4F               [ 4] 4744 	ld	c, a
      0018C4 FD 7E 01         [19] 4745 	ld	a, 1 (iy)
      0018C7 CE FF            [ 7] 4746 	adc	a, #0xff
      0018C9 47               [ 4] 4747 	ld	b, a
                                   4748 ;main.c:524: else if (direction == DIRECTION_LEFT) 
      0018CA 3Ar14r00         [13] 4749 	ld	a,(#_direction + 0)
      0018CD D6 02            [ 7] 4750 	sub	a, #0x02
      0018CF 20 19            [12] 4751 	jr	NZ, 00102$
                                   4752 ;main.c:525: metatile = GSL_metatileLookup(playerX - 9, playerY - 8);
      0018D1 FD 21r00r00      [14] 4753 	ld	iy, #_playerX
      0018D5 FD 7E 00         [19] 4754 	ld	a, 0 (iy)
      0018D8 C6 F7            [ 7] 4755 	add	a, #0xf7
      0018DA 5F               [ 4] 4756 	ld	e, a
      0018DB FD 7E 01         [19] 4757 	ld	a, 1 (iy)
      0018DE CE FF            [ 7] 4758 	adc	a, #0xff
      0018E0 57               [ 4] 4759 	ld	d, a
      0018E1 C5               [11] 4760 	push	bc
      0018E2 D5               [11] 4761 	push	de
      0018E3 CDr82r02         [17] 4762 	call	_GSL_metatileLookup
      0018E6 F1               [10] 4763 	pop	af
      0018E7 F1               [10] 4764 	pop	af
      0018E8 18 0E            [12] 4765 	jr	00109$
      0018EA                       4766 00102$:
                                   4767 ;main.c:526: else metatile = GSL_metatileLookup(playerX + 8, playerY - 8);
      0018EA 2Ar00r00         [16] 4768 	ld	hl, (_playerX)
      0018ED 11 08 00         [10] 4769 	ld	de, #0x0008
      0018F0 19               [11] 4770 	add	hl, de
      0018F1 C5               [11] 4771 	push	bc
      0018F2 E5               [11] 4772 	push	hl
      0018F3 CDr82r02         [17] 4773 	call	_GSL_metatileLookup
      0018F6 F1               [10] 4774 	pop	af
      0018F7 F1               [10] 4775 	pop	af
      0018F8                       4776 00109$:
                                   4777 ;main.c:527: processAttackInteraction(metatile);
      0018F8 E5               [11] 4778 	push	hl
      0018F9 CDr7Br19         [17] 4779 	call	_processAttackInteraction
      0018FC F1               [10] 4780 	pop	af
                                   4781 ;main.c:531: metatile = GSL_metatileLookup(playerX + 7, playerY - 1);
      0018FD FD 21r00r00      [14] 4782 	ld	iy, #_playerX
      001901 FD 7E 00         [19] 4783 	ld	a, 0 (iy)
      001904 C6 07            [ 7] 4784 	add	a, #0x07
      001906 4F               [ 4] 4785 	ld	c, a
      001907 FD 7E 01         [19] 4786 	ld	a, 1 (iy)
      00190A CE 00            [ 7] 4787 	adc	a, #0x00
      00190C 47               [ 4] 4788 	ld	b, a
                                   4789 ;main.c:530: if (direction == DIRECTION_UP) 
      00190D 3Ar14r00         [13] 4790 	ld	a,(#_direction + 0)
      001910 B7               [ 4] 4791 	or	a, a
      001911 20 0E            [12] 4792 	jr	NZ, 00117$
                                   4793 ;main.c:531: metatile = GSL_metatileLookup(playerX + 7, playerY - 1);
      001913 ED 5Br02r00      [20] 4794 	ld	de, (_playerY)
      001917 1B               [ 6] 4795 	dec	de
      001918 D5               [11] 4796 	push	de
      001919 C5               [11] 4797 	push	bc
      00191A CDr82r02         [17] 4798 	call	_GSL_metatileLookup
      00191D F1               [10] 4799 	pop	af
      00191E F1               [10] 4800 	pop	af
      00191F 18 54            [12] 4801 	jr	00118$
      001921                       4802 00117$:
                                   4803 ;main.c:532: else if (direction == DIRECTION_DOWN) 
      001921 3Ar14r00         [13] 4804 	ld	a,(#_direction + 0)
      001924 3D               [ 4] 4805 	dec	a
      001925 20 10            [12] 4806 	jr	NZ, 00114$
                                   4807 ;main.c:533: metatile = GSL_metatileLookup(playerX + 7, playerY + 8);
      001927 2Ar02r00         [16] 4808 	ld	hl, (_playerY)
      00192A 11 08 00         [10] 4809 	ld	de, #0x0008
      00192D 19               [11] 4810 	add	hl, de
      00192E E5               [11] 4811 	push	hl
      00192F C5               [11] 4812 	push	bc
      001930 CDr82r02         [17] 4813 	call	_GSL_metatileLookup
      001933 F1               [10] 4814 	pop	af
      001934 F1               [10] 4815 	pop	af
      001935 18 3E            [12] 4816 	jr	00118$
      001937                       4817 00114$:
                                   4818 ;main.c:535: metatile = GSL_metatileLookup(playerX - 9, playerY + 7);
      001937 FD 21r02r00      [14] 4819 	ld	iy, #_playerY
      00193B FD 7E 00         [19] 4820 	ld	a, 0 (iy)
      00193E C6 07            [ 7] 4821 	add	a, #0x07
      001940 4F               [ 4] 4822 	ld	c, a
      001941 FD 7E 01         [19] 4823 	ld	a, 1 (iy)
      001944 CE 00            [ 7] 4824 	adc	a, #0x00
      001946 47               [ 4] 4825 	ld	b, a
                                   4826 ;main.c:534: else if (direction == DIRECTION_LEFT) 
      001947 3Ar14r00         [13] 4827 	ld	a,(#_direction + 0)
      00194A D6 02            [ 7] 4828 	sub	a, #0x02
      00194C 20 19            [12] 4829 	jr	NZ, 00111$
                                   4830 ;main.c:535: metatile = GSL_metatileLookup(playerX - 9, playerY + 7);
      00194E FD 21r00r00      [14] 4831 	ld	iy, #_playerX
      001952 FD 7E 00         [19] 4832 	ld	a, 0 (iy)
      001955 C6 F7            [ 7] 4833 	add	a, #0xf7
      001957 5F               [ 4] 4834 	ld	e, a
      001958 FD 7E 01         [19] 4835 	ld	a, 1 (iy)
      00195B CE FF            [ 7] 4836 	adc	a, #0xff
      00195D 57               [ 4] 4837 	ld	d, a
      00195E C5               [11] 4838 	push	bc
      00195F D5               [11] 4839 	push	de
      001960 CDr82r02         [17] 4840 	call	_GSL_metatileLookup
      001963 F1               [10] 4841 	pop	af
      001964 F1               [10] 4842 	pop	af
      001965 18 0E            [12] 4843 	jr	00118$
      001967                       4844 00111$:
                                   4845 ;main.c:536: else metatile = GSL_metatileLookup(playerX + 8, playerY + 7);
      001967 2Ar00r00         [16] 4846 	ld	hl, (_playerX)
      00196A 11 08 00         [10] 4847 	ld	de, #0x0008
      00196D 19               [11] 4848 	add	hl, de
      00196E C5               [11] 4849 	push	bc
      00196F E5               [11] 4850 	push	hl
      001970 CDr82r02         [17] 4851 	call	_GSL_metatileLookup
      001973 F1               [10] 4852 	pop	af
      001974 F1               [10] 4853 	pop	af
      001975                       4854 00118$:
                                   4855 ;main.c:537: processAttackInteraction(metatile);
      001975 E5               [11] 4856 	push	hl
      001976 CDr7Br19         [17] 4857 	call	_processAttackInteraction
      001979 F1               [10] 4858 	pop	af
                                   4859 ;main.c:538: }
      00197A C9               [10] 4860 	ret
                                   4861 ;main.c:551: void processAttackInteraction(unsigned char * metatile)
                                   4862 ;	---------------------------------
                                   4863 ; Function processAttackInteraction
                                   4864 ; ---------------------------------
      00197B                       4865 _processAttackInteraction::
      00197B DD E5            [15] 4866 	push	ix
      00197D DD 21 00 00      [14] 4867 	ld	ix,#0
      001981 DD 39            [15] 4868 	add	ix,sp
                                   4869 ;main.c:563: if (*metatile == METATILE_GREEN_TREE)
      001983 DD 4E 04         [19] 4870 	ld	c, 4 (ix)
      001986 DD 46 05         [19] 4871 	ld	b, 5 (ix)
      001989 0A               [ 7] 4872 	ld	a, (bc)
      00198A D6 11            [ 7] 4873 	sub	a, #0x11
      00198C 20 08            [12] 4874 	jr	NZ, 00102$
                                   4875 ;main.c:566: *metatile = METATILE_TREE_STUMP;
      00198E 3E 38            [ 7] 4876 	ld	a, #0x38
      001990 02               [ 7] 4877 	ld	(bc), a
                                   4878 ;main.c:569: GSL_metatileUpdate();
      001991 C5               [11] 4879 	push	bc
      001992 CDrBAr02         [17] 4880 	call	_GSL_metatileUpdate
      001995 C1               [10] 4881 	pop	bc
      001996                       4882 00102$:
                                   4883 ;main.c:574: if (*metatile == METATILE_CUT_CACTUS) 
      001996 0A               [ 7] 4884 	ld	a, (bc)
      001997 D6 90            [ 7] 4885 	sub	a, #0x90
      001999 20 08            [12] 4886 	jr	NZ, 00104$
                                   4887 ;main.c:577: *metatile = METATILE_SAND; 
      00199B 3E B0            [ 7] 4888 	ld	a, #0xb0
      00199D 02               [ 7] 4889 	ld	(bc), a
                                   4890 ;main.c:580: GSL_metatileUpdate();
      00199E C5               [11] 4891 	push	bc
      00199F CDrBAr02         [17] 4892 	call	_GSL_metatileUpdate
      0019A2 C1               [10] 4893 	pop	bc
      0019A3                       4894 00104$:
                                   4895 ;main.c:594: if (*metatile == METATILE_INTERACTIVE_TOMBSTONE_1)
      0019A3 0A               [ 7] 4896 	ld	a, (bc)
      0019A4 D6 78            [ 7] 4897 	sub	a, #0x78
      0019A6 20 43            [12] 4898 	jr	NZ, 00106$
                                   4899 ;main.c:599: *metatile = METATILE_TOMBSTONE; 
      0019A8 3E A9            [ 7] 4900 	ld	a, #0xa9
      0019AA 02               [ 7] 4901 	ld	(bc), a
                                   4902 ;main.c:605: *(GSL_getScrolltableAddress() + (51*64 + 28)) = METATILE_GRASS;
      0019AB C5               [11] 4903 	push	bc
      0019AC CDrF9r02         [17] 4904 	call	_GSL_getScrolltableAddress
      0019AF C1               [10] 4905 	pop	bc
      0019B0 11 DC 0C         [10] 4906 	ld	de, #0x0cdc
      0019B3 19               [11] 4907 	add	hl, de
      0019B4 36 59            [10] 4908 	ld	(hl), #0x59
                                   4909 ;main.c:609: GSL_metatileUpdateCustom(448, 816, (51*64 + 28));
      0019B6 C5               [11] 4910 	push	bc
      0019B7 21 DC 0C         [10] 4911 	ld	hl, #0x0cdc
      0019BA E5               [11] 4912 	push	hl
      0019BB 21 30 03         [10] 4913 	ld	hl, #0x0330
      0019BE E5               [11] 4914 	push	hl
      0019BF 21 C0 01         [10] 4915 	ld	hl, #0x01c0
      0019C2 E5               [11] 4916 	push	hl
      0019C3 CDrBEr02         [17] 4917 	call	_GSL_metatileUpdateCustom
      0019C6 21 06 00         [10] 4918 	ld	hl, #6
      0019C9 39               [11] 4919 	add	hl, sp
      0019CA F9               [ 6] 4920 	ld	sp, hl
      0019CB CDrF9r02         [17] 4921 	call	_GSL_getScrolltableAddress
      0019CE C1               [10] 4922 	pop	bc
      0019CF 11 DD 0C         [10] 4923 	ld	de, #0x0cdd
      0019D2 19               [11] 4924 	add	hl, de
      0019D3 36 59            [10] 4925 	ld	(hl), #0x59
                                   4926 ;main.c:613: GSL_metatileUpdateCustom(464, 816, (51*64 + 29));
      0019D5 C5               [11] 4927 	push	bc
      0019D6 21 DD 0C         [10] 4928 	ld	hl, #0x0cdd
      0019D9 E5               [11] 4929 	push	hl
      0019DA 21 30 03         [10] 4930 	ld	hl, #0x0330
      0019DD E5               [11] 4931 	push	hl
      0019DE 21 D0 01         [10] 4932 	ld	hl, #0x01d0
      0019E1 E5               [11] 4933 	push	hl
      0019E2 CDrBEr02         [17] 4934 	call	_GSL_metatileUpdateCustom
      0019E5 21 06 00         [10] 4935 	ld	hl, #6
      0019E8 39               [11] 4936 	add	hl, sp
      0019E9 F9               [ 6] 4937 	ld	sp, hl
      0019EA C1               [10] 4938 	pop	bc
      0019EB                       4939 00106$:
                                   4940 ;main.c:618: if (*metatile == METATILE_INTERACTIVE_TOMBSTONE_2)
      0019EB 0A               [ 7] 4941 	ld	a, (bc)
      0019EC D6 91            [ 7] 4942 	sub	a, #0x91
      0019EE 20 59            [12] 4943 	jr	NZ, 00109$
                                   4944 ;main.c:621: *metatile = METATILE_TOMBSTONE; 
      0019F0 3E A9            [ 7] 4945 	ld	a, #0xa9
      0019F2 02               [ 7] 4946 	ld	(bc), a
                                   4947 ;main.c:624: *(GSL_getScrolltableAddress() + (43*64 + 28)) = METATILE_VERTICAL_BRIDGE;
      0019F3 CDrF9r02         [17] 4948 	call	_GSL_getScrolltableAddress
      0019F6 01 DC 0A         [10] 4949 	ld	bc, #0x0adc
      0019F9 09               [11] 4950 	add	hl, bc
      0019FA 36 10            [10] 4951 	ld	(hl), #0x10
                                   4952 ;main.c:625: GSL_metatileUpdateCustom(448, 688, (43*64 + 28));
      0019FC 21 DC 0A         [10] 4953 	ld	hl, #0x0adc
      0019FF E5               [11] 4954 	push	hl
      001A00 21 B0 02         [10] 4955 	ld	hl, #0x02b0
      001A03 E5               [11] 4956 	push	hl
      001A04 21 C0 01         [10] 4957 	ld	hl, #0x01c0
      001A07 E5               [11] 4958 	push	hl
      001A08 CDrBEr02         [17] 4959 	call	_GSL_metatileUpdateCustom
      001A0B 21 06 00         [10] 4960 	ld	hl, #6
      001A0E 39               [11] 4961 	add	hl, sp
      001A0F F9               [ 6] 4962 	ld	sp, hl
                                   4963 ;main.c:627: *(GSL_getScrolltableAddress() + (44*64 + 28)) = METATILE_VERTICAL_BRIDGE;
      001A10 CDrF9r02         [17] 4964 	call	_GSL_getScrolltableAddress
      001A13 01 1C 0B         [10] 4965 	ld	bc, #0x0b1c
      001A16 09               [11] 4966 	add	hl, bc
      001A17 36 10            [10] 4967 	ld	(hl), #0x10
                                   4968 ;main.c:628: GSL_metatileUpdateCustom(448, 704, (44*64 + 28));
      001A19 21 1C 0B         [10] 4969 	ld	hl, #0x0b1c
      001A1C E5               [11] 4970 	push	hl
      001A1D 21 C0 02         [10] 4971 	ld	hl, #0x02c0
      001A20 E5               [11] 4972 	push	hl
      001A21 26 01            [ 7] 4973 	ld	h, #0x01
      001A23 E5               [11] 4974 	push	hl
      001A24 CDrBEr02         [17] 4975 	call	_GSL_metatileUpdateCustom
      001A27 21 06 00         [10] 4976 	ld	hl, #6
      001A2A 39               [11] 4977 	add	hl, sp
      001A2B F9               [ 6] 4978 	ld	sp, hl
                                   4979 ;main.c:630: *(GSL_getScrolltableAddress() + (45*64 + 28)) = METATILE_VERTICAL_BRIDGE;
      001A2C CDrF9r02         [17] 4980 	call	_GSL_getScrolltableAddress
      001A2F 01 5C 0B         [10] 4981 	ld	bc, #0x0b5c
      001A32 09               [11] 4982 	add	hl, bc
      001A33 36 10            [10] 4983 	ld	(hl), #0x10
                                   4984 ;main.c:631: GSL_metatileUpdateCustom(448, 720, (45*64 + 28));
      001A35 21 5C 0B         [10] 4985 	ld	hl, #0x0b5c
      001A38 E5               [11] 4986 	push	hl
      001A39 21 D0 02         [10] 4987 	ld	hl, #0x02d0
      001A3C E5               [11] 4988 	push	hl
      001A3D 21 C0 01         [10] 4989 	ld	hl, #0x01c0
      001A40 E5               [11] 4990 	push	hl
      001A41 CDrBEr02         [17] 4991 	call	_GSL_metatileUpdateCustom
      001A44 21 06 00         [10] 4992 	ld	hl, #6
      001A47 39               [11] 4993 	add	hl, sp
      001A48 F9               [ 6] 4994 	ld	sp, hl
      001A49                       4995 00109$:
                                   4996 ;main.c:633: }
      001A49 DD E1            [14] 4997 	pop	ix
      001A4B C9               [10] 4998 	ret
                                   4999 	.area _CODE
                                   5000 	.area _INITIALIZER
      000000                       5001 __xinit__playerX:
      000000 88 03                 5002 	.dw #0x0388
      000002                       5003 __xinit__playerY:
      000002 A0 03                 5004 	.dw #0x03a0
      000004                       5005 __xinit__playerSpriteX:
      000004 88                    5006 	.db #0x88	; 136
      000005                       5007 __xinit__playerSpriteY:
      000005 60                    5008 	.db #0x60	; 96
      000006                       5009 __xinit__animationCount:
      000006 00                    5010 	.db #0x00	; 0
      000007                       5011 __xinit__actionCount:
      000007 00                    5012 	.db #0x00	; 0
      000008                       5013 __xinit__action:
      000008 02                    5014 	.db #0x02	; 2
      000009                       5015 __xinit__actionButtonWatch:
      000009 00                    5016 	.db #0x00	; 0
      00000A                       5017 __xinit__spriteTileOffsets:
      00000Ar12r00                 5018 	.dw _spriteMoveDown
      00000C                       5019 __xinit__scrollXOffset:
      00000C 00                    5020 	.db #0x00	; 0
      00000D                       5021 __xinit__scrollYOffset:
      00000D 00                    5022 	.db #0x00	; 0
      00000E                       5023 __xinit__spriteXOffset:
      00000E 00                    5024 	.db #0x00	; 0
      00000F                       5025 __xinit__spriteYOffset:
      00000F 00                    5026 	.db #0x00	; 0
      000010                       5027 __xinit__playerXOffset:
      000010 00 00                 5028 	.dw #0x0000
      000012                       5029 __xinit__playerYOffset:
      000012 00 00                 5030 	.dw #0x0000
      000014                       5031 __xinit__direction:
      000014 01                    5032 	.db #0x01	; 1
                                   5033 	.area _CABS (ABS)
      007FF0                       5034 	.org 0x7FF0
      007FF0                       5035 ___SMS__SEGA_signature:
      007FF0 54                    5036 	.db #0x54	; 84	'T'
      007FF1 4D                    5037 	.db #0x4d	; 77	'M'
      007FF2 52                    5038 	.db #0x52	; 82	'R'
      007FF3 20                    5039 	.db #0x20	; 32
      007FF4 53                    5040 	.db #0x53	; 83	'S'
      007FF5 45                    5041 	.db #0x45	; 69	'E'
      007FF6 47                    5042 	.db #0x47	; 71	'G'
      007FF7 41                    5043 	.db #0x41	; 65	'A'
      007FF8 FF                    5044 	.db #0xff	; 255
      007FF9 FF                    5045 	.db #0xff	; 255
      007FFA FF                    5046 	.db #0xff	; 255
      007FFB FF                    5047 	.db #0xff	; 255
      007FFC 99                    5048 	.db #0x99	; 153
      007FFD 99                    5049 	.db #0x99	; 153
      007FFE 01                    5050 	.db #0x01	; 1
      007FFF 4C                    5051 	.db #0x4c	; 76	'L'
