                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___SMS__SEGA_signature
                                     12 	.globl _main
                                     13 	.globl _GSL_getScrolltableAddress
                                     14 	.globl _GSL_getMapHeightInPixels
                                     15 	.globl _GSL_getMapWidthInPixels
                                     16 	.globl _GSL_metatileUpdateCustom
                                     17 	.globl _GSL_metatileUpdate
                                     18 	.globl _GSL_VBlank
                                     19 	.globl _GSL_scroll
                                     20 	.globl _GSL_refreshVDP
                                     21 	.globl _GSL_metatileLookup
                                     22 	.globl _GSL_positionWindow
                                     23 	.globl _GSL_initializeMap
                                     24 	.globl _PSGFrame
                                     25 	.globl _PSGPlay
                                     26 	.globl _UNSAFE_SMS_VRAMmemcpy128
                                     27 	.globl _UNSAFE_SMS_copySpritestoSAT
                                     28 	.globl _SMS_VRAMmemset
                                     29 	.globl _SMS_VRAMmemcpy
                                     30 	.globl _SMS_getKeysStatus
                                     31 	.globl _SMS_loadSpritePalette
                                     32 	.globl _SMS_loadBGPalette
                                     33 	.globl _SMS_addSprite
                                     34 	.globl _SMS_initSprites
                                     35 	.globl _SMS_waitForVBlank
                                     36 	.globl _SMS_VDPturnOffFeature
                                     37 	.globl _SMS_VDPturnOnFeature
                                     38 	.globl _direction
                                     39 	.globl _playerYOffset
                                     40 	.globl _playerXOffset
                                     41 	.globl _spriteYOffset
                                     42 	.globl _spriteXOffset
                                     43 	.globl _scrollYOffset
                                     44 	.globl _scrollXOffset
                                     45 	.globl _spriteTileOffsets
                                     46 	.globl _actionButtonWatch
                                     47 	.globl _action
                                     48 	.globl _actionCount
                                     49 	.globl _animationCount
                                     50 	.globl _playerSpriteY
                                     51 	.globl _playerSpriteX
                                     52 	.globl _playerY
                                     53 	.globl _playerX
                                     54 	.globl _scrolltable
                                     55 	.globl _currentAttackSprites
                                     56 	.globl _attackSprites
                                     57 	.globl _SMS_SRAM
                                     58 	.globl _SRAM_bank_to_be_mapped_on_slot2
                                     59 	.globl _ROM_bank_to_be_mapped_on_slot2
                                     60 	.globl _metatilesMetaLUT
                                     61 	.globl _spriteAttackRightMeta
                                     62 	.globl _spriteAttackLeftMeta
                                     63 	.globl _spriteAttackDownMeta
                                     64 	.globl _spriteAttackUpMeta
                                     65 	.globl _spriteAttackRight
                                     66 	.globl _spriteAttackLeft
                                     67 	.globl _spriteAttackDown
                                     68 	.globl _spriteAttackUp
                                     69 	.globl _spriteMoveRight
                                     70 	.globl _spriteMoveLeft
                                     71 	.globl _spriteMoveDown
                                     72 	.globl _spriteMoveUp
                                     73 	.globl _processSpritesActiveDisplay
                                     74 	.globl _processSpritesVBlank
                                     75 	.globl _processUserInput
                                     76 	.globl _processUpKey
                                     77 	.globl _processDownKey
                                     78 	.globl _processLeftKey
                                     79 	.globl _processRightKey
                                     80 	.globl _processAttackKey
                                     81 	.globl _checkForAttackInteraction
                                     82 	.globl _processAttackInteraction
                                     83 ;--------------------------------------------------------
                                     84 ; special function registers
                                     85 ;--------------------------------------------------------
                                     86 ;--------------------------------------------------------
                                     87 ; ram data
                                     88 ;--------------------------------------------------------
                                     89 	.area _DATA
                           00FFFF    90 _ROM_bank_to_be_mapped_on_slot2	=	0xffff
                           00FFFC    91 _SRAM_bank_to_be_mapped_on_slot2	=	0xfffc
                           008000    92 _SMS_SRAM	=	0x8000
      000000                         93 _attackSprites::
      000000                         94 	.ds 2
      000002                         95 _currentAttackSprites::
      000002                         96 	.ds 2
      000004                         97 _scrolltable::
      000004                         98 	.ds 4109
                                     99 ;--------------------------------------------------------
                                    100 ; ram data
                                    101 ;--------------------------------------------------------
                                    102 	.area _INITIALIZED
      000000                        103 _playerX::
      000000                        104 	.ds 2
      000002                        105 _playerY::
      000002                        106 	.ds 2
      000004                        107 _playerSpriteX::
      000004                        108 	.ds 1
      000005                        109 _playerSpriteY::
      000005                        110 	.ds 1
      000006                        111 _animationCount::
      000006                        112 	.ds 1
      000007                        113 _actionCount::
      000007                        114 	.ds 1
      000008                        115 _action::
      000008                        116 	.ds 1
      000009                        117 _actionButtonWatch::
      000009                        118 	.ds 1
      00000A                        119 _spriteTileOffsets::
      00000A                        120 	.ds 2
      00000C                        121 _scrollXOffset::
      00000C                        122 	.ds 1
      00000D                        123 _scrollYOffset::
      00000D                        124 	.ds 1
      00000E                        125 _spriteXOffset::
      00000E                        126 	.ds 1
      00000F                        127 _spriteYOffset::
      00000F                        128 	.ds 1
      000010                        129 _playerXOffset::
      000010                        130 	.ds 2
      000012                        131 _playerYOffset::
      000012                        132 	.ds 2
      000014                        133 _direction::
      000014                        134 	.ds 1
                                    135 ;--------------------------------------------------------
                                    136 ; absolute external ram data
                                    137 ;--------------------------------------------------------
                                    138 	.area _DABS (ABS)
                                    139 ;--------------------------------------------------------
                                    140 ; global & static initialisations
                                    141 ;--------------------------------------------------------
                                    142 	.area _HOME
                                    143 	.area _GSINIT
                                    144 	.area _GSFINAL
                                    145 	.area _GSINIT
                                    146 ;--------------------------------------------------------
                                    147 ; Home
                                    148 ;--------------------------------------------------------
                                    149 	.area _HOME
                                    150 	.area _HOME
                                    151 ;--------------------------------------------------------
                                    152 ; code
                                    153 ;--------------------------------------------------------
                                    154 	.area _CODE
                                    155 ;main.c:62: void main(void) 
                                    156 ;	---------------------------------
                                    157 ; Function main
                                    158 ; ---------------------------------
      000000                        159 _main::
                                    160 ;main.c:67: SMS_VRAMmemset(0x4000, 0x00, 0x4000);
      000000 21 00 40         [10]  161 	ld	hl, #0x4000
      000003 E5               [11]  162 	push	hl
      000004 AF               [ 4]  163 	xor	a, a
      000005 F5               [11]  164 	push	af
      000006 33               [ 6]  165 	inc	sp
      000007 2E 00            [ 7]  166 	ld	l, #0x00
      000009 E5               [11]  167 	push	hl
      00000A CDr00r00         [17]  168 	call	_SMS_VRAMmemset
      00000D F1               [10]  169 	pop	af
                                    170 ;main.c:68: SMS_VRAMmemset(0xC000, 0x00, 0x0020);
      00000E 33               [ 6]  171 	inc	sp
      00000F 21 20 00         [10]  172 	ld	hl,#0x0020
      000012 E3               [19]  173 	ex	(sp),hl
      000013 AF               [ 4]  174 	xor	a, a
      000014 F5               [11]  175 	push	af
      000015 33               [ 6]  176 	inc	sp
      000016 21 00 C0         [10]  177 	ld	hl, #0xc000
      000019 E5               [11]  178 	push	hl
      00001A CDr00r00         [17]  179 	call	_SMS_VRAMmemset
      00001D F1               [10]  180 	pop	af
                                    181 ;main.c:69: SMS_loadTiles(&tiles_bin, 0, tiles_bin_size);
      00001E 33               [ 6]  182 	inc	sp
      00001F 21 00 0B         [10]  183 	ld	hl,#0x0b00
      000022 E3               [19]  184 	ex	(sp),hl
      000023 21r00r00         [10]  185 	ld	hl, #_tiles_bin
      000026 E5               [11]  186 	push	hl
      000027 21 00 40         [10]  187 	ld	hl, #0x4000
      00002A E5               [11]  188 	push	hl
      00002B CDr00r00         [17]  189 	call	_SMS_VRAMmemcpy
                                    190 ;main.c:70: SMS_loadBGPalette(&palette_bin);
      00002E 21r00r00         [10]  191 	ld	hl, #_palette_bin
      000031 CDr00r00         [17]  192 	call	_SMS_loadBGPalette
                                    193 ;main.c:71: SMS_loadTiles(&sprite_tiles_bin, 256, sprite_tiles_bin_size);
      000034 21 00 18         [10]  194 	ld	hl, #0x1800
      000037 E5               [11]  195 	push	hl
      000038 21r00r00         [10]  196 	ld	hl, #_sprite_tiles_bin
      00003B E5               [11]  197 	push	hl
      00003C 21 00 60         [10]  198 	ld	hl, #0x6000
      00003F E5               [11]  199 	push	hl
      000040 CDr00r00         [17]  200 	call	_SMS_VRAMmemcpy
                                    201 ;main.c:72: SMS_loadSpritePalette(&sprite_palette_bin);
      000043 21r00r00         [10]  202 	ld	hl, #_sprite_palette_bin
      000046 CDr00r00         [17]  203 	call	_SMS_loadSpritePalette
                                    204 ;main.c:79: for (int i = 0; i < scrolltable_bin_size; i++) scrolltable[i] = *(scrolltable_bin + i);
      000049                        205 00122$:
      000049 01 00 00         [10]  206 	ld	bc, #0x0000
      00004C                        207 00113$:
      00004C 79               [ 4]  208 	ld	a, c
      00004D D6 0D            [ 7]  209 	sub	a, #0x0d
      00004F 78               [ 4]  210 	ld	a, b
      000050 17               [ 4]  211 	rla
      000051 3F               [ 4]  212 	ccf
      000052 1F               [ 4]  213 	rra
      000053 DE 90            [ 7]  214 	sbc	a, #0x90
      000055 30 0E            [12]  215 	jr	NC, 00101$
      000057 21r04r00         [10]  216 	ld	hl, #_scrolltable
      00005A 09               [11]  217 	add	hl, bc
      00005B EB               [ 4]  218 	ex	de, hl
      00005C 21r00r00         [10]  219 	ld	hl, #_scrolltable_bin
      00005F 09               [11]  220 	add	hl, bc
      000060 7E               [ 7]  221 	ld	a, (hl)
      000061 12               [ 7]  222 	ld	(de), a
      000062 03               [ 6]  223 	inc	bc
      000063 18 E7            [12]  224 	jr	00113$
      000065                        225 00101$:
                                    226 ;main.c:82: GSL_initializeMap(&scrolltable, &metatiles_bin);
      000065 21r00r00         [10]  227 	ld	hl, #_metatiles_bin
      000068 E5               [11]  228 	push	hl
      000069 21r04r00         [10]  229 	ld	hl, #_scrolltable
      00006C E5               [11]  230 	push	hl
      00006D CDr00r00         [17]  231 	call	_GSL_initializeMap
      000070 F1               [10]  232 	pop	af
      000071 F1               [10]  233 	pop	af
                                    234 ;main.c:83: GSL_positionWindow(768,832);
      000072 21 40 03         [10]  235 	ld	hl, #0x0340
      000075 E5               [11]  236 	push	hl
      000076 2E 00            [ 7]  237 	ld	l, #0x00
      000078 E5               [11]  238 	push	hl
      000079 CDr00r00         [17]  239 	call	_GSL_positionWindow
      00007C F1               [10]  240 	pop	af
      00007D F1               [10]  241 	pop	af
                                    242 ;main.c:84: GSL_refreshVDP();
      00007E CDr00r00         [17]  243 	call	_GSL_refreshVDP
                                    244 ;main.c:86: SMS_VDPturnOnFeature(VDPFEATURE_HIDEFIRSTCOL);
      000081 21 20 00         [10]  245 	ld	hl, #0x0020
      000084 CDr00r00         [17]  246 	call	_SMS_VDPturnOnFeature
                                    247 ;main.c:87: SMS_displayOn();
      000087 21 40 01         [10]  248 	ld	hl, #0x0140
      00008A CDr00r00         [17]  249 	call	_SMS_VDPturnOnFeature
                                    250 ;main.c:89: PSGPlay(&village_psg);
      00008D 21r00r00         [10]  251 	ld	hl, #_village_psg
      000090 E5               [11]  252 	push	hl
      000091 CDr00r00         [17]  253 	call	_PSGPlay
      000094 F1               [10]  254 	pop	af
                                    255 ;main.c:91: playerX = 904;
      000095 21 88 03         [10]  256 	ld	hl, #0x0388
      000098 22r00r00         [16]  257 	ld	(_playerX), hl
                                    258 ;main.c:92: playerY = 928;
      00009B 2E A0            [ 7]  259 	ld	l, #0xa0
      00009D 22r02r00         [16]  260 	ld	(_playerY), hl
                                    261 ;main.c:93: playerSpriteX = 136;
      0000A0 21r04r00         [10]  262 	ld	hl, #_playerSpriteX
      0000A3 36 88            [10]  263 	ld	(hl), #0x88
                                    264 ;main.c:94: playerSpriteY = 96;
      0000A5 21r05r00         [10]  265 	ld	hl, #_playerSpriteY
      0000A8 36 60            [10]  266 	ld	(hl), #0x60
                                    267 ;main.c:95: actionCount = 0;
      0000AA 21r07r00         [10]  268 	ld	hl, #_actionCount
      0000AD 36 00            [10]  269 	ld	(hl), #0x00
      0000AF                        270 00115$:
                                    271 ;main.c:100: playerMetatile = *(GSL_metatileLookup(playerX, playerY)); 
      0000AF 2Ar02r00         [16]  272 	ld	hl, (_playerY)
      0000B2 E5               [11]  273 	push	hl
      0000B3 2Ar00r00         [16]  274 	ld	hl, (_playerX)
      0000B6 E5               [11]  275 	push	hl
      0000B7 CDr00r00         [17]  276 	call	_GSL_metatileLookup
      0000BA F1               [10]  277 	pop	af
      0000BB F1               [10]  278 	pop	af
      0000BC 7E               [ 7]  279 	ld	a, (hl)
                                    280 ;main.c:101: if (playerMetatile == METATILE_DUNGEON_ENTRANCE) break;
      0000BD D6 20            [ 7]  281 	sub	a, #0x20
      0000BF CAr43r01         [10]  282 	jp	Z,00110$
                                    283 ;main.c:103: SMS_initSprites(); 
      0000C2 CDr00r00         [17]  284 	call	_SMS_initSprites
                                    285 ;main.c:104: ks = SMS_getKeysStatus(); 
      0000C5 CDr00r00         [17]  286 	call	_SMS_getKeysStatus
                                    287 ;main.c:105: if (!(ks & PORT_A_KEY_2)) actionButtonWatch = 0;
      0000C8 CB 6D            [ 8]  288 	bit	5, l
      0000CA 20 05            [12]  289 	jr	NZ, 00105$
      0000CC 21r09r00         [10]  290 	ld	hl, #_actionButtonWatch
      0000CF 36 00            [10]  291 	ld	(hl), #0x00
      0000D1                        292 00105$:
                                    293 ;main.c:110: if (actionCount == 0) processUserInput();
      0000D1 3Ar07r00         [13]  294 	ld	a,(#_actionCount + 0)
      0000D4 B7               [ 4]  295 	or	a, a
      0000D5 20 03            [12]  296 	jr	NZ, 00107$
      0000D7 CDr5Cr05         [17]  297 	call	_processUserInput
      0000DA                        298 00107$:
                                    299 ;main.c:111: if (actionCount != 0) actionCount--;
      0000DA FD 21r07r00      [14]  300 	ld	iy, #_actionCount
      0000DE FD 7E 00         [19]  301 	ld	a, 0 (iy)
      0000E1 B7               [ 4]  302 	or	a, a
      0000E2 28 03            [12]  303 	jr	Z, 00109$
      0000E4 FD 35 00         [23]  304 	dec	0 (iy)
      0000E7                        305 00109$:
                                    306 ;main.c:113: playerX += playerXOffset;
      0000E7 21r10r00         [10]  307 	ld	hl, #_playerXOffset
      0000EA D5               [11]  308 	push	de
      0000EB 11r00r00         [10]  309 	ld	de, #_playerX
      0000EE D5               [11]  310 	push	de
      0000EF D1               [10]  311 	pop	de
      0000F0 1A               [ 7]  312 	ld	a, (de)
      0000F1 86               [ 7]  313 	add	a, (hl)
      0000F2 12               [ 7]  314 	ld	(de), a
      0000F3 13               [ 6]  315 	inc	de
      0000F4 1A               [ 7]  316 	ld	a, (de)
      0000F5 23               [ 6]  317 	inc	hl
      0000F6 8E               [ 7]  318 	adc	a, (hl)
      0000F7 12               [ 7]  319 	ld	(de), a
      0000F8 D1               [10]  320 	pop	de
                                    321 ;main.c:114: playerY += playerYOffset;
      0000F9 21r12r00         [10]  322 	ld	hl, #_playerYOffset
      0000FC D5               [11]  323 	push	de
      0000FD 11r02r00         [10]  324 	ld	de, #_playerY
      000100 D5               [11]  325 	push	de
      000101 D1               [10]  326 	pop	de
      000102 1A               [ 7]  327 	ld	a, (de)
      000103 86               [ 7]  328 	add	a, (hl)
      000104 12               [ 7]  329 	ld	(de), a
      000105 13               [ 6]  330 	inc	de
      000106 1A               [ 7]  331 	ld	a, (de)
      000107 23               [ 6]  332 	inc	hl
      000108 8E               [ 7]  333 	adc	a, (hl)
      000109 12               [ 7]  334 	ld	(de), a
      00010A D1               [10]  335 	pop	de
                                    336 ;main.c:115: playerSpriteX += spriteXOffset;
      00010B 21r04r00         [10]  337 	ld	hl, #_playerSpriteX
      00010E 7E               [ 7]  338 	ld	a, (hl)
      00010F FD 21r0Er00      [14]  339 	ld	iy, #_spriteXOffset
      000113 FD 86 00         [19]  340 	add	a, 0 (iy)
      000116 77               [ 7]  341 	ld	(hl), a
                                    342 ;main.c:116: playerSpriteY += spriteYOffset;
      000117 21r05r00         [10]  343 	ld	hl, #_playerSpriteY
      00011A 7E               [ 7]  344 	ld	a, (hl)
      00011B FD 21r0Fr00      [14]  345 	ld	iy, #_spriteYOffset
      00011F FD 86 00         [19]  346 	add	a, 0 (iy)
      000122 77               [ 7]  347 	ld	(hl), a
                                    348 ;main.c:117: GSL_scroll(scrollXOffset,scrollYOffset); // << GSL_scroll with offsets to scroll map.
      000123 3Ar0Dr00         [13]  349 	ld	a,(#_scrollYOffset + 0)
      000126 F5               [11]  350 	push	af
      000127 33               [ 6]  351 	inc	sp
      000128 3Ar0Cr00         [13]  352 	ld	a,(#_scrollXOffset + 0)
      00012B F5               [11]  353 	push	af
      00012C 33               [ 6]  354 	inc	sp
      00012D CDr00r00         [17]  355 	call	_GSL_scroll
      000130 F1               [10]  356 	pop	af
                                    357 ;main.c:119: processSpritesActiveDisplay();
      000131 CDrC4r03         [17]  358 	call	_processSpritesActiveDisplay
                                    359 ;main.c:121: SMS_waitForVBlank(); 
      000134 CDr00r00         [17]  360 	call	_SMS_waitForVBlank
                                    361 ;main.c:122: GSL_VBlank();  // <<< Call GSL_VBlank to process any pending scroll / metatile updates.
      000137 CDr00r00         [17]  362 	call	_GSL_VBlank
                                    363 ;main.c:123: processSpritesVBlank();
      00013A CDrEBr04         [17]  364 	call	_processSpritesVBlank
                                    365 ;main.c:124: PSGFrame();
      00013D CDr00r00         [17]  366 	call	_PSGFrame
      000140 C3rAFr00         [10]  367 	jp	00115$
      000143                        368 00110$:
                                    369 ;main.c:127: SMS_displayOff();
      000143 21 40 01         [10]  370 	ld	hl, #0x0140
      000146 CDr00r00         [17]  371 	call	_SMS_VDPturnOffFeature
                                    372 ;main.c:129: }
      000149 C3r49r00         [10]  373 	jp	00122$
      00014C                        374 _spriteMoveUp:
      00014C 80 00                  375 	.dw #0x0080
      00014E 00 00                  376 	.dw #0x0000
      000150 80 00                  377 	.dw #0x0080
      000152 00 01                  378 	.dw #0x0100
      000154                        379 _spriteMoveDown:
      000154 00 02                  380 	.dw #0x0200
      000156 80 01                  381 	.dw #0x0180
      000158 00 02                  382 	.dw #0x0200
      00015A 80 02                  383 	.dw #0x0280
      00015C                        384 _spriteMoveLeft:
      00015C 80 03                  385 	.dw #0x0380
      00015E 00 03                  386 	.dw #0x0300
      000160 80 03                  387 	.dw #0x0380
      000162 00 04                  388 	.dw #0x0400
      000164                        389 _spriteMoveRight:
      000164 00 05                  390 	.dw #0x0500
      000166 80 04                  391 	.dw #0x0480
      000168 00 05                  392 	.dw #0x0500
      00016A 80 05                  393 	.dw #0x0580
      00016C                        394 _spriteAttackUp:
      00016C 80 00                  395 	.dw #0x0080
      00016E 00 09                  396 	.dw #0x0900
      000170 00 08                  397 	.dw #0x0800
      000172 00 07                  398 	.dw #0x0700
      000174 00 06                  399 	.dw #0x0600
      000176                        400 _spriteAttackDown:
      000176 00 02                  401 	.dw #0x0200
      000178 00 0D                  402 	.dw #0x0d00
      00017A 00 0C                  403 	.dw #0x0c00
      00017C 00 0B                  404 	.dw #0x0b00
      00017E 00 0A                  405 	.dw #0x0a00
      000180                        406 _spriteAttackLeft:
      000180 80 03                  407 	.dw #0x0380
      000182 00 11                  408 	.dw #0x1100
      000184 00 10                  409 	.dw #0x1000
      000186 00 0F                  410 	.dw #0x0f00
      000188 00 0E                  411 	.dw #0x0e00
      00018A                        412 _spriteAttackRight:
      00018A 00 05                  413 	.dw #0x0500
      00018C 00 15                  414 	.dw #0x1500
      00018E 00 14                  415 	.dw #0x1400
      000190 00 13                  416 	.dw #0x1300
      000192 00 12                  417 	.dw #0x1200
      000194                        418 _spriteAttackUpMeta:
      000194 00                     419 	.db #0x00	; 0
      000195 00                     420 	.db #0x00	; 0
      000196 BF                     421 	.db #0xbf	; 191
      000197 00                     422 	.db #0x00	; 0
      000198 10                     423 	.db #0x10	; 16
      000199 BF                     424 	.db #0xbf	; 191
      00019A 00                     425 	.db #0x00	; 0
      00019B 20                     426 	.db #0x20	; 32
      00019C BF                     427 	.db #0xbf	; 191
      00019D 00                     428 	.db #0x00	; 0
      00019E 30                     429 	.db #0x30	; 48	'0'
      00019F BF                     430 	.db #0xbf	; 191
      0001A0 00                     431 	.db #0x00	; 0
      0001A1 00                     432 	.db #0x00	; 0
      0001A2 00                     433 	.db #0x00	; 0
      0001A3 00                     434 	.db #0x00	; 0
      0001A4 00                     435 	.db #0x00	; 0
      0001A5 F0                     436 	.db #0xf0	; 240
      0001A6 04                     437 	.db #0x04	; 4
      0001A7 F8                     438 	.db #0xf8	; 248
      0001A8 F0                     439 	.db #0xf0	; 240
      0001A9 05                     440 	.db #0x05	; 5
      0001AA F0                     441 	.db #0xf0	; 240
      0001AB F0                     442 	.db #0xf0	; 240
      0001AC 06                     443 	.db #0x06	; 6
      0001AD F0                     444 	.db #0xf0	; 240
      0001AE F8                     445 	.db #0xf8	; 248
      0001AF 07                     446 	.db #0x07	; 7
      0001B0 00                     447 	.db #0x00	; 0
      0001B1 00                     448 	.db #0x00	; 0
      0001B2 00                     449 	.db #0x00	; 0
      0001B3 00                     450 	.db #0x00	; 0
      0001B4 00                     451 	.db #0x00	; 0
      0001B5 F0                     452 	.db #0xf0	; 240
      0001B6 04                     453 	.db #0x04	; 4
      0001B7 F8                     454 	.db #0xf8	; 248
      0001B8 F0                     455 	.db #0xf0	; 240
      0001B9 05                     456 	.db #0x05	; 5
      0001BA 00                     457 	.db #0x00	; 0
      0001BB 10                     458 	.db #0x10	; 16
      0001BC BF                     459 	.db #0xbf	; 191
      0001BD 00                     460 	.db #0x00	; 0
      0001BE 18                     461 	.db #0x18	; 24
      0001BF BF                     462 	.db #0xbf	; 191
      0001C0 00                     463 	.db #0x00	; 0
      0001C1 00                     464 	.db #0x00	; 0
      0001C2 00                     465 	.db #0x00	; 0
      0001C3 00                     466 	.db #0x00	; 0
      0001C4 08                     467 	.db #0x08	; 8
      0001C5 F8                     468 	.db #0xf8	; 248
      0001C6 04                     469 	.db #0x04	; 4
      0001C7 08                     470 	.db #0x08	; 8
      0001C8 F0                     471 	.db #0xf0	; 240
      0001C9 05                     472 	.db #0x05	; 5
      0001CA 00                     473 	.db #0x00	; 0
      0001CB F0                     474 	.db #0xf0	; 240
      0001CC 06                     475 	.db #0x06	; 6
      0001CD 00                     476 	.db #0x00	; 0
      0001CE 18                     477 	.db #0x18	; 24
      0001CF BF                     478 	.db #0xbf	; 191
      0001D0 00                     479 	.db #0x00	; 0
      0001D1 00                     480 	.db #0x00	; 0
      0001D2 00                     481 	.db #0x00	; 0
      0001D3 00                     482 	.db #0x00	; 0
      0001D4 08                     483 	.db #0x08	; 8
      0001D5 00                     484 	.db #0x00	; 0
      0001D6 04                     485 	.db #0x04	; 4
      0001D7 08                     486 	.db #0x08	; 8
      0001D8 F8                     487 	.db #0xf8	; 248
      0001D9 05                     488 	.db #0x05	; 5
      0001DA 00                     489 	.db #0x00	; 0
      0001DB 10                     490 	.db #0x10	; 16
      0001DC BF                     491 	.db #0xbf	; 191
      0001DD 00                     492 	.db #0x00	; 0
      0001DE 18                     493 	.db #0x18	; 24
      0001DF BF                     494 	.db #0xbf	; 191
      0001E0                        495 _spriteAttackDownMeta:
      0001E0 00                     496 	.db #0x00	; 0
      0001E1 00                     497 	.db #0x00	; 0
      0001E2 BF                     498 	.db #0xbf	; 191
      0001E3 00                     499 	.db #0x00	; 0
      0001E4 10                     500 	.db #0x10	; 16
      0001E5 BF                     501 	.db #0xbf	; 191
      0001E6 00                     502 	.db #0x00	; 0
      0001E7 20                     503 	.db #0x20	; 32
      0001E8 BF                     504 	.db #0xbf	; 191
      0001E9 00                     505 	.db #0x00	; 0
      0001EA 30                     506 	.db #0x30	; 48	'0'
      0001EB BF                     507 	.db #0xbf	; 191
      0001EC 00                     508 	.db #0x00	; 0
      0001ED 00                     509 	.db #0x00	; 0
      0001EE 00                     510 	.db #0x00	; 0
      0001EF 00                     511 	.db #0x00	; 0
      0001F0 F8                     512 	.db #0xf8	; 248
      0001F1 08                     513 	.db #0x08	; 8
      0001F2 04                     514 	.db #0x04	; 4
      0001F3 00                     515 	.db #0x00	; 0
      0001F4 08                     516 	.db #0x08	; 8
      0001F5 05                     517 	.db #0x05	; 5
      0001F6 08                     518 	.db #0x08	; 8
      0001F7 08                     519 	.db #0x08	; 8
      0001F8 06                     520 	.db #0x06	; 6
      0001F9 08                     521 	.db #0x08	; 8
      0001FA 00                     522 	.db #0x00	; 0
      0001FB 07                     523 	.db #0x07	; 7
      0001FC 00                     524 	.db #0x00	; 0
      0001FD 00                     525 	.db #0x00	; 0
      0001FE 00                     526 	.db #0x00	; 0
      0001FF 00                     527 	.db #0x00	; 0
      000200 00                     528 	.db #0x00	; 0
      000201 08                     529 	.db #0x08	; 8
      000202 04                     530 	.db #0x04	; 4
      000203 F8                     531 	.db #0xf8	; 248
      000204 08                     532 	.db #0x08	; 8
      000205 05                     533 	.db #0x05	; 5
      000206 00                     534 	.db #0x00	; 0
      000207 10                     535 	.db #0x10	; 16
      000208 BF                     536 	.db #0xbf	; 191
      000209 00                     537 	.db #0x00	; 0
      00020A 18                     538 	.db #0x18	; 24
      00020B BF                     539 	.db #0xbf	; 191
      00020C 00                     540 	.db #0x00	; 0
      00020D 00                     541 	.db #0x00	; 0
      00020E 00                     542 	.db #0x00	; 0
      00020F 00                     543 	.db #0x00	; 0
      000210 F8                     544 	.db #0xf8	; 248
      000211 08                     545 	.db #0x08	; 8
      000212 04                     546 	.db #0x04	; 4
      000213 F0                     547 	.db #0xf0	; 240
      000214 08                     548 	.db #0x08	; 8
      000215 05                     549 	.db #0x05	; 5
      000216 F0                     550 	.db #0xf0	; 240
      000217 00                     551 	.db #0x00	; 0
      000218 06                     552 	.db #0x06	; 6
      000219 00                     553 	.db #0x00	; 0
      00021A 18                     554 	.db #0x18	; 24
      00021B BF                     555 	.db #0xbf	; 191
      00021C 00                     556 	.db #0x00	; 0
      00021D 00                     557 	.db #0x00	; 0
      00021E 00                     558 	.db #0x00	; 0
      00021F 00                     559 	.db #0x00	; 0
      000220 F0                     560 	.db #0xf0	; 240
      000221 F8                     561 	.db #0xf8	; 248
      000222 04                     562 	.db #0x04	; 4
      000223 F0                     563 	.db #0xf0	; 240
      000224 00                     564 	.db #0x00	; 0
      000225 05                     565 	.db #0x05	; 5
      000226 00                     566 	.db #0x00	; 0
      000227 10                     567 	.db #0x10	; 16
      000228 BF                     568 	.db #0xbf	; 191
      000229 00                     569 	.db #0x00	; 0
      00022A 18                     570 	.db #0x18	; 24
      00022B BF                     571 	.db #0xbf	; 191
      00022C                        572 _spriteAttackLeftMeta:
      00022C 00                     573 	.db #0x00	; 0
      00022D 00                     574 	.db #0x00	; 0
      00022E BF                     575 	.db #0xbf	; 191
      00022F 00                     576 	.db #0x00	; 0
      000230 10                     577 	.db #0x10	; 16
      000231 BF                     578 	.db #0xbf	; 191
      000232 00                     579 	.db #0x00	; 0
      000233 20                     580 	.db #0x20	; 32
      000234 BF                     581 	.db #0xbf	; 191
      000235 00                     582 	.db #0x00	; 0
      000236 30                     583 	.db #0x30	; 48	'0'
      000237 BF                     584 	.db #0xbf	; 191
      000238 00                     585 	.db #0x00	; 0
      000239 00                     586 	.db #0x00	; 0
      00023A 00                     587 	.db #0x00	; 0
      00023B 00                     588 	.db #0x00	; 0
      00023C F0                     589 	.db #0xf0	; 240
      00023D F8                     590 	.db #0xf8	; 248
      00023E 04                     591 	.db #0x04	; 4
      00023F F0                     592 	.db #0xf0	; 240
      000240 00                     593 	.db #0x00	; 0
      000241 05                     594 	.db #0x05	; 5
      000242 F0                     595 	.db #0xf0	; 240
      000243 08                     596 	.db #0x08	; 8
      000244 06                     597 	.db #0x06	; 6
      000245 F8                     598 	.db #0xf8	; 248
      000246 08                     599 	.db #0x08	; 8
      000247 07                     600 	.db #0x07	; 7
      000248 00                     601 	.db #0x00	; 0
      000249 00                     602 	.db #0x00	; 0
      00024A 00                     603 	.db #0x00	; 0
      00024B 00                     604 	.db #0x00	; 0
      00024C F0                     605 	.db #0xf0	; 240
      00024D F8                     606 	.db #0xf8	; 248
      00024E 04                     607 	.db #0x04	; 4
      00024F F0                     608 	.db #0xf0	; 240
      000250 00                     609 	.db #0x00	; 0
      000251 05                     610 	.db #0x05	; 5
      000252 00                     611 	.db #0x00	; 0
      000253 10                     612 	.db #0x10	; 16
      000254 BF                     613 	.db #0xbf	; 191
      000255 00                     614 	.db #0x00	; 0
      000256 18                     615 	.db #0x18	; 24
      000257 BF                     616 	.db #0xbf	; 191
      000258 00                     617 	.db #0x00	; 0
      000259 00                     618 	.db #0x00	; 0
      00025A 00                     619 	.db #0x00	; 0
      00025B 00                     620 	.db #0x00	; 0
      00025C F0                     621 	.db #0xf0	; 240
      00025D F8                     622 	.db #0xf8	; 248
      00025E 04                     623 	.db #0x04	; 4
      00025F F0                     624 	.db #0xf0	; 240
      000260 F0                     625 	.db #0xf0	; 240
      000261 05                     626 	.db #0x05	; 5
      000262 F8                     627 	.db #0xf8	; 248
      000263 F0                     628 	.db #0xf0	; 240
      000264 06                     629 	.db #0x06	; 6
      000265 00                     630 	.db #0x00	; 0
      000266 18                     631 	.db #0x18	; 24
      000267 BF                     632 	.db #0xbf	; 191
      000268 00                     633 	.db #0x00	; 0
      000269 00                     634 	.db #0x00	; 0
      00026A 00                     635 	.db #0x00	; 0
      00026B 00                     636 	.db #0x00	; 0
      00026C 00                     637 	.db #0x00	; 0
      00026D F0                     638 	.db #0xf0	; 240
      00026E 04                     639 	.db #0x04	; 4
      00026F F8                     640 	.db #0xf8	; 248
      000270 F0                     641 	.db #0xf0	; 240
      000271 05                     642 	.db #0x05	; 5
      000272 00                     643 	.db #0x00	; 0
      000273 10                     644 	.db #0x10	; 16
      000274 BF                     645 	.db #0xbf	; 191
      000275 00                     646 	.db #0x00	; 0
      000276 18                     647 	.db #0x18	; 24
      000277 BF                     648 	.db #0xbf	; 191
      000278                        649 _spriteAttackRightMeta:
      000278 00                     650 	.db #0x00	; 0
      000279 00                     651 	.db #0x00	; 0
      00027A BF                     652 	.db #0xbf	; 191
      00027B 00                     653 	.db #0x00	; 0
      00027C 10                     654 	.db #0x10	; 16
      00027D BF                     655 	.db #0xbf	; 191
      00027E 00                     656 	.db #0x00	; 0
      00027F 20                     657 	.db #0x20	; 32
      000280 BF                     658 	.db #0xbf	; 191
      000281 00                     659 	.db #0x00	; 0
      000282 30                     660 	.db #0x30	; 48	'0'
      000283 BF                     661 	.db #0xbf	; 191
      000284 00                     662 	.db #0x00	; 0
      000285 00                     663 	.db #0x00	; 0
      000286 00                     664 	.db #0x00	; 0
      000287 00                     665 	.db #0x00	; 0
      000288 08                     666 	.db #0x08	; 8
      000289 00                     667 	.db #0x00	; 0
      00028A 04                     668 	.db #0x04	; 4
      00028B 08                     669 	.db #0x08	; 8
      00028C F8                     670 	.db #0xf8	; 248
      00028D 05                     671 	.db #0x05	; 5
      00028E 08                     672 	.db #0x08	; 8
      00028F F0                     673 	.db #0xf0	; 240
      000290 06                     674 	.db #0x06	; 6
      000291 00                     675 	.db #0x00	; 0
      000292 F0                     676 	.db #0xf0	; 240
      000293 07                     677 	.db #0x07	; 7
      000294 00                     678 	.db #0x00	; 0
      000295 00                     679 	.db #0x00	; 0
      000296 00                     680 	.db #0x00	; 0
      000297 00                     681 	.db #0x00	; 0
      000298 08                     682 	.db #0x08	; 8
      000299 00                     683 	.db #0x00	; 0
      00029A 04                     684 	.db #0x04	; 4
      00029B 08                     685 	.db #0x08	; 8
      00029C F8                     686 	.db #0xf8	; 248
      00029D 05                     687 	.db #0x05	; 5
      00029E 00                     688 	.db #0x00	; 0
      00029F 10                     689 	.db #0x10	; 16
      0002A0 BF                     690 	.db #0xbf	; 191
      0002A1 00                     691 	.db #0x00	; 0
      0002A2 18                     692 	.db #0x18	; 24
      0002A3 BF                     693 	.db #0xbf	; 191
      0002A4 00                     694 	.db #0x00	; 0
      0002A5 00                     695 	.db #0x00	; 0
      0002A6 00                     696 	.db #0x00	; 0
      0002A7 00                     697 	.db #0x00	; 0
      0002A8 00                     698 	.db #0x00	; 0
      0002A9 08                     699 	.db #0x08	; 8
      0002AA 04                     700 	.db #0x04	; 4
      0002AB 08                     701 	.db #0x08	; 8
      0002AC 08                     702 	.db #0x08	; 8
      0002AD 05                     703 	.db #0x05	; 5
      0002AE 08                     704 	.db #0x08	; 8
      0002AF 00                     705 	.db #0x00	; 0
      0002B0 06                     706 	.db #0x06	; 6
      0002B1 00                     707 	.db #0x00	; 0
      0002B2 18                     708 	.db #0x18	; 24
      0002B3 BF                     709 	.db #0xbf	; 191
      0002B4 00                     710 	.db #0x00	; 0
      0002B5 00                     711 	.db #0x00	; 0
      0002B6 00                     712 	.db #0x00	; 0
      0002B7 00                     713 	.db #0x00	; 0
      0002B8 F8                     714 	.db #0xf8	; 248
      0002B9 08                     715 	.db #0x08	; 8
      0002BA 04                     716 	.db #0x04	; 4
      0002BB 00                     717 	.db #0x00	; 0
      0002BC 08                     718 	.db #0x08	; 8
      0002BD 05                     719 	.db #0x05	; 5
      0002BE 00                     720 	.db #0x00	; 0
      0002BF 10                     721 	.db #0x10	; 16
      0002C0 BF                     722 	.db #0xbf	; 191
      0002C1 00                     723 	.db #0x00	; 0
      0002C2 18                     724 	.db #0x18	; 24
      0002C3 BF                     725 	.db #0xbf	; 191
      0002C4                        726 _metatilesMetaLUT:
      0002C4 00                     727 	.db #0x00	; 0
      0002C5 00                     728 	.db #0x00	; 0
      0002C6 00                     729 	.db #0x00	; 0
      0002C7 00                     730 	.db #0x00	; 0
      0002C8 00                     731 	.db #0x00	; 0
      0002C9 00                     732 	.db #0x00	; 0
      0002CA 00                     733 	.db #0x00	; 0
      0002CB 00                     734 	.db #0x00	; 0
      0002CC 00                     735 	.db #0x00	; 0
      0002CD 00                     736 	.db #0x00	; 0
      0002CE 01                     737 	.db #0x01	; 1
      0002CF 00                     738 	.db #0x00	; 0
      0002D0 00                     739 	.db #0x00	; 0
      0002D1 00                     740 	.db #0x00	; 0
      0002D2 00                     741 	.db #0x00	; 0
      0002D3 00                     742 	.db #0x00	; 0
      0002D4 01                     743 	.db #0x01	; 1
      0002D5 00                     744 	.db #0x00	; 0
      0002D6 00                     745 	.db #0x00	; 0
      0002D7 00                     746 	.db #0x00	; 0
      0002D8 00                     747 	.db #0x00	; 0
      0002D9 00                     748 	.db #0x00	; 0
      0002DA 00                     749 	.db #0x00	; 0
      0002DB 00                     750 	.db #0x00	; 0
      0002DC 00                     751 	.db #0x00	; 0
      0002DD 00                     752 	.db #0x00	; 0
      0002DE 00                     753 	.db #0x00	; 0
      0002DF 00                     754 	.db #0x00	; 0
      0002E0 00                     755 	.db #0x00	; 0
      0002E1 00                     756 	.db #0x00	; 0
      0002E2 00                     757 	.db #0x00	; 0
      0002E3 00                     758 	.db #0x00	; 0
      0002E4 01                     759 	.db #0x01	; 1
      0002E5 01                     760 	.db #0x01	; 1
      0002E6 00                     761 	.db #0x00	; 0
      0002E7 00                     762 	.db #0x00	; 0
      0002E8 00                     763 	.db #0x00	; 0
      0002E9 00                     764 	.db #0x00	; 0
      0002EA 00                     765 	.db #0x00	; 0
      0002EB 00                     766 	.db #0x00	; 0
      0002EC 00                     767 	.db #0x00	; 0
      0002ED 00                     768 	.db #0x00	; 0
      0002EE 00                     769 	.db #0x00	; 0
      0002EF 00                     770 	.db #0x00	; 0
      0002F0 00                     771 	.db #0x00	; 0
      0002F1 00                     772 	.db #0x00	; 0
      0002F2 00                     773 	.db #0x00	; 0
      0002F3 00                     774 	.db #0x00	; 0
      0002F4 00                     775 	.db #0x00	; 0
      0002F5 00                     776 	.db #0x00	; 0
      0002F6 00                     777 	.db #0x00	; 0
      0002F7 00                     778 	.db #0x00	; 0
      0002F8 00                     779 	.db #0x00	; 0
      0002F9 00                     780 	.db #0x00	; 0
      0002FA 00                     781 	.db #0x00	; 0
      0002FB 00                     782 	.db #0x00	; 0
      0002FC 01                     783 	.db #0x01	; 1
      0002FD 00                     784 	.db #0x00	; 0
      0002FE 00                     785 	.db #0x00	; 0
      0002FF 00                     786 	.db #0x00	; 0
      000300 00                     787 	.db #0x00	; 0
      000301 00                     788 	.db #0x00	; 0
      000302 00                     789 	.db #0x00	; 0
      000303 00                     790 	.db #0x00	; 0
      000304 00                     791 	.db #0x00	; 0
      000305 00                     792 	.db #0x00	; 0
      000306 00                     793 	.db #0x00	; 0
      000307 00                     794 	.db #0x00	; 0
      000308 00                     795 	.db #0x00	; 0
      000309 00                     796 	.db #0x00	; 0
      00030A 00                     797 	.db #0x00	; 0
      00030B 00                     798 	.db #0x00	; 0
      00030C 01                     799 	.db #0x01	; 1
      00030D 00                     800 	.db #0x00	; 0
      00030E 00                     801 	.db #0x00	; 0
      00030F 00                     802 	.db #0x00	; 0
      000310 00                     803 	.db #0x00	; 0
      000311 00                     804 	.db #0x00	; 0
      000312 00                     805 	.db #0x00	; 0
      000313 00                     806 	.db #0x00	; 0
      000314 00                     807 	.db #0x00	; 0
      000315 00                     808 	.db #0x00	; 0
      000316 00                     809 	.db #0x00	; 0
      000317 00                     810 	.db #0x00	; 0
      000318 00                     811 	.db #0x00	; 0
      000319 00                     812 	.db #0x00	; 0
      00031A 00                     813 	.db #0x00	; 0
      00031B 00                     814 	.db #0x00	; 0
      00031C 01                     815 	.db #0x01	; 1
      00031D 01                     816 	.db #0x01	; 1
      00031E 00                     817 	.db #0x00	; 0
      00031F 00                     818 	.db #0x00	; 0
      000320 00                     819 	.db #0x00	; 0
      000321 00                     820 	.db #0x00	; 0
      000322 00                     821 	.db #0x00	; 0
      000323 00                     822 	.db #0x00	; 0
      000324 00                     823 	.db #0x00	; 0
      000325 00                     824 	.db #0x00	; 0
      000326 00                     825 	.db #0x00	; 0
      000327 00                     826 	.db #0x00	; 0
      000328 00                     827 	.db #0x00	; 0
      000329 00                     828 	.db #0x00	; 0
      00032A 00                     829 	.db #0x00	; 0
      00032B 00                     830 	.db #0x00	; 0
      00032C 00                     831 	.db #0x00	; 0
      00032D 00                     832 	.db #0x00	; 0
      00032E 00                     833 	.db #0x00	; 0
      00032F 00                     834 	.db #0x00	; 0
      000330 00                     835 	.db #0x00	; 0
      000331 00                     836 	.db #0x00	; 0
      000332 00                     837 	.db #0x00	; 0
      000333 00                     838 	.db #0x00	; 0
      000334 00                     839 	.db #0x00	; 0
      000335 00                     840 	.db #0x00	; 0
      000336 00                     841 	.db #0x00	; 0
      000337 00                     842 	.db #0x00	; 0
      000338 00                     843 	.db #0x00	; 0
      000339 00                     844 	.db #0x00	; 0
      00033A 00                     845 	.db #0x00	; 0
      00033B 00                     846 	.db #0x00	; 0
      00033C 00                     847 	.db #0x00	; 0
      00033D 00                     848 	.db #0x00	; 0
      00033E 00                     849 	.db #0x00	; 0
      00033F 00                     850 	.db #0x00	; 0
      000340 00                     851 	.db #0x00	; 0
      000341 00                     852 	.db #0x00	; 0
      000342 00                     853 	.db #0x00	; 0
      000343 00                     854 	.db #0x00	; 0
      000344 00                     855 	.db #0x00	; 0
      000345 00                     856 	.db #0x00	; 0
      000346 00                     857 	.db #0x00	; 0
      000347 00                     858 	.db #0x00	; 0
      000348 00                     859 	.db #0x00	; 0
      000349 00                     860 	.db #0x00	; 0
      00034A 00                     861 	.db #0x00	; 0
      00034B 00                     862 	.db #0x00	; 0
      00034C 00                     863 	.db #0x00	; 0
      00034D 00                     864 	.db #0x00	; 0
      00034E 00                     865 	.db #0x00	; 0
      00034F 00                     866 	.db #0x00	; 0
      000350 00                     867 	.db #0x00	; 0
      000351 00                     868 	.db #0x00	; 0
      000352 00                     869 	.db #0x00	; 0
      000353 00                     870 	.db #0x00	; 0
      000354 00                     871 	.db #0x00	; 0
      000355 00                     872 	.db #0x00	; 0
      000356 00                     873 	.db #0x00	; 0
      000357 00                     874 	.db #0x00	; 0
      000358 00                     875 	.db #0x00	; 0
      000359 00                     876 	.db #0x00	; 0
      00035A 00                     877 	.db #0x00	; 0
      00035B 00                     878 	.db #0x00	; 0
      00035C 01                     879 	.db #0x01	; 1
      00035D 01                     880 	.db #0x01	; 1
      00035E 00                     881 	.db #0x00	; 0
      00035F 00                     882 	.db #0x00	; 0
      000360 00                     883 	.db #0x00	; 0
      000361 00                     884 	.db #0x00	; 0
      000362 00                     885 	.db #0x00	; 0
      000363 00                     886 	.db #0x00	; 0
      000364 00                     887 	.db #0x00	; 0
      000365 01                     888 	.db #0x01	; 1
      000366 00                     889 	.db #0x00	; 0
      000367 00                     890 	.db #0x00	; 0
      000368 00                     891 	.db #0x00	; 0
      000369 00                     892 	.db #0x00	; 0
      00036A 00                     893 	.db #0x00	; 0
      00036B 00                     894 	.db #0x00	; 0
      00036C 01                     895 	.db #0x01	; 1
      00036D 00                     896 	.db #0x00	; 0
      00036E 00                     897 	.db #0x00	; 0
      00036F 00                     898 	.db #0x00	; 0
      000370 00                     899 	.db #0x00	; 0
      000371 00                     900 	.db #0x00	; 0
      000372 00                     901 	.db #0x00	; 0
      000373 00                     902 	.db #0x00	; 0
      000374 01                     903 	.db #0x01	; 1
      000375 00                     904 	.db #0x00	; 0
      000376 00                     905 	.db #0x00	; 0
      000377 00                     906 	.db #0x00	; 0
      000378 00                     907 	.db #0x00	; 0
      000379 00                     908 	.db #0x00	; 0
      00037A 00                     909 	.db #0x00	; 0
      00037B 00                     910 	.db #0x00	; 0
      00037C 01                     911 	.db #0x01	; 1
      00037D 00                     912 	.db #0x00	; 0
      00037E 00                     913 	.db #0x00	; 0
      00037F 00                     914 	.db #0x00	; 0
      000380 00                     915 	.db #0x00	; 0
      000381 00                     916 	.db #0x00	; 0
      000382 00                     917 	.db #0x00	; 0
      000383 00                     918 	.db #0x00	; 0
      000384 00                     919 	.db #0x00	; 0
      000385 01                     920 	.db #0x01	; 1
      000386 00                     921 	.db #0x00	; 0
      000387 00                     922 	.db #0x00	; 0
      000388 00                     923 	.db #0x00	; 0
      000389 00                     924 	.db #0x00	; 0
      00038A 00                     925 	.db #0x00	; 0
      00038B 00                     926 	.db #0x00	; 0
      00038C 01                     927 	.db #0x01	; 1
      00038D 00                     928 	.db #0x00	; 0
      00038E 00                     929 	.db #0x00	; 0
      00038F 00                     930 	.db #0x00	; 0
      000390 00                     931 	.db #0x00	; 0
      000391 00                     932 	.db #0x00	; 0
      000392 00                     933 	.db #0x00	; 0
      000393 00                     934 	.db #0x00	; 0
      000394 00                     935 	.db #0x00	; 0
      000395 00                     936 	.db #0x00	; 0
      000396 00                     937 	.db #0x00	; 0
      000397 00                     938 	.db #0x00	; 0
      000398 00                     939 	.db #0x00	; 0
      000399 00                     940 	.db #0x00	; 0
      00039A 00                     941 	.db #0x00	; 0
      00039B 00                     942 	.db #0x00	; 0
      00039C 01                     943 	.db #0x01	; 1
      00039D 00                     944 	.db #0x00	; 0
      00039E 00                     945 	.db #0x00	; 0
      00039F 01                     946 	.db #0x01	; 1
      0003A0 00                     947 	.db #0x00	; 0
      0003A1 00                     948 	.db #0x00	; 0
      0003A2 00                     949 	.db #0x00	; 0
      0003A3 00                     950 	.db #0x00	; 0
      0003A4 00                     951 	.db #0x00	; 0
      0003A5 00                     952 	.db #0x00	; 0
      0003A6 00                     953 	.db #0x00	; 0
      0003A7 00                     954 	.db #0x00	; 0
      0003A8 00                     955 	.db #0x00	; 0
      0003A9 00                     956 	.db #0x00	; 0
      0003AA 00                     957 	.db #0x00	; 0
      0003AB 00                     958 	.db #0x00	; 0
      0003AC 00                     959 	.db #0x00	; 0
      0003AD 00                     960 	.db #0x00	; 0
      0003AE 00                     961 	.db #0x00	; 0
      0003AF 00                     962 	.db #0x00	; 0
      0003B0 00                     963 	.db #0x00	; 0
      0003B1 00                     964 	.db #0x00	; 0
      0003B2 00                     965 	.db #0x00	; 0
      0003B3 00                     966 	.db #0x00	; 0
      0003B4 01                     967 	.db #0x01	; 1
      0003B5 00                     968 	.db #0x00	; 0
      0003B6 00                     969 	.db #0x00	; 0
      0003B7 00                     970 	.db #0x00	; 0
      0003B8 00                     971 	.db #0x00	; 0
      0003B9 00                     972 	.db #0x00	; 0
      0003BA 00                     973 	.db #0x00	; 0
      0003BB 00                     974 	.db #0x00	; 0
      0003BC 01                     975 	.db #0x01	; 1
      0003BD 01                     976 	.db #0x01	; 1
      0003BE 00                     977 	.db #0x00	; 0
      0003BF 00                     978 	.db #0x00	; 0
      0003C0 00                     979 	.db #0x00	; 0
      0003C1 00                     980 	.db #0x00	; 0
      0003C2 00                     981 	.db #0x00	; 0
      0003C3 00                     982 	.db #0x00	; 0
                                    983 ;main.c:133: void processSpritesActiveDisplay()
                                    984 ;	---------------------------------
                                    985 ; Function processSpritesActiveDisplay
                                    986 ; ---------------------------------
      0003C4                        987 _processSpritesActiveDisplay::
                                    988 ;main.c:136: SMS_addSprite(playerSpriteX + 0xF8, playerSpriteY + 0xF8, 0);
      0003C4 3Ar05r00         [13]  989 	ld	a,(#_playerSpriteY + 0)
      0003C7 C6 F8            [ 7]  990 	add	a, #0xf8
      0003C9 47               [ 4]  991 	ld	b, a
      0003CA 3Ar04r00         [13]  992 	ld	a,(#_playerSpriteX + 0)
      0003CD C6 F8            [ 7]  993 	add	a, #0xf8
      0003CF 26 00            [ 7]  994 	ld	h, #0x00
      0003D1 68               [ 4]  995 	ld	l, b
      0003D2 E5               [11]  996 	push	hl
      0003D3 F5               [11]  997 	push	af
      0003D4 33               [ 6]  998 	inc	sp
      0003D5 CDr00r00         [17]  999 	call	_SMS_addSprite
      0003D8 F1               [10] 1000 	pop	af
      0003D9 33               [ 6] 1001 	inc	sp
                                   1002 ;main.c:137: SMS_addSprite(playerSpriteX + 0x00, playerSpriteY + 0xF8, 1);
      0003DA 3Ar05r00         [13] 1003 	ld	a,(#_playerSpriteY + 0)
      0003DD C6 F8            [ 7] 1004 	add	a, #0xf8
      0003DF 26 01            [ 7] 1005 	ld	h, #0x01
      0003E1 E5               [11] 1006 	push	hl
      0003E2 33               [ 6] 1007 	inc	sp
      0003E3 F5               [11] 1008 	push	af
      0003E4 33               [ 6] 1009 	inc	sp
      0003E5 3Ar04r00         [13] 1010 	ld	a,(#_playerSpriteX + 0)
      0003E8 F5               [11] 1011 	push	af
      0003E9 33               [ 6] 1012 	inc	sp
      0003EA CDr00r00         [17] 1013 	call	_SMS_addSprite
      0003ED F1               [10] 1014 	pop	af
      0003EE 33               [ 6] 1015 	inc	sp
                                   1016 ;main.c:138: SMS_addSprite(playerSpriteX + 0xF8, playerSpriteY + 0x00, 2);
      0003EF 3Ar04r00         [13] 1017 	ld	a,(#_playerSpriteX + 0)
      0003F2 C6 F8            [ 7] 1018 	add	a, #0xf8
      0003F4 26 02            [ 7] 1019 	ld	h, #0x02
      0003F6 E5               [11] 1020 	push	hl
      0003F7 33               [ 6] 1021 	inc	sp
      0003F8 FD 21r05r00      [14] 1022 	ld	iy, #_playerSpriteY
      0003FC FD 66 00         [19] 1023 	ld	h, 0 (iy)
      0003FF E5               [11] 1024 	push	hl
      000400 33               [ 6] 1025 	inc	sp
      000401 F5               [11] 1026 	push	af
      000402 33               [ 6] 1027 	inc	sp
      000403 CDr00r00         [17] 1028 	call	_SMS_addSprite
      000406 F1               [10] 1029 	pop	af
      000407 33               [ 6] 1030 	inc	sp
                                   1031 ;main.c:139: SMS_addSprite(playerSpriteX + 0x00, playerSpriteY + 0x00, 3);
      000408 3E 03            [ 7] 1032 	ld	a, #0x03
      00040A F5               [11] 1033 	push	af
      00040B 33               [ 6] 1034 	inc	sp
      00040C 3Ar05r00         [13] 1035 	ld	a,(#_playerSpriteY + 0)
      00040F F5               [11] 1036 	push	af
      000410 33               [ 6] 1037 	inc	sp
      000411 3Ar04r00         [13] 1038 	ld	a,(#_playerSpriteX + 0)
      000414 F5               [11] 1039 	push	af
      000415 33               [ 6] 1040 	inc	sp
      000416 CDr00r00         [17] 1041 	call	_SMS_addSprite
      000419 F1               [10] 1042 	pop	af
      00041A 33               [ 6] 1043 	inc	sp
                                   1044 ;main.c:143: if (action == ACTION_ATTACK)
      00041B 3Ar08r00         [13] 1045 	ld	a,(#_action + 0)
      00041E 3D               [ 4] 1046 	dec	a
      00041F C0               [11] 1047 	ret	NZ
                                   1048 ;main.c:146: if (actionCount == 5) checkForAttackInteraction();
      000420 3Ar07r00         [13] 1049 	ld	a,(#_actionCount + 0)
      000423 D6 05            [ 7] 1050 	sub	a, #0x05
      000425 20 03            [12] 1051 	jr	NZ, 00102$
      000427 CDr84r0A         [17] 1052 	call	_checkForAttackInteraction
      00042A                       1053 00102$:
                                   1054 ;main.c:148: currentAttackSprites = attackSprites + ((actionCount & 14) << 3);
      00042A 3Ar07r00         [13] 1055 	ld	a,(#_actionCount + 0)
      00042D E6 0E            [ 7] 1056 	and	a, #0x0e
      00042F 26 00            [ 7] 1057 	ld	h, #0x00
      000431 6F               [ 4] 1058 	ld	l, a
      000432 29               [11] 1059 	add	hl, hl
      000433 29               [11] 1060 	add	hl, hl
      000434 29               [11] 1061 	add	hl, hl
      000435 EB               [ 4] 1062 	ex	de,hl
      000436 21r02r00         [10] 1063 	ld	hl, #_currentAttackSprites
      000439 FD 21r00r00      [14] 1064 	ld	iy, #_attackSprites
      00043D FD 7E 00         [19] 1065 	ld	a, 0 (iy)
      000440 83               [ 4] 1066 	add	a, e
      000441 77               [ 7] 1067 	ld	(hl), a
      000442 FD 7E 01         [19] 1068 	ld	a, 1 (iy)
      000445 8A               [ 4] 1069 	adc	a, d
      000446 23               [ 6] 1070 	inc	hl
      000447 77               [ 7] 1071 	ld	(hl), a
                                   1072 ;main.c:149: SMS_addSprite(playerSpriteX + *(currentAttackSprites + 0), playerSpriteY + *(currentAttackSprites + 1), *(currentAttackSprites + 2));
      000448 2Ar02r00         [16] 1073 	ld	hl, (_currentAttackSprites)
      00044B 23               [ 6] 1074 	inc	hl
      00044C 23               [ 6] 1075 	inc	hl
      00044D 4E               [ 7] 1076 	ld	c, (hl)
      00044E 2Ar02r00         [16] 1077 	ld	hl, (_currentAttackSprites)
      000451 23               [ 6] 1078 	inc	hl
      000452 7E               [ 7] 1079 	ld	a, (hl)
      000453 21r05r00         [10] 1080 	ld	hl, #_playerSpriteY
      000456 86               [ 7] 1081 	add	a, (hl)
      000457 47               [ 4] 1082 	ld	b, a
      000458 2Ar02r00         [16] 1083 	ld	hl, (_currentAttackSprites)
      00045B 7E               [ 7] 1084 	ld	a, (hl)
      00045C 21r04r00         [10] 1085 	ld	hl, #_playerSpriteX
      00045F 86               [ 7] 1086 	add	a, (hl)
      000460 61               [ 4] 1087 	ld	h, c
      000461 68               [ 4] 1088 	ld	l, b
      000462 E5               [11] 1089 	push	hl
      000463 F5               [11] 1090 	push	af
      000464 33               [ 6] 1091 	inc	sp
      000465 CDr00r00         [17] 1092 	call	_SMS_addSprite
      000468 F1               [10] 1093 	pop	af
      000469 33               [ 6] 1094 	inc	sp
                                   1095 ;main.c:150: SMS_addSprite(playerSpriteX + *(currentAttackSprites + 3), playerSpriteY + *(currentAttackSprites + 4), *(currentAttackSprites + 5));
      00046A 2Ar02r00         [16] 1096 	ld	hl, (_currentAttackSprites)
      00046D 11 05 00         [10] 1097 	ld	de, #0x0005
      000470 19               [11] 1098 	add	hl, de
      000471 4E               [ 7] 1099 	ld	c, (hl)
      000472 2Ar02r00         [16] 1100 	ld	hl, (_currentAttackSprites)
      000475 11 04 00         [10] 1101 	ld	de, #0x0004
      000478 19               [11] 1102 	add	hl, de
      000479 7E               [ 7] 1103 	ld	a, (hl)
      00047A 21r05r00         [10] 1104 	ld	hl, #_playerSpriteY
      00047D 86               [ 7] 1105 	add	a, (hl)
      00047E 47               [ 4] 1106 	ld	b, a
      00047F 2Ar02r00         [16] 1107 	ld	hl, (_currentAttackSprites)
      000482 23               [ 6] 1108 	inc	hl
      000483 23               [ 6] 1109 	inc	hl
      000484 23               [ 6] 1110 	inc	hl
      000485 7E               [ 7] 1111 	ld	a, (hl)
      000486 21r04r00         [10] 1112 	ld	hl, #_playerSpriteX
      000489 86               [ 7] 1113 	add	a, (hl)
      00048A 61               [ 4] 1114 	ld	h, c
      00048B 68               [ 4] 1115 	ld	l, b
      00048C E5               [11] 1116 	push	hl
      00048D F5               [11] 1117 	push	af
      00048E 33               [ 6] 1118 	inc	sp
      00048F CDr00r00         [17] 1119 	call	_SMS_addSprite
      000492 F1               [10] 1120 	pop	af
      000493 33               [ 6] 1121 	inc	sp
                                   1122 ;main.c:151: SMS_addSprite(playerSpriteX + *(currentAttackSprites + 6), playerSpriteY + *(currentAttackSprites + 7), *(currentAttackSprites + 8));
      000494 2Ar02r00         [16] 1123 	ld	hl, (_currentAttackSprites)
      000497 11 08 00         [10] 1124 	ld	de, #0x0008
      00049A 19               [11] 1125 	add	hl, de
      00049B 4E               [ 7] 1126 	ld	c, (hl)
      00049C 2Ar02r00         [16] 1127 	ld	hl, (_currentAttackSprites)
      00049F 11 07 00         [10] 1128 	ld	de, #0x0007
      0004A2 19               [11] 1129 	add	hl, de
      0004A3 7E               [ 7] 1130 	ld	a, (hl)
      0004A4 21r05r00         [10] 1131 	ld	hl, #_playerSpriteY
      0004A7 86               [ 7] 1132 	add	a, (hl)
      0004A8 47               [ 4] 1133 	ld	b, a
      0004A9 2Ar02r00         [16] 1134 	ld	hl, (_currentAttackSprites)
      0004AC 11 06 00         [10] 1135 	ld	de, #0x0006
      0004AF 19               [11] 1136 	add	hl, de
      0004B0 7E               [ 7] 1137 	ld	a, (hl)
      0004B1 21r04r00         [10] 1138 	ld	hl, #_playerSpriteX
      0004B4 86               [ 7] 1139 	add	a, (hl)
      0004B5 61               [ 4] 1140 	ld	h, c
      0004B6 68               [ 4] 1141 	ld	l, b
      0004B7 E5               [11] 1142 	push	hl
      0004B8 F5               [11] 1143 	push	af
      0004B9 33               [ 6] 1144 	inc	sp
      0004BA CDr00r00         [17] 1145 	call	_SMS_addSprite
      0004BD F1               [10] 1146 	pop	af
      0004BE 33               [ 6] 1147 	inc	sp
                                   1148 ;main.c:152: SMS_addSprite(playerSpriteX + *(currentAttackSprites + 9), playerSpriteY + *(currentAttackSprites + 10), *(currentAttackSprites + 11));
      0004BF 2Ar02r00         [16] 1149 	ld	hl, (_currentAttackSprites)
      0004C2 11 0B 00         [10] 1150 	ld	de, #0x000b
      0004C5 19               [11] 1151 	add	hl, de
      0004C6 4E               [ 7] 1152 	ld	c, (hl)
      0004C7 2Ar02r00         [16] 1153 	ld	hl, (_currentAttackSprites)
      0004CA 11 0A 00         [10] 1154 	ld	de, #0x000a
      0004CD 19               [11] 1155 	add	hl, de
      0004CE 7E               [ 7] 1156 	ld	a, (hl)
      0004CF 21r05r00         [10] 1157 	ld	hl, #_playerSpriteY
      0004D2 86               [ 7] 1158 	add	a, (hl)
      0004D3 47               [ 4] 1159 	ld	b, a
      0004D4 2Ar02r00         [16] 1160 	ld	hl, (_currentAttackSprites)
      0004D7 11 09 00         [10] 1161 	ld	de, #0x0009
      0004DA 19               [11] 1162 	add	hl, de
      0004DB 7E               [ 7] 1163 	ld	a, (hl)
      0004DC 21r04r00         [10] 1164 	ld	hl, #_playerSpriteX
      0004DF 86               [ 7] 1165 	add	a, (hl)
      0004E0 61               [ 4] 1166 	ld	h, c
      0004E1 68               [ 4] 1167 	ld	l, b
      0004E2 E5               [11] 1168 	push	hl
      0004E3 F5               [11] 1169 	push	af
      0004E4 33               [ 6] 1170 	inc	sp
      0004E5 CDr00r00         [17] 1171 	call	_SMS_addSprite
      0004E8 F1               [10] 1172 	pop	af
      0004E9 33               [ 6] 1173 	inc	sp
                                   1174 ;main.c:154: }
      0004EA C9               [10] 1175 	ret
                                   1176 ;main.c:157: void processSpritesVBlank()
                                   1177 ;	---------------------------------
                                   1178 ; Function processSpritesVBlank
                                   1179 ; ---------------------------------
      0004EB                       1180 _processSpritesVBlank::
                                   1181 ;main.c:160: UNSAFE_SMS_copySpritestoSAT();
      0004EB CDr00r00         [17] 1182 	call	_UNSAFE_SMS_copySpritestoSAT
                                   1183 ;main.c:163: if (action == ACTION_ATTACK) 
      0004EE 3Ar08r00         [13] 1184 	ld	a,(#_action + 0)
      0004F1 3D               [ 4] 1185 	dec	a
      0004F2 20 49            [12] 1186 	jr	NZ, 00102$
                                   1187 ;main.c:165: UNSAFE_SMS_load4Tiles(sprite_tiles_bin + *(spriteTileOffsets + ((actionCount & 14) >> 1)), 256);
      0004F4 3Ar07r00         [13] 1188 	ld	a,(#_actionCount + 0)
      0004F7 E6 0E            [ 7] 1189 	and	a, #0x0e
      0004F9 5F               [ 4] 1190 	ld	e, a
      0004FA 16 00            [ 7] 1191 	ld	d, #0x00
      0004FC CB 2A            [ 8] 1192 	sra	d
      0004FE CB 1B            [ 8] 1193 	rr	e
      000500 EB               [ 4] 1194 	ex	de, hl
      000501 29               [11] 1195 	add	hl, hl
      000502 EB               [ 4] 1196 	ex	de, hl
      000503 2Ar0Ar00         [16] 1197 	ld	hl, (_spriteTileOffsets)
      000506 19               [11] 1198 	add	hl, de
      000507 4E               [ 7] 1199 	ld	c, (hl)
      000508 23               [ 6] 1200 	inc	hl
      000509 46               [ 7] 1201 	ld	b, (hl)
      00050A 21r00r00         [10] 1202 	ld	hl, #_sprite_tiles_bin
      00050D 09               [11] 1203 	add	hl, bc
      00050E E5               [11] 1204 	push	hl
      00050F 21 00 20         [10] 1205 	ld	hl, #0x2000
      000512 E5               [11] 1206 	push	hl
      000513 CDr00r00         [17] 1207 	call	_UNSAFE_SMS_VRAMmemcpy128
      000516 F1               [10] 1208 	pop	af
      000517 F1               [10] 1209 	pop	af
                                   1210 ;main.c:166: UNSAFE_SMS_load4Tiles(128 + sprite_tiles_bin + *(spriteTileOffsets + ((actionCount & 14) >> 1)), 260);
      000518 3Ar07r00         [13] 1211 	ld	a,(#_actionCount + 0)
      00051B E6 0E            [ 7] 1212 	and	a, #0x0e
      00051D 5F               [ 4] 1213 	ld	e, a
      00051E 16 00            [ 7] 1214 	ld	d, #0x00
      000520 CB 2A            [ 8] 1215 	sra	d
      000522 CB 1B            [ 8] 1216 	rr	e
      000524 EB               [ 4] 1217 	ex	de, hl
      000525 29               [11] 1218 	add	hl, hl
      000526 EB               [ 4] 1219 	ex	de, hl
      000527 2Ar0Ar00         [16] 1220 	ld	hl, (_spriteTileOffsets)
      00052A 19               [11] 1221 	add	hl, de
      00052B 4E               [ 7] 1222 	ld	c, (hl)
      00052C 23               [ 6] 1223 	inc	hl
      00052D 46               [ 7] 1224 	ld	b, (hl)
      00052E 21r80r00         [10] 1225 	ld	hl, #(_sprite_tiles_bin + 0x0080)
      000531 09               [11] 1226 	add	hl, bc
      000532 E5               [11] 1227 	push	hl
      000533 21 80 20         [10] 1228 	ld	hl, #0x2080
      000536 E5               [11] 1229 	push	hl
      000537 CDr00r00         [17] 1230 	call	_UNSAFE_SMS_VRAMmemcpy128
      00053A F1               [10] 1231 	pop	af
      00053B F1               [10] 1232 	pop	af
      00053C C9               [10] 1233 	ret
      00053D                       1234 00102$:
                                   1235 ;main.c:170: else UNSAFE_SMS_load4Tiles(sprite_tiles_bin + *(spriteTileOffsets + animationCount), 256);
      00053D 3Ar06r00         [13] 1236 	ld	a, (#_animationCount + 0)
      000540 6F               [ 4] 1237 	ld	l, a
      000541 26 00            [ 7] 1238 	ld	h, #0x00
      000543 29               [11] 1239 	add	hl, hl
      000544 4D               [ 4] 1240 	ld	c, l
      000545 44               [ 4] 1241 	ld	b, h
      000546 2Ar0Ar00         [16] 1242 	ld	hl, (_spriteTileOffsets)
      000549 09               [11] 1243 	add	hl, bc
      00054A 4E               [ 7] 1244 	ld	c, (hl)
      00054B 23               [ 6] 1245 	inc	hl
      00054C 46               [ 7] 1246 	ld	b, (hl)
      00054D 21r00r00         [10] 1247 	ld	hl, #_sprite_tiles_bin
      000550 09               [11] 1248 	add	hl, bc
      000551 E5               [11] 1249 	push	hl
      000552 21 00 20         [10] 1250 	ld	hl, #0x2000
      000555 E5               [11] 1251 	push	hl
      000556 CDr00r00         [17] 1252 	call	_UNSAFE_SMS_VRAMmemcpy128
      000559 F1               [10] 1253 	pop	af
      00055A F1               [10] 1254 	pop	af
                                   1255 ;main.c:171: }
      00055B C9               [10] 1256 	ret
                                   1257 ;main.c:176: void processUserInput()
                                   1258 ;	---------------------------------
                                   1259 ; Function processUserInput
                                   1260 ; ---------------------------------
      00055C                       1261 _processUserInput::
                                   1262 ;main.c:178: unsigned int ks = SMS_getKeysStatus(); 
      00055C CDr00r00         [17] 1263 	call	_SMS_getKeysStatus
      00055F EB               [ 4] 1264 	ex	de, hl
                                   1265 ;main.c:181: action = ACTION_STATIONARY;
      000560 21r08r00         [10] 1266 	ld	hl, #_action
      000563 36 02            [10] 1267 	ld	(hl), #0x02
                                   1268 ;main.c:182: scrollXOffset = 0;
      000565 21r0Cr00         [10] 1269 	ld	hl, #_scrollXOffset
      000568 36 00            [10] 1270 	ld	(hl), #0x00
                                   1271 ;main.c:183: scrollYOffset = 0;
      00056A 21r0Dr00         [10] 1272 	ld	hl, #_scrollYOffset
      00056D 36 00            [10] 1273 	ld	(hl), #0x00
                                   1274 ;main.c:184: playerXOffset = 0;
      00056F 21 00 00         [10] 1275 	ld	hl, #0x0000
      000572 22r10r00         [16] 1276 	ld	(_playerXOffset), hl
                                   1277 ;main.c:185: playerYOffset = 0;
      000575 6C               [ 4] 1278 	ld	l, h
      000576 22r12r00         [16] 1279 	ld	(_playerYOffset), hl
                                   1280 ;main.c:186: spriteXOffset = 0;
                                   1281 ;main.c:187: spriteYOffset = 0;
      000579 3E 00            [ 7] 1282 	ld	a,#0x00
      00057B 32r0Er00         [13] 1283 	ld	(#_spriteXOffset),a
      00057E 32r0Fr00         [13] 1284 	ld	(#_spriteYOffset), a
                                   1285 ;main.c:189: if (actionButtonWatch == 0 && (ks & PORT_A_KEY_2))
      000581 FD 21r09r00      [14] 1286 	ld	iy, #_actionButtonWatch
      000585 FD 7E 00         [19] 1287 	ld	a, 0 (iy)
      000588 B7               [ 4] 1288 	or	a, a
      000589 20 05            [12] 1289 	jr	NZ, 00113$
      00058B CB 6B            [ 8] 1290 	bit	5, e
                                   1291 ;main.c:191: processAttackKey();
                                   1292 ;main.c:192: return;
      00058D C2r11r0A         [10] 1293 	jp	NZ,_processAttackKey
      000590                       1294 00113$:
                                   1295 ;main.c:194: else if (ks & PORT_A_KEY_UP)
      000590 CB 43            [ 8] 1296 	bit	0, e
                                   1297 ;main.c:196: processUpKey();
                                   1298 ;main.c:197: return;
      000592 C2rA5r05         [10] 1299 	jp	NZ,_processUpKey
                                   1300 ;main.c:200: else if (ks & PORT_A_KEY_DOWN)
      000595 CB 4B            [ 8] 1301 	bit	1, e
                                   1302 ;main.c:202: processDownKey();
                                   1303 ;main.c:203: return;
      000597 C2rF4r06         [10] 1304 	jp	NZ,_processDownKey
                                   1305 ;main.c:206: else if (ks & PORT_A_KEY_LEFT)
      00059A CB 53            [ 8] 1306 	bit	2, e
                                   1307 ;main.c:208: processLeftKey();
                                   1308 ;main.c:209: return;
      00059C C2r57r08         [10] 1309 	jp	NZ,_processLeftKey
                                   1310 ;main.c:212: else if (ks & PORT_A_KEY_RIGHT)
      00059F CB 5B            [ 8] 1311 	bit	3, e
                                   1312 ;main.c:214: processRightKey();
                                   1313 ;main.c:215: return;
      0005A1 C2r35r09         [10] 1314 	jp	NZ,_processRightKey
                                   1315 ;main.c:217: }
      0005A4 C9               [10] 1316 	ret
                                   1317 ;main.c:220: void processUpKey()
                                   1318 ;	---------------------------------
                                   1319 ; Function processUpKey
                                   1320 ; ---------------------------------
      0005A5                       1321 _processUpKey::
      0005A5 DD E5            [15] 1322 	push	ix
      0005A7 DD 21 00 00      [14] 1323 	ld	ix,#0
      0005AB DD 39            [15] 1324 	add	ix,sp
      0005AD F5               [11] 1325 	push	af
                                   1326 ;main.c:224: unsigned char topLeftMetatile = *(GSL_metatileLookup(playerX - 8, playerY - 1));
      0005AE ED 5Br02r00      [20] 1327 	ld	de, (_playerY)
      0005B2 1B               [ 6] 1328 	dec	de
      0005B3 FD 21r00r00      [14] 1329 	ld	iy, #_playerX
      0005B7 FD 7E 00         [19] 1330 	ld	a, 0 (iy)
      0005BA C6 F8            [ 7] 1331 	add	a, #0xf8
      0005BC 4F               [ 4] 1332 	ld	c, a
      0005BD FD 7E 01         [19] 1333 	ld	a, 1 (iy)
      0005C0 CE FF            [ 7] 1334 	adc	a, #0xff
      0005C2 47               [ 4] 1335 	ld	b, a
      0005C3 D5               [11] 1336 	push	de
      0005C4 C5               [11] 1337 	push	bc
      0005C5 CDr00r00         [17] 1338 	call	_GSL_metatileLookup
      0005C8 F1               [10] 1339 	pop	af
      0005C9 F1               [10] 1340 	pop	af
      0005CA 7E               [ 7] 1341 	ld	a, (hl)
      0005CB DD 77 FE         [19] 1342 	ld	-2 (ix), a
                                   1343 ;main.c:225: unsigned char topRightMetatile = *(GSL_metatileLookup(playerX + 7, playerY - 1));
      0005CE ED 4Br02r00      [20] 1344 	ld	bc, (_playerY)
      0005D2 0B               [ 6] 1345 	dec	bc
      0005D3 2Ar00r00         [16] 1346 	ld	hl, (_playerX)
      0005D6 11 07 00         [10] 1347 	ld	de, #0x0007
      0005D9 19               [11] 1348 	add	hl, de
      0005DA C5               [11] 1349 	push	bc
      0005DB E5               [11] 1350 	push	hl
      0005DC CDr00r00         [17] 1351 	call	_GSL_metatileLookup
      0005DF F1               [10] 1352 	pop	af
      0005E0 F1               [10] 1353 	pop	af
      0005E1 4E               [ 7] 1354 	ld	c, (hl)
                                   1355 ;main.c:233: animationCount = (animationCount - 1) & 3;
      0005E2 3Ar06r00         [13] 1356 	ld	a,(#_animationCount + 0)
      0005E5 3D               [ 4] 1357 	dec	a
      0005E6 E6 03            [ 7] 1358 	and	a, #0x03
      0005E8 DD 77 FF         [19] 1359 	ld	-1 (ix), a
                                   1360 ;main.c:228: if (playerY == 8 || ((metatilesMetaLUT[topLeftMetatile] & 1) == 0 && (metatilesMetaLUT[topRightMetatile] & 1)  == 0))
      0005EB FD 21r02r00      [14] 1361 	ld	iy, #_playerY
      0005EF FD 7E 00         [19] 1362 	ld	a, 0 (iy)
      0005F2 D6 08            [ 7] 1363 	sub	a, #0x08
      0005F4 FD B6 01         [19] 1364 	or	a, 1 (iy)
      0005F7 28 23            [12] 1365 	jr	Z, 00101$
      0005F9 3ErC4            [ 7] 1366 	ld	a, #<(_metatilesMetaLUT)
      0005FB DD 86 FE         [19] 1367 	add	a, -2 (ix)
      0005FE 6F               [ 4] 1368 	ld	l, a
      0005FF 3Es02            [ 7] 1369 	ld	a, #>(_metatilesMetaLUT)
      000601 CE 00            [ 7] 1370 	adc	a, #0x00
      000603 67               [ 4] 1371 	ld	h, a
      000604 6E               [ 7] 1372 	ld	l, (hl)
      000605 7D               [ 4] 1373 	ld	a, l
      000606 E6 01            [ 7] 1374 	and	a, #0x01
      000608 5F               [ 4] 1375 	ld	e, a
      000609 16 00            [ 7] 1376 	ld	d, #0x00
      00060B 3ErC4            [ 7] 1377 	ld	a, #<(_metatilesMetaLUT)
      00060D 81               [ 4] 1378 	add	a, c
      00060E 4F               [ 4] 1379 	ld	c, a
      00060F 3Es02            [ 7] 1380 	ld	a, #>(_metatilesMetaLUT)
      000611 CE 00            [ 7] 1381 	adc	a, #0x00
      000613 47               [ 4] 1382 	ld	b, a
      000614 7A               [ 4] 1383 	ld	a, d
      000615 B3               [ 4] 1384 	or	a, e
      000616 20 3E            [12] 1385 	jr	NZ, 00102$
      000618 0A               [ 7] 1386 	ld	a, (bc)
      000619 0F               [ 4] 1387 	rrca
      00061A 38 3A            [12] 1388 	jr	C, 00102$
      00061C                       1389 00101$:
                                   1390 ;main.c:231: action = ACTION_MOVE;
      00061C 21r08r00         [10] 1391 	ld	hl, #_action
      00061F 36 00            [10] 1392 	ld	(hl), #0x00
                                   1393 ;main.c:232: direction = DIRECTION_UP;
      000621 21r14r00         [10] 1394 	ld	hl, #_direction
      000624 36 00            [10] 1395 	ld	(hl), #0x00
                                   1396 ;main.c:233: animationCount = (animationCount - 1) & 3;
      000626 DD 7E FF         [19] 1397 	ld	a, -1 (ix)
      000629 32r06r00         [13] 1398 	ld	(#_animationCount),a
                                   1399 ;main.c:234: actionCount = 4;
      00062C 21r07r00         [10] 1400 	ld	hl, #_actionCount
      00062F 36 04            [10] 1401 	ld	(hl), #0x04
                                   1402 ;main.c:235: spriteTileOffsets = spriteMoveUp;
      000631 21r4Cr01         [10] 1403 	ld	hl, #_spriteMoveUp+0
      000634 22r0Ar00         [16] 1404 	ld	(_spriteTileOffsets), hl
                                   1405 ;main.c:237: scrollXOffset = 0;
      000637 21r0Cr00         [10] 1406 	ld	hl, #_scrollXOffset
      00063A 36 00            [10] 1407 	ld	(hl), #0x00
                                   1408 ;main.c:238: scrollYOffset = 0;
      00063C 21r0Dr00         [10] 1409 	ld	hl, #_scrollYOffset
      00063F 36 00            [10] 1410 	ld	(hl), #0x00
                                   1411 ;main.c:239: playerXOffset = 0;
      000641 21 00 00         [10] 1412 	ld	hl, #0x0000
      000644 22r10r00         [16] 1413 	ld	(_playerXOffset), hl
                                   1414 ;main.c:240: playerYOffset = 0;
      000647 6C               [ 4] 1415 	ld	l, h
      000648 22r12r00         [16] 1416 	ld	(_playerYOffset), hl
                                   1417 ;main.c:241: spriteXOffset = 0;
                                   1418 ;main.c:242: spriteYOffset = 0;
      00064B 3E 00            [ 7] 1419 	ld	a,#0x00
      00064D 32r0Er00         [13] 1420 	ld	(#_spriteXOffset),a
      000650 32r0Fr00         [13] 1421 	ld	(#_spriteYOffset), a
                                   1422 ;main.c:244: return;
      000653 C3rEFr06         [10] 1423 	jp	00115$
      000656                       1424 00102$:
                                   1425 ;main.c:249: if ((metatilesMetaLUT[topLeftMetatile] & 1) == 1 && (metatilesMetaLUT[topRightMetatile] & 1)  == 0)
      000656 7D               [ 4] 1426 	ld	a, l
      000657 E6 01            [ 7] 1427 	and	a, #0x01
      000659 6F               [ 4] 1428 	ld	l, a
      00065A 26 00            [ 7] 1429 	ld	h, #0x00
      00065C 7D               [ 4] 1430 	ld	a, l
      00065D 3D               [ 4] 1431 	dec	a
      00065E B4               [ 4] 1432 	or	a, h
      00065F 20 0A            [12] 1433 	jr	NZ, 00106$
      000661 0A               [ 7] 1434 	ld	a, (bc)
      000662 0F               [ 4] 1435 	rrca
      000663 38 06            [12] 1436 	jr	C, 00106$
                                   1437 ;main.c:251: processLeftKey();
      000665 CDr57r08         [17] 1438 	call	_processLeftKey
                                   1439 ;main.c:252: return;
      000668 C3rEFr06         [10] 1440 	jp	00115$
      00066B                       1441 00106$:
                                   1442 ;main.c:254: if ((metatilesMetaLUT[topLeftMetatile] & 1) == 0 && (metatilesMetaLUT[topRightMetatile] & 1)  == 1)
      00066B 7A               [ 4] 1443 	ld	a, d
      00066C B3               [ 4] 1444 	or	a, e
      00066D 20 10            [12] 1445 	jr	NZ, 00109$
      00066F 0A               [ 7] 1446 	ld	a, (bc)
      000670 E6 01            [ 7] 1447 	and	a, #0x01
      000672 4F               [ 4] 1448 	ld	c, a
      000673 06 00            [ 7] 1449 	ld	b, #0x00
      000675 79               [ 4] 1450 	ld	a, c
      000676 3D               [ 4] 1451 	dec	a
      000677 B0               [ 4] 1452 	or	a, b
      000678 20 05            [12] 1453 	jr	NZ, 00109$
                                   1454 ;main.c:256: processRightKey();
      00067A CDr35r09         [17] 1455 	call	_processRightKey
                                   1456 ;main.c:257: return;
      00067D 18 70            [12] 1457 	jr	00115$
      00067F                       1458 00109$:
                                   1459 ;main.c:261: action = ACTION_MOVE;
      00067F 21r08r00         [10] 1460 	ld	hl, #_action
      000682 36 00            [10] 1461 	ld	(hl), #0x00
                                   1462 ;main.c:262: direction = DIRECTION_UP;
      000684 21r14r00         [10] 1463 	ld	hl, #_direction
      000687 36 00            [10] 1464 	ld	(hl), #0x00
                                   1465 ;main.c:263: animationCount = (animationCount - 1) & 3;
      000689 DD 7E FF         [19] 1466 	ld	a, -1 (ix)
      00068C 32r06r00         [13] 1467 	ld	(#_animationCount),a
                                   1468 ;main.c:264: actionCount = 4;
      00068F 21r07r00         [10] 1469 	ld	hl, #_actionCount
      000692 36 04            [10] 1470 	ld	(hl), #0x04
                                   1471 ;main.c:265: spriteTileOffsets = spriteMoveUp;
      000694 21r4Cr01         [10] 1472 	ld	hl, #_spriteMoveUp+0
      000697 22r0Ar00         [16] 1473 	ld	(_spriteTileOffsets), hl
                                   1474 ;main.c:267: scrollXOffset = 0;
      00069A 21r0Cr00         [10] 1475 	ld	hl, #_scrollXOffset
      00069D 36 00            [10] 1476 	ld	(hl), #0x00
                                   1477 ;main.c:268: playerXOffset = 0;
      00069F 21 00 00         [10] 1478 	ld	hl, #0x0000
      0006A2 22r10r00         [16] 1479 	ld	(_playerXOffset), hl
                                   1480 ;main.c:269: spriteXOffset = 0;
      0006A5 21r0Er00         [10] 1481 	ld	hl, #_spriteXOffset
      0006A8 36 00            [10] 1482 	ld	(hl), #0x00
                                   1483 ;main.c:270: playerYOffset = 0xFFFE;
      0006AA 21 FE FF         [10] 1484 	ld	hl, #0xfffe
      0006AD 22r12r00         [16] 1485 	ld	(_playerYOffset), hl
                                   1486 ;main.c:274: if (playerY <= 96 || playerY > GSL_getMapHeightInPixels() - 96)
      0006B0 3E 60            [ 7] 1487 	ld	a, #0x60
      0006B2 FD 21r02r00      [14] 1488 	ld	iy, #_playerY
      0006B6 FD BE 00         [19] 1489 	cp	a, 0 (iy)
      0006B9 3E 00            [ 7] 1490 	ld	a, #0x00
      0006BB FD 9E 01         [19] 1491 	sbc	a, 1 (iy)
      0006BE 30 19            [12] 1492 	jr	NC, 00111$
      0006C0 CDr00r00         [17] 1493 	call	_GSL_getMapHeightInPixels
      0006C3 7D               [ 4] 1494 	ld	a, l
      0006C4 C6 A0            [ 7] 1495 	add	a, #0xa0
      0006C6 4F               [ 4] 1496 	ld	c, a
      0006C7 7C               [ 4] 1497 	ld	a, h
      0006C8 CE FF            [ 7] 1498 	adc	a, #0xff
      0006CA 47               [ 4] 1499 	ld	b, a
      0006CB 79               [ 4] 1500 	ld	a, c
      0006CC FD 21r02r00      [14] 1501 	ld	iy, #_playerY
      0006D0 FD 96 00         [19] 1502 	sub	a, 0 (iy)
      0006D3 78               [ 4] 1503 	ld	a, b
      0006D4 FD 9E 01         [19] 1504 	sbc	a, 1 (iy)
      0006D7 30 0C            [12] 1505 	jr	NC, 00112$
      0006D9                       1506 00111$:
                                   1507 ;main.c:276: spriteYOffset = 0xFE;
      0006D9 3E FE            [ 7] 1508 	ld	a, #0xfe
      0006DB 32r0Fr00         [13] 1509 	ld	(#_spriteYOffset), a
                                   1510 ;main.c:277: scrollYOffset = 0;
      0006DE 3E 00            [ 7] 1511 	ld	a, #0x00
      0006E0 32r0Dr00         [13] 1512 	ld	(#_scrollYOffset), a
      0006E3 18 0A            [12] 1513 	jr	00115$
      0006E5                       1514 00112$:
                                   1515 ;main.c:281: spriteYOffset = 0;
      0006E5 3E 00            [ 7] 1516 	ld	a, #0x00
      0006E7 32r0Fr00         [13] 1517 	ld	(#_spriteYOffset), a
                                   1518 ;main.c:282: scrollYOffset = 0xFE;
      0006EA 3E FE            [ 7] 1519 	ld	a, #0xfe
      0006EC 32r0Dr00         [13] 1520 	ld	(#_scrollYOffset), a
      0006EF                       1521 00115$:
                                   1522 ;main.c:284: }
      0006EF DD F9            [10] 1523 	ld	sp, ix
      0006F1 DD E1            [14] 1524 	pop	ix
      0006F3 C9               [10] 1525 	ret
                                   1526 ;main.c:287: void processDownKey()
                                   1527 ;	---------------------------------
                                   1528 ; Function processDownKey
                                   1529 ; ---------------------------------
      0006F4                       1530 _processDownKey::
      0006F4 DD E5            [15] 1531 	push	ix
      0006F6 DD 21 00 00      [14] 1532 	ld	ix,#0
      0006FA DD 39            [15] 1533 	add	ix,sp
      0006FC F5               [11] 1534 	push	af
      0006FD 3B               [ 6] 1535 	dec	sp
                                   1536 ;main.c:291: unsigned char bottomLeftMetatile = *(GSL_metatileLookup(playerX - 8, playerY + 8));
      0006FE FD 21r02r00      [14] 1537 	ld	iy, #_playerY
      000702 FD 7E 00         [19] 1538 	ld	a, 0 (iy)
      000705 C6 08            [ 7] 1539 	add	a, #0x08
      000707 5F               [ 4] 1540 	ld	e, a
      000708 FD 7E 01         [19] 1541 	ld	a, 1 (iy)
      00070B CE 00            [ 7] 1542 	adc	a, #0x00
      00070D 57               [ 4] 1543 	ld	d, a
      00070E FD 21r00r00      [14] 1544 	ld	iy, #_playerX
      000712 FD 7E 00         [19] 1545 	ld	a, 0 (iy)
      000715 C6 F8            [ 7] 1546 	add	a, #0xf8
      000717 4F               [ 4] 1547 	ld	c, a
      000718 FD 7E 01         [19] 1548 	ld	a, 1 (iy)
      00071B CE FF            [ 7] 1549 	adc	a, #0xff
      00071D 47               [ 4] 1550 	ld	b, a
      00071E D5               [11] 1551 	push	de
      00071F C5               [11] 1552 	push	bc
      000720 CDr00r00         [17] 1553 	call	_GSL_metatileLookup
      000723 F1               [10] 1554 	pop	af
      000724 F1               [10] 1555 	pop	af
      000725 7E               [ 7] 1556 	ld	a, (hl)
      000726 DD 77 FD         [19] 1557 	ld	-3 (ix), a
                                   1558 ;main.c:292: unsigned char bottomRightMetatile = *(GSL_metatileLookup(playerX + 7, playerY + 8));
      000729 FD 21r02r00      [14] 1559 	ld	iy, #_playerY
      00072D FD 7E 00         [19] 1560 	ld	a, 0 (iy)
      000730 C6 08            [ 7] 1561 	add	a, #0x08
      000732 4F               [ 4] 1562 	ld	c, a
      000733 FD 7E 01         [19] 1563 	ld	a, 1 (iy)
      000736 CE 00            [ 7] 1564 	adc	a, #0x00
      000738 47               [ 4] 1565 	ld	b, a
      000739 2Ar00r00         [16] 1566 	ld	hl, (_playerX)
      00073C 11 07 00         [10] 1567 	ld	de, #0x0007
      00073F 19               [11] 1568 	add	hl, de
      000740 C5               [11] 1569 	push	bc
      000741 E5               [11] 1570 	push	hl
      000742 CDr00r00         [17] 1571 	call	_GSL_metatileLookup
      000745 F1               [10] 1572 	pop	af
      000746 F1               [10] 1573 	pop	af
      000747 7E               [ 7] 1574 	ld	a, (hl)
      000748 DD 77 FE         [19] 1575 	ld	-2 (ix), a
                                   1576 ;main.c:295: if (playerY == GSL_getMapHeightInPixels() - 8 || ((metatilesMetaLUT[bottomLeftMetatile] & 1) == 0 && (metatilesMetaLUT[bottomRightMetatile] & 1) == 0))
      00074B CDr00r00         [17] 1577 	call	_GSL_getMapHeightInPixels
      00074E 01 F8 FF         [10] 1578 	ld	bc, #0xfff8
      000751 09               [11] 1579 	add	hl,bc
      000752 4D               [ 4] 1580 	ld	c, l
      000753 44               [ 4] 1581 	ld	b, h
                                   1582 ;main.c:300: animationCount = (animationCount - 1) & 3;
      000754 3Ar06r00         [13] 1583 	ld	a,(#_animationCount + 0)
      000757 3D               [ 4] 1584 	dec	a
      000758 E6 03            [ 7] 1585 	and	a, #0x03
      00075A DD 77 FF         [19] 1586 	ld	-1 (ix), a
                                   1587 ;main.c:295: if (playerY == GSL_getMapHeightInPixels() - 8 || ((metatilesMetaLUT[bottomLeftMetatile] & 1) == 0 && (metatilesMetaLUT[bottomRightMetatile] & 1) == 0))
      00075D 2Ar02r00         [16] 1588 	ld	hl, (_playerY)
      000760 BF               [ 4] 1589 	cp	a, a
      000761 ED 42            [15] 1590 	sbc	hl, bc
      000763 28 20            [12] 1591 	jr	Z, 00101$
      000765 01rC4r02         [10] 1592 	ld	bc, #_metatilesMetaLUT+0
      000768 DD 6E FD         [19] 1593 	ld	l, -3 (ix)
      00076B 26 00            [ 7] 1594 	ld	h, #0x00
      00076D 09               [11] 1595 	add	hl, bc
      00076E 6E               [ 7] 1596 	ld	l, (hl)
      00076F 7D               [ 4] 1597 	ld	a, l
      000770 E6 01            [ 7] 1598 	and	a, #0x01
      000772 5F               [ 4] 1599 	ld	e, a
      000773 16 00            [ 7] 1600 	ld	d, #0x00
      000775 79               [ 4] 1601 	ld	a, c
      000776 DD 86 FE         [19] 1602 	add	a, -2 (ix)
      000779 4F               [ 4] 1603 	ld	c, a
      00077A 30 01            [12] 1604 	jr	NC, 00153$
      00077C 04               [ 4] 1605 	inc	b
      00077D                       1606 00153$:
      00077D 7A               [ 4] 1607 	ld	a, d
      00077E B3               [ 4] 1608 	or	a, e
      00077F 20 3E            [12] 1609 	jr	NZ, 00102$
      000781 0A               [ 7] 1610 	ld	a, (bc)
      000782 0F               [ 4] 1611 	rrca
      000783 38 3A            [12] 1612 	jr	C, 00102$
      000785                       1613 00101$:
                                   1614 ;main.c:298: action = ACTION_MOVE;
      000785 21r08r00         [10] 1615 	ld	hl, #_action
      000788 36 00            [10] 1616 	ld	(hl), #0x00
                                   1617 ;main.c:299: direction = DIRECTION_DOWN;
      00078A 21r14r00         [10] 1618 	ld	hl, #_direction
      00078D 36 01            [10] 1619 	ld	(hl), #0x01
                                   1620 ;main.c:300: animationCount = (animationCount - 1) & 3;
      00078F DD 7E FF         [19] 1621 	ld	a, -1 (ix)
      000792 32r06r00         [13] 1622 	ld	(#_animationCount),a
                                   1623 ;main.c:301: actionCount = 4;
      000795 21r07r00         [10] 1624 	ld	hl, #_actionCount
      000798 36 04            [10] 1625 	ld	(hl), #0x04
                                   1626 ;main.c:302: spriteTileOffsets = spriteMoveDown;
      00079A 21r54r01         [10] 1627 	ld	hl, #_spriteMoveDown+0
      00079D 22r0Ar00         [16] 1628 	ld	(_spriteTileOffsets), hl
                                   1629 ;main.c:304: scrollXOffset = 0;
      0007A0 21r0Cr00         [10] 1630 	ld	hl, #_scrollXOffset
      0007A3 36 00            [10] 1631 	ld	(hl), #0x00
                                   1632 ;main.c:305: scrollYOffset = 0;
      0007A5 21r0Dr00         [10] 1633 	ld	hl, #_scrollYOffset
      0007A8 36 00            [10] 1634 	ld	(hl), #0x00
                                   1635 ;main.c:306: playerXOffset = 0;
      0007AA 21 00 00         [10] 1636 	ld	hl, #0x0000
      0007AD 22r10r00         [16] 1637 	ld	(_playerXOffset), hl
                                   1638 ;main.c:307: playerYOffset = 0;
      0007B0 6C               [ 4] 1639 	ld	l, h
      0007B1 22r12r00         [16] 1640 	ld	(_playerYOffset), hl
                                   1641 ;main.c:308: spriteXOffset = 0;
                                   1642 ;main.c:309: spriteYOffset = 0;
      0007B4 3E 00            [ 7] 1643 	ld	a,#0x00
      0007B6 32r0Er00         [13] 1644 	ld	(#_spriteXOffset),a
      0007B9 32r0Fr00         [13] 1645 	ld	(#_spriteYOffset), a
                                   1646 ;main.c:311: return;
      0007BC C3r52r08         [10] 1647 	jp	00115$
      0007BF                       1648 00102$:
                                   1649 ;main.c:316: if ((metatilesMetaLUT[bottomLeftMetatile] & 1) == 1 && (metatilesMetaLUT[bottomRightMetatile] & 1) == 0)
      0007BF 7D               [ 4] 1650 	ld	a, l
      0007C0 E6 01            [ 7] 1651 	and	a, #0x01
      0007C2 6F               [ 4] 1652 	ld	l, a
      0007C3 26 00            [ 7] 1653 	ld	h, #0x00
      0007C5 7D               [ 4] 1654 	ld	a, l
      0007C6 3D               [ 4] 1655 	dec	a
      0007C7 B4               [ 4] 1656 	or	a, h
      0007C8 20 0A            [12] 1657 	jr	NZ, 00106$
      0007CA 0A               [ 7] 1658 	ld	a, (bc)
      0007CB 0F               [ 4] 1659 	rrca
      0007CC 38 06            [12] 1660 	jr	C, 00106$
                                   1661 ;main.c:318: processLeftKey();
      0007CE CDr57r08         [17] 1662 	call	_processLeftKey
                                   1663 ;main.c:319: return;
      0007D1 C3r52r08         [10] 1664 	jp	00115$
      0007D4                       1665 00106$:
                                   1666 ;main.c:321: if ((metatilesMetaLUT[bottomLeftMetatile] & 1) == 0 && (metatilesMetaLUT[bottomRightMetatile] & 1) == 1)
      0007D4 7A               [ 4] 1667 	ld	a, d
      0007D5 B3               [ 4] 1668 	or	a, e
      0007D6 20 10            [12] 1669 	jr	NZ, 00109$
      0007D8 0A               [ 7] 1670 	ld	a, (bc)
      0007D9 E6 01            [ 7] 1671 	and	a, #0x01
      0007DB 4F               [ 4] 1672 	ld	c, a
      0007DC 06 00            [ 7] 1673 	ld	b, #0x00
      0007DE 79               [ 4] 1674 	ld	a, c
      0007DF 3D               [ 4] 1675 	dec	a
      0007E0 B0               [ 4] 1676 	or	a, b
      0007E1 20 05            [12] 1677 	jr	NZ, 00109$
                                   1678 ;main.c:323: processRightKey();
      0007E3 CDr35r09         [17] 1679 	call	_processRightKey
                                   1680 ;main.c:324: return;
      0007E6 18 6A            [12] 1681 	jr	00115$
      0007E8                       1682 00109$:
                                   1683 ;main.c:328: action = ACTION_MOVE;
      0007E8 21r08r00         [10] 1684 	ld	hl, #_action
      0007EB 36 00            [10] 1685 	ld	(hl), #0x00
                                   1686 ;main.c:329: direction = DIRECTION_DOWN;
      0007ED 21r14r00         [10] 1687 	ld	hl, #_direction
      0007F0 36 01            [10] 1688 	ld	(hl), #0x01
                                   1689 ;main.c:330: animationCount = (animationCount - 1) & 3;
      0007F2 DD 7E FF         [19] 1690 	ld	a, -1 (ix)
      0007F5 32r06r00         [13] 1691 	ld	(#_animationCount),a
                                   1692 ;main.c:331: actionCount = 4;
      0007F8 21r07r00         [10] 1693 	ld	hl, #_actionCount
      0007FB 36 04            [10] 1694 	ld	(hl), #0x04
                                   1695 ;main.c:332: spriteTileOffsets = spriteMoveDown;
      0007FD 21r54r01         [10] 1696 	ld	hl, #_spriteMoveDown+0
      000800 22r0Ar00         [16] 1697 	ld	(_spriteTileOffsets), hl
                                   1698 ;main.c:334: scrollXOffset = 0;
      000803 21r0Cr00         [10] 1699 	ld	hl, #_scrollXOffset
      000806 36 00            [10] 1700 	ld	(hl), #0x00
                                   1701 ;main.c:335: playerXOffset = 0;
      000808 21 00 00         [10] 1702 	ld	hl, #0x0000
      00080B 22r10r00         [16] 1703 	ld	(_playerXOffset), hl
                                   1704 ;main.c:336: spriteXOffset = 0;
      00080E FD 21r0Er00      [14] 1705 	ld	iy, #_spriteXOffset
      000812 FD 36 00 00      [19] 1706 	ld	0 (iy), #0x00
                                   1707 ;main.c:337: playerYOffset = 2;
      000816 2E 02            [ 7] 1708 	ld	l, #0x02
      000818 22r12r00         [16] 1709 	ld	(_playerYOffset), hl
                                   1710 ;main.c:341: if (playerY < 96 || playerY >= GSL_getMapHeightInPixels() - 96)
      00081B FD 21r02r00      [14] 1711 	ld	iy, #_playerY
      00081F FD 7E 00         [19] 1712 	ld	a, 0 (iy)
      000822 D6 60            [ 7] 1713 	sub	a, #0x60
      000824 FD 7E 01         [19] 1714 	ld	a, 1 (iy)
      000827 DE 00            [ 7] 1715 	sbc	a, #0x00
      000829 38 11            [12] 1716 	jr	C, 00111$
      00082B CDr00r00         [17] 1717 	call	_GSL_getMapHeightInPixels
      00082E 01 A0 FF         [10] 1718 	ld	bc, #0xffa0
      000831 09               [11] 1719 	add	hl,bc
      000832 4D               [ 4] 1720 	ld	c, l
      000833 44               [ 4] 1721 	ld	b, h
      000834 2Ar02r00         [16] 1722 	ld	hl, (_playerY)
      000837 AF               [ 4] 1723 	xor	a, a
      000838 ED 42            [15] 1724 	sbc	hl, bc
      00083A 38 0C            [12] 1725 	jr	C, 00112$
      00083C                       1726 00111$:
                                   1727 ;main.c:343: spriteYOffset = 2;
      00083C 3E 02            [ 7] 1728 	ld	a, #0x02
      00083E 32r0Fr00         [13] 1729 	ld	(#_spriteYOffset), a
                                   1730 ;main.c:344: scrollYOffset = 0;
      000841 3E 00            [ 7] 1731 	ld	a, #0x00
      000843 32r0Dr00         [13] 1732 	ld	(#_scrollYOffset), a
      000846 18 0A            [12] 1733 	jr	00115$
      000848                       1734 00112$:
                                   1735 ;main.c:348: spriteYOffset = 0;
      000848 3E 00            [ 7] 1736 	ld	a, #0x00
      00084A 32r0Fr00         [13] 1737 	ld	(#_spriteYOffset), a
                                   1738 ;main.c:349: scrollYOffset = 2;
      00084D 3E 02            [ 7] 1739 	ld	a, #0x02
      00084F 32r0Dr00         [13] 1740 	ld	(#_scrollYOffset), a
      000852                       1741 00115$:
                                   1742 ;main.c:351: }
      000852 DD F9            [10] 1743 	ld	sp, ix
      000854 DD E1            [14] 1744 	pop	ix
      000856 C9               [10] 1745 	ret
                                   1746 ;main.c:354: void processLeftKey()
                                   1747 ;	---------------------------------
                                   1748 ; Function processLeftKey
                                   1749 ; ---------------------------------
      000857                       1750 _processLeftKey::
                                   1751 ;main.c:358: unsigned char lowerLeftMetatile = *(GSL_metatileLookup(playerX - 9, playerY));
      000857 FD 21r00r00      [14] 1752 	ld	iy, #_playerX
      00085B FD 7E 00         [19] 1753 	ld	a, 0 (iy)
      00085E C6 F7            [ 7] 1754 	add	a, #0xf7
      000860 4F               [ 4] 1755 	ld	c, a
      000861 FD 7E 01         [19] 1756 	ld	a, 1 (iy)
      000864 CE FF            [ 7] 1757 	adc	a, #0xff
      000866 47               [ 4] 1758 	ld	b, a
      000867 2Ar02r00         [16] 1759 	ld	hl, (_playerY)
      00086A E5               [11] 1760 	push	hl
      00086B C5               [11] 1761 	push	bc
      00086C CDr00r00         [17] 1762 	call	_GSL_metatileLookup
      00086F F1               [10] 1763 	pop	af
      000870 F1               [10] 1764 	pop	af
      000871 4E               [ 7] 1765 	ld	c, (hl)
                                   1766 ;main.c:366: animationCount = (animationCount - 1) & 3;
      000872 3Ar06r00         [13] 1767 	ld	a,(#_animationCount + 0)
      000875 3D               [ 4] 1768 	dec	a
      000876 E6 03            [ 7] 1769 	and	a, #0x03
      000878 5F               [ 4] 1770 	ld	e, a
                                   1771 ;main.c:361: if (playerX == 16 || (metatilesMetaLUT[lowerLeftMetatile] & 1) == 0)
      000879 FD 21r00r00      [14] 1772 	ld	iy, #_playerX
      00087D FD 7E 00         [19] 1773 	ld	a, 0 (iy)
      000880 D6 10            [ 7] 1774 	sub	a, #0x10
      000882 FD B6 01         [19] 1775 	or	a, 1 (iy)
      000885 28 0A            [12] 1776 	jr	Z, 00101$
      000887 21rC4r02         [10] 1777 	ld	hl, #_metatilesMetaLUT+0
      00088A 06 00            [ 7] 1778 	ld	b, #0x00
      00088C 09               [11] 1779 	add	hl, bc
      00088D 7E               [ 7] 1780 	ld	a, (hl)
      00088E 0F               [ 4] 1781 	rrca
      00088F 38 36            [12] 1782 	jr	C, 00102$
      000891                       1783 00101$:
                                   1784 ;main.c:364: action = ACTION_MOVE;
      000891 21r08r00         [10] 1785 	ld	hl, #_action
      000894 36 00            [10] 1786 	ld	(hl), #0x00
                                   1787 ;main.c:365: direction = DIRECTION_LEFT;
      000896 21r14r00         [10] 1788 	ld	hl, #_direction
      000899 36 02            [10] 1789 	ld	(hl), #0x02
                                   1790 ;main.c:366: animationCount = (animationCount - 1) & 3;
      00089B 21r06r00         [10] 1791 	ld	hl, #_animationCount
      00089E 73               [ 7] 1792 	ld	(hl), e
                                   1793 ;main.c:367: actionCount = 4;
      00089F 21r07r00         [10] 1794 	ld	hl, #_actionCount
      0008A2 36 04            [10] 1795 	ld	(hl), #0x04
                                   1796 ;main.c:368: spriteTileOffsets = spriteMoveLeft;
      0008A4 21r5Cr01         [10] 1797 	ld	hl, #_spriteMoveLeft+0
      0008A7 22r0Ar00         [16] 1798 	ld	(_spriteTileOffsets), hl
                                   1799 ;main.c:370: scrollXOffset = 0;
      0008AA 21r0Cr00         [10] 1800 	ld	hl, #_scrollXOffset
      0008AD 36 00            [10] 1801 	ld	(hl), #0x00
                                   1802 ;main.c:371: scrollYOffset = 0;
      0008AF 21r0Dr00         [10] 1803 	ld	hl, #_scrollYOffset
      0008B2 36 00            [10] 1804 	ld	(hl), #0x00
                                   1805 ;main.c:372: playerXOffset = 0;
      0008B4 21 00 00         [10] 1806 	ld	hl, #0x0000
      0008B7 22r10r00         [16] 1807 	ld	(_playerXOffset), hl
                                   1808 ;main.c:373: playerYOffset = 0;
      0008BA 6C               [ 4] 1809 	ld	l, h
      0008BB 22r12r00         [16] 1810 	ld	(_playerYOffset), hl
                                   1811 ;main.c:374: spriteXOffset = 0;
                                   1812 ;main.c:375: spriteYOffset = 0;
      0008BE 3E 00            [ 7] 1813 	ld	a,#0x00
      0008C0 32r0Er00         [13] 1814 	ld	(#_spriteXOffset),a
      0008C3 32r0Fr00         [13] 1815 	ld	(#_spriteYOffset), a
                                   1816 ;main.c:377: return;
      0008C6 C9               [10] 1817 	ret
      0008C7                       1818 00102$:
                                   1819 ;main.c:381: action = ACTION_MOVE;
      0008C7 21r08r00         [10] 1820 	ld	hl, #_action
      0008CA 36 00            [10] 1821 	ld	(hl), #0x00
                                   1822 ;main.c:382: direction = DIRECTION_LEFT;
      0008CC 21r14r00         [10] 1823 	ld	hl, #_direction
      0008CF 36 02            [10] 1824 	ld	(hl), #0x02
                                   1825 ;main.c:383: animationCount = (animationCount - 1) & 3;
      0008D1 21r06r00         [10] 1826 	ld	hl, #_animationCount
      0008D4 73               [ 7] 1827 	ld	(hl), e
                                   1828 ;main.c:384: actionCount = 4;
      0008D5 21r07r00         [10] 1829 	ld	hl, #_actionCount
      0008D8 36 04            [10] 1830 	ld	(hl), #0x04
                                   1831 ;main.c:385: spriteTileOffsets = spriteMoveLeft;
      0008DA 21r5Cr01         [10] 1832 	ld	hl, #_spriteMoveLeft+0
      0008DD 22r0Ar00         [16] 1833 	ld	(_spriteTileOffsets), hl
                                   1834 ;main.c:387: playerXOffset = 0xFFFE;
      0008E0 21 FE FF         [10] 1835 	ld	hl, #0xfffe
      0008E3 22r10r00         [16] 1836 	ld	(_playerXOffset), hl
                                   1837 ;main.c:388: scrollYOffset = 0;
      0008E6 21r0Dr00         [10] 1838 	ld	hl, #_scrollYOffset
      0008E9 36 00            [10] 1839 	ld	(hl), #0x00
                                   1840 ;main.c:389: playerYOffset = 0;
      0008EB 21 00 00         [10] 1841 	ld	hl, #0x0000
      0008EE 22r12r00         [16] 1842 	ld	(_playerYOffset), hl
                                   1843 ;main.c:390: spriteYOffset = 0;
      0008F1 3E 00            [ 7] 1844 	ld	a, #0x00
      0008F3 32r0Fr00         [13] 1845 	ld	(#_spriteYOffset), a
                                   1846 ;main.c:394: if (playerX <= 136 || playerX > GSL_getMapWidthInPixels() - 120)
      0008F6 3E 88            [ 7] 1847 	ld	a, #0x88
      0008F8 FD 21r00r00      [14] 1848 	ld	iy, #_playerX
      0008FC FD BE 00         [19] 1849 	cp	a, 0 (iy)
      0008FF 3E 00            [ 7] 1850 	ld	a, #0x00
      000901 FD 9E 01         [19] 1851 	sbc	a, 1 (iy)
      000904 30 19            [12] 1852 	jr	NC, 00104$
      000906 CDr00r00         [17] 1853 	call	_GSL_getMapWidthInPixels
      000909 7D               [ 4] 1854 	ld	a, l
      00090A C6 88            [ 7] 1855 	add	a, #0x88
      00090C 4F               [ 4] 1856 	ld	c, a
      00090D 7C               [ 4] 1857 	ld	a, h
      00090E CE FF            [ 7] 1858 	adc	a, #0xff
      000910 47               [ 4] 1859 	ld	b, a
      000911 79               [ 4] 1860 	ld	a, c
      000912 FD 21r00r00      [14] 1861 	ld	iy, #_playerX
      000916 FD 96 00         [19] 1862 	sub	a, 0 (iy)
      000919 78               [ 4] 1863 	ld	a, b
      00091A FD 9E 01         [19] 1864 	sbc	a, 1 (iy)
      00091D 30 0B            [12] 1865 	jr	NC, 00105$
      00091F                       1866 00104$:
                                   1867 ;main.c:396: spriteXOffset = 0xFE;
      00091F 3E FE            [ 7] 1868 	ld	a, #0xfe
      000921 32r0Er00         [13] 1869 	ld	(#_spriteXOffset), a
                                   1870 ;main.c:397: scrollXOffset = 0;
      000924 3E 00            [ 7] 1871 	ld	a, #0x00
      000926 32r0Cr00         [13] 1872 	ld	(#_scrollXOffset), a
      000929 C9               [10] 1873 	ret
      00092A                       1874 00105$:
                                   1875 ;main.c:401: spriteXOffset = 0;
      00092A 3E 00            [ 7] 1876 	ld	a, #0x00
      00092C 32r0Er00         [13] 1877 	ld	(#_spriteXOffset), a
                                   1878 ;main.c:402: scrollXOffset = 0xFE;
      00092F 3E FE            [ 7] 1879 	ld	a, #0xfe
      000931 32r0Cr00         [13] 1880 	ld	(#_scrollXOffset), a
                                   1881 ;main.c:404: }
      000934 C9               [10] 1882 	ret
                                   1883 ;main.c:408: void processRightKey()
                                   1884 ;	---------------------------------
                                   1885 ; Function processRightKey
                                   1886 ; ---------------------------------
      000935                       1887 _processRightKey::
                                   1888 ;main.c:412: unsigned char lowerRightMetatile = *(GSL_metatileLookup(playerX + 8, playerY));
      000935 FD 21r00r00      [14] 1889 	ld	iy, #_playerX
      000939 FD 7E 00         [19] 1890 	ld	a, 0 (iy)
      00093C C6 08            [ 7] 1891 	add	a, #0x08
      00093E 4F               [ 4] 1892 	ld	c, a
      00093F FD 7E 01         [19] 1893 	ld	a, 1 (iy)
      000942 CE 00            [ 7] 1894 	adc	a, #0x00
      000944 47               [ 4] 1895 	ld	b, a
      000945 2Ar02r00         [16] 1896 	ld	hl, (_playerY)
      000948 E5               [11] 1897 	push	hl
      000949 C5               [11] 1898 	push	bc
      00094A CDr00r00         [17] 1899 	call	_GSL_metatileLookup
      00094D F1               [10] 1900 	pop	af
      00094E F1               [10] 1901 	pop	af
      00094F 4E               [ 7] 1902 	ld	c, (hl)
                                   1903 ;main.c:415: if (playerX == GSL_getMapWidthInPixels() - 8 || (metatilesMetaLUT[lowerRightMetatile] & 1) == 0)
      000950 C5               [11] 1904 	push	bc
      000951 CDr00r00         [17] 1905 	call	_GSL_getMapWidthInPixels
      000954 C1               [10] 1906 	pop	bc
      000955 11 F8 FF         [10] 1907 	ld	de, #0xfff8
      000958 19               [11] 1908 	add	hl, de
      000959 EB               [ 4] 1909 	ex	de,hl
                                   1910 ;main.c:420: animationCount = (animationCount - 1) & 3;
      00095A 3Ar06r00         [13] 1911 	ld	a,(#_animationCount + 0)
      00095D 3D               [ 4] 1912 	dec	a
      00095E E6 03            [ 7] 1913 	and	a, #0x03
      000960 47               [ 4] 1914 	ld	b, a
                                   1915 ;main.c:415: if (playerX == GSL_getMapWidthInPixels() - 8 || (metatilesMetaLUT[lowerRightMetatile] & 1) == 0)
      000961 2Ar00r00         [16] 1916 	ld	hl, (_playerX)
      000964 BF               [ 4] 1917 	cp	a, a
      000965 ED 52            [15] 1918 	sbc	hl, de
      000967 28 0B            [12] 1919 	jr	Z, 00101$
      000969 11rC4r02         [10] 1920 	ld	de, #_metatilesMetaLUT+0
      00096C 69               [ 4] 1921 	ld	l, c
      00096D 26 00            [ 7] 1922 	ld	h, #0x00
      00096F 19               [11] 1923 	add	hl, de
      000970 7E               [ 7] 1924 	ld	a, (hl)
      000971 0F               [ 4] 1925 	rrca
      000972 38 36            [12] 1926 	jr	C, 00102$
      000974                       1927 00101$:
                                   1928 ;main.c:418: action = ACTION_MOVE;
      000974 21r08r00         [10] 1929 	ld	hl, #_action
      000977 36 00            [10] 1930 	ld	(hl), #0x00
                                   1931 ;main.c:419: direction = DIRECTION_RIGHT;
      000979 21r14r00         [10] 1932 	ld	hl, #_direction
      00097C 36 03            [10] 1933 	ld	(hl), #0x03
                                   1934 ;main.c:420: animationCount = (animationCount - 1) & 3;
      00097E 21r06r00         [10] 1935 	ld	hl, #_animationCount
      000981 70               [ 7] 1936 	ld	(hl), b
                                   1937 ;main.c:421: actionCount = 4;
      000982 21r07r00         [10] 1938 	ld	hl, #_actionCount
      000985 36 04            [10] 1939 	ld	(hl), #0x04
                                   1940 ;main.c:422: spriteTileOffsets = spriteMoveRight;
      000987 21r64r01         [10] 1941 	ld	hl, #_spriteMoveRight+0
      00098A 22r0Ar00         [16] 1942 	ld	(_spriteTileOffsets), hl
                                   1943 ;main.c:424: scrollXOffset = 0;
      00098D 21r0Cr00         [10] 1944 	ld	hl, #_scrollXOffset
      000990 36 00            [10] 1945 	ld	(hl), #0x00
                                   1946 ;main.c:425: scrollYOffset = 0;
      000992 21r0Dr00         [10] 1947 	ld	hl, #_scrollYOffset
      000995 36 00            [10] 1948 	ld	(hl), #0x00
                                   1949 ;main.c:426: playerXOffset = 0;
      000997 21 00 00         [10] 1950 	ld	hl, #0x0000
      00099A 22r10r00         [16] 1951 	ld	(_playerXOffset), hl
                                   1952 ;main.c:427: playerYOffset = 0;
      00099D 6C               [ 4] 1953 	ld	l, h
      00099E 22r12r00         [16] 1954 	ld	(_playerYOffset), hl
                                   1955 ;main.c:428: spriteXOffset = 0;
                                   1956 ;main.c:429: spriteYOffset = 0;
      0009A1 3E 00            [ 7] 1957 	ld	a,#0x00
      0009A3 32r0Er00         [13] 1958 	ld	(#_spriteXOffset),a
      0009A6 32r0Fr00         [13] 1959 	ld	(#_spriteYOffset), a
                                   1960 ;main.c:431: return;
      0009A9 C9               [10] 1961 	ret
      0009AA                       1962 00102$:
                                   1963 ;main.c:435: action = ACTION_MOVE;
      0009AA 21r08r00         [10] 1964 	ld	hl, #_action
      0009AD 36 00            [10] 1965 	ld	(hl), #0x00
                                   1966 ;main.c:436: direction = DIRECTION_RIGHT;
      0009AF 21r14r00         [10] 1967 	ld	hl, #_direction
      0009B2 36 03            [10] 1968 	ld	(hl), #0x03
                                   1969 ;main.c:437: animationCount = (animationCount - 1) & 3;
      0009B4 21r06r00         [10] 1970 	ld	hl, #_animationCount
      0009B7 70               [ 7] 1971 	ld	(hl), b
                                   1972 ;main.c:438: actionCount = 4;
      0009B8 21r07r00         [10] 1973 	ld	hl, #_actionCount
      0009BB 36 04            [10] 1974 	ld	(hl), #0x04
                                   1975 ;main.c:439: spriteTileOffsets = spriteMoveRight;
      0009BD 21r64r01         [10] 1976 	ld	hl, #_spriteMoveRight+0
      0009C0 22r0Ar00         [16] 1977 	ld	(_spriteTileOffsets), hl
                                   1978 ;main.c:441: playerXOffset = 2;
      0009C3 21 02 00         [10] 1979 	ld	hl, #0x0002
      0009C6 22r10r00         [16] 1980 	ld	(_playerXOffset), hl
                                   1981 ;main.c:442: scrollYOffset = 0;
      0009C9 FD 21r0Dr00      [14] 1982 	ld	iy, #_scrollYOffset
      0009CD FD 36 00 00      [19] 1983 	ld	0 (iy), #0x00
                                   1984 ;main.c:443: playerYOffset = 0; 
      0009D1 6C               [ 4] 1985 	ld	l, h
      0009D2 22r12r00         [16] 1986 	ld	(_playerYOffset), hl
                                   1987 ;main.c:444: spriteYOffset = 0;
      0009D5 3E 00            [ 7] 1988 	ld	a, #0x00
      0009D7 32r0Fr00         [13] 1989 	ld	(#_spriteYOffset), a
                                   1990 ;main.c:448: if (playerX < 136 || playerX >= GSL_getMapWidthInPixels() - 120)
      0009DA FD 21r00r00      [14] 1991 	ld	iy, #_playerX
      0009DE FD 7E 00         [19] 1992 	ld	a, 0 (iy)
      0009E1 D6 88            [ 7] 1993 	sub	a, #0x88
      0009E3 FD 7E 01         [19] 1994 	ld	a, 1 (iy)
      0009E6 DE 00            [ 7] 1995 	sbc	a, #0x00
      0009E8 38 11            [12] 1996 	jr	C, 00104$
      0009EA CDr00r00         [17] 1997 	call	_GSL_getMapWidthInPixels
      0009ED 01 88 FF         [10] 1998 	ld	bc, #0xff88
      0009F0 09               [11] 1999 	add	hl,bc
      0009F1 4D               [ 4] 2000 	ld	c, l
      0009F2 44               [ 4] 2001 	ld	b, h
      0009F3 2Ar00r00         [16] 2002 	ld	hl, (_playerX)
      0009F6 AF               [ 4] 2003 	xor	a, a
      0009F7 ED 42            [15] 2004 	sbc	hl, bc
      0009F9 38 0B            [12] 2005 	jr	C, 00105$
      0009FB                       2006 00104$:
                                   2007 ;main.c:450: spriteXOffset = 2;
      0009FB 3E 02            [ 7] 2008 	ld	a, #0x02
      0009FD 32r0Er00         [13] 2009 	ld	(#_spriteXOffset), a
                                   2010 ;main.c:451: scrollXOffset = 0;
      000A00 3E 00            [ 7] 2011 	ld	a, #0x00
      000A02 32r0Cr00         [13] 2012 	ld	(#_scrollXOffset), a
      000A05 C9               [10] 2013 	ret
      000A06                       2014 00105$:
                                   2015 ;main.c:455: spriteXOffset = 0;
      000A06 3E 00            [ 7] 2016 	ld	a, #0x00
      000A08 32r0Er00         [13] 2017 	ld	(#_spriteXOffset), a
                                   2018 ;main.c:456: scrollXOffset = 2;
      000A0B 3E 02            [ 7] 2019 	ld	a, #0x02
      000A0D 32r0Cr00         [13] 2020 	ld	(#_scrollXOffset), a
                                   2021 ;main.c:458: }
      000A10 C9               [10] 2022 	ret
                                   2023 ;main.c:461: void processAttackKey()
                                   2024 ;	---------------------------------
                                   2025 ; Function processAttackKey
                                   2026 ; ---------------------------------
      000A11                       2027 _processAttackKey::
                                   2028 ;main.c:464: actionButtonWatch = 1;
      000A11 3E 01            [ 7] 2029 	ld	a, #0x01
      000A13 32r09r00         [13] 2030 	ld	(#_actionButtonWatch), a
                                   2031 ;main.c:468: switch (direction)
      000A16 FD 21r14r00      [14] 2032 	ld	iy, #_direction
      000A1A FD 7E 00         [19] 2033 	ld	a, 0 (iy)
      000A1D B7               [ 4] 2034 	or	a, a
      000A1E 28 16            [12] 2035 	jr	Z, 00101$
      000A20 FD 7E 00         [19] 2036 	ld	a, 0 (iy)
      000A23 3D               [ 4] 2037 	dec	a
      000A24 28 1E            [12] 2038 	jr	Z, 00102$
      000A26 FD 7E 00         [19] 2039 	ld	a, 0 (iy)
      000A29 D6 02            [ 7] 2040 	sub	a, #0x02
      000A2B 28 25            [12] 2041 	jr	Z, 00103$
      000A2D FD 7E 00         [19] 2042 	ld	a, 0 (iy)
      000A30 D6 03            [ 7] 2043 	sub	a, #0x03
      000A32 28 2C            [12] 2044 	jr	Z, 00104$
      000A34 18 36            [12] 2045 	jr	00105$
                                   2046 ;main.c:470: case DIRECTION_UP:
      000A36                       2047 00101$:
                                   2048 ;main.c:471: attackSprites = spriteAttackUpMeta;
      000A36 21r94r01         [10] 2049 	ld	hl, #_spriteAttackUpMeta+0
      000A39 22r00r00         [16] 2050 	ld	(_attackSprites), hl
                                   2051 ;main.c:472: spriteTileOffsets = spriteAttackUp;
      000A3C 21r6Cr01         [10] 2052 	ld	hl, #_spriteAttackUp+0
      000A3F 22r0Ar00         [16] 2053 	ld	(_spriteTileOffsets), hl
                                   2054 ;main.c:473: break;
      000A42 18 28            [12] 2055 	jr	00105$
                                   2056 ;main.c:475: case DIRECTION_DOWN:
      000A44                       2057 00102$:
                                   2058 ;main.c:476: attackSprites = spriteAttackDownMeta;
      000A44 21rE0r01         [10] 2059 	ld	hl, #_spriteAttackDownMeta+0
      000A47 22r00r00         [16] 2060 	ld	(_attackSprites), hl
                                   2061 ;main.c:477: spriteTileOffsets = spriteAttackDown;
      000A4A 21r76r01         [10] 2062 	ld	hl, #_spriteAttackDown+0
      000A4D 22r0Ar00         [16] 2063 	ld	(_spriteTileOffsets), hl
                                   2064 ;main.c:478: break;
      000A50 18 1A            [12] 2065 	jr	00105$
                                   2066 ;main.c:480: case DIRECTION_LEFT: 
      000A52                       2067 00103$:
                                   2068 ;main.c:481: attackSprites = spriteAttackLeftMeta;
      000A52 21r2Cr02         [10] 2069 	ld	hl, #_spriteAttackLeftMeta+0
      000A55 22r00r00         [16] 2070 	ld	(_attackSprites), hl
                                   2071 ;main.c:482: spriteTileOffsets = spriteAttackLeft;
      000A58 21r80r01         [10] 2072 	ld	hl, #_spriteAttackLeft+0
      000A5B 22r0Ar00         [16] 2073 	ld	(_spriteTileOffsets), hl
                                   2074 ;main.c:483: break;
      000A5E 18 0C            [12] 2075 	jr	00105$
                                   2076 ;main.c:485: case DIRECTION_RIGHT:
      000A60                       2077 00104$:
                                   2078 ;main.c:486: attackSprites = spriteAttackRightMeta;
      000A60 21r78r02         [10] 2079 	ld	hl, #_spriteAttackRightMeta+0
      000A63 22r00r00         [16] 2080 	ld	(_attackSprites), hl
                                   2081 ;main.c:487: spriteTileOffsets = spriteAttackRight;
      000A66 21r8Ar01         [10] 2082 	ld	hl, #_spriteAttackRight+0
      000A69 22r0Ar00         [16] 2083 	ld	(_spriteTileOffsets), hl
                                   2084 ;main.c:489: }
      000A6C                       2085 00105$:
                                   2086 ;main.c:492: actionCount = 9;
      000A6C 3E 09            [ 7] 2087 	ld	a, #0x09
      000A6E 32r07r00         [13] 2088 	ld	(#_actionCount), a
                                   2089 ;main.c:493: animationCount = 0;
                                   2090 ;main.c:494: scrollXOffset = 0;
      000A71 3E 00            [ 7] 2091 	ld	a,#0x00
      000A73 32r06r00         [13] 2092 	ld	(#_animationCount),a
      000A76 32r0Cr00         [13] 2093 	ld	(#_scrollXOffset), a
                                   2094 ;main.c:495: scrollYOffset = 0;
      000A79 3E 00            [ 7] 2095 	ld	a, #0x00
      000A7B 32r0Dr00         [13] 2096 	ld	(#_scrollYOffset), a
                                   2097 ;main.c:496: action = ACTION_ATTACK;
      000A7E 3E 01            [ 7] 2098 	ld	a, #0x01
      000A80 32r08r00         [13] 2099 	ld	(#_action), a
                                   2100 ;main.c:498: }
      000A83 C9               [10] 2101 	ret
                                   2102 ;main.c:509: void checkForAttackInteraction()
                                   2103 ;	---------------------------------
                                   2104 ; Function checkForAttackInteraction
                                   2105 ; ---------------------------------
      000A84                       2106 _checkForAttackInteraction::
                                   2107 ;main.c:515: metatile = GSL_metatileLookup(playerX - 8, playerY - 1);
      000A84 FD 21r00r00      [14] 2108 	ld	iy, #_playerX
      000A88 FD 7E 00         [19] 2109 	ld	a, 0 (iy)
      000A8B C6 F8            [ 7] 2110 	add	a, #0xf8
      000A8D 4F               [ 4] 2111 	ld	c, a
      000A8E FD 7E 01         [19] 2112 	ld	a, 1 (iy)
      000A91 CE FF            [ 7] 2113 	adc	a, #0xff
      000A93 47               [ 4] 2114 	ld	b, a
                                   2115 ;main.c:514: if (direction == DIRECTION_UP) 
      000A94 3Ar14r00         [13] 2116 	ld	a,(#_direction + 0)
      000A97 B7               [ 4] 2117 	or	a, a
      000A98 20 0E            [12] 2118 	jr	NZ, 00108$
                                   2119 ;main.c:515: metatile = GSL_metatileLookup(playerX - 8, playerY - 1);
      000A9A ED 5Br02r00      [20] 2120 	ld	de, (_playerY)
      000A9E 1B               [ 6] 2121 	dec	de
      000A9F D5               [11] 2122 	push	de
      000AA0 C5               [11] 2123 	push	bc
      000AA1 CDr00r00         [17] 2124 	call	_GSL_metatileLookup
      000AA4 F1               [10] 2125 	pop	af
      000AA5 F1               [10] 2126 	pop	af
      000AA6 18 54            [12] 2127 	jr	00109$
      000AA8                       2128 00108$:
                                   2129 ;main.c:516: else if (direction == DIRECTION_DOWN) 
      000AA8 3Ar14r00         [13] 2130 	ld	a,(#_direction + 0)
      000AAB 3D               [ 4] 2131 	dec	a
      000AAC 20 10            [12] 2132 	jr	NZ, 00105$
                                   2133 ;main.c:517: metatile = GSL_metatileLookup(playerX - 8, playerY + 8);
      000AAE 2Ar02r00         [16] 2134 	ld	hl, (_playerY)
      000AB1 11 08 00         [10] 2135 	ld	de, #0x0008
      000AB4 19               [11] 2136 	add	hl, de
      000AB5 E5               [11] 2137 	push	hl
      000AB6 C5               [11] 2138 	push	bc
      000AB7 CDr00r00         [17] 2139 	call	_GSL_metatileLookup
      000ABA F1               [10] 2140 	pop	af
      000ABB F1               [10] 2141 	pop	af
      000ABC 18 3E            [12] 2142 	jr	00109$
      000ABE                       2143 00105$:
                                   2144 ;main.c:519: metatile = GSL_metatileLookup(playerX - 9, playerY - 8);
      000ABE FD 21r02r00      [14] 2145 	ld	iy, #_playerY
      000AC2 FD 7E 00         [19] 2146 	ld	a, 0 (iy)
      000AC5 C6 F8            [ 7] 2147 	add	a, #0xf8
      000AC7 4F               [ 4] 2148 	ld	c, a
      000AC8 FD 7E 01         [19] 2149 	ld	a, 1 (iy)
      000ACB CE FF            [ 7] 2150 	adc	a, #0xff
      000ACD 47               [ 4] 2151 	ld	b, a
                                   2152 ;main.c:518: else if (direction == DIRECTION_LEFT) 
      000ACE 3Ar14r00         [13] 2153 	ld	a,(#_direction + 0)
      000AD1 D6 02            [ 7] 2154 	sub	a, #0x02
      000AD3 20 19            [12] 2155 	jr	NZ, 00102$
                                   2156 ;main.c:519: metatile = GSL_metatileLookup(playerX - 9, playerY - 8);
      000AD5 FD 21r00r00      [14] 2157 	ld	iy, #_playerX
      000AD9 FD 7E 00         [19] 2158 	ld	a, 0 (iy)
      000ADC C6 F7            [ 7] 2159 	add	a, #0xf7
      000ADE 5F               [ 4] 2160 	ld	e, a
      000ADF FD 7E 01         [19] 2161 	ld	a, 1 (iy)
      000AE2 CE FF            [ 7] 2162 	adc	a, #0xff
      000AE4 57               [ 4] 2163 	ld	d, a
      000AE5 C5               [11] 2164 	push	bc
      000AE6 D5               [11] 2165 	push	de
      000AE7 CDr00r00         [17] 2166 	call	_GSL_metatileLookup
      000AEA F1               [10] 2167 	pop	af
      000AEB F1               [10] 2168 	pop	af
      000AEC 18 0E            [12] 2169 	jr	00109$
      000AEE                       2170 00102$:
                                   2171 ;main.c:520: else metatile = GSL_metatileLookup(playerX + 8, playerY - 8);
      000AEE 2Ar00r00         [16] 2172 	ld	hl, (_playerX)
      000AF1 11 08 00         [10] 2173 	ld	de, #0x0008
      000AF4 19               [11] 2174 	add	hl, de
      000AF5 C5               [11] 2175 	push	bc
      000AF6 E5               [11] 2176 	push	hl
      000AF7 CDr00r00         [17] 2177 	call	_GSL_metatileLookup
      000AFA F1               [10] 2178 	pop	af
      000AFB F1               [10] 2179 	pop	af
      000AFC                       2180 00109$:
                                   2181 ;main.c:521: processAttackInteraction(metatile);
      000AFC E5               [11] 2182 	push	hl
      000AFD CDr7Fr0B         [17] 2183 	call	_processAttackInteraction
      000B00 F1               [10] 2184 	pop	af
                                   2185 ;main.c:525: metatile = GSL_metatileLookup(playerX + 7, playerY - 1);
      000B01 FD 21r00r00      [14] 2186 	ld	iy, #_playerX
      000B05 FD 7E 00         [19] 2187 	ld	a, 0 (iy)
      000B08 C6 07            [ 7] 2188 	add	a, #0x07
      000B0A 4F               [ 4] 2189 	ld	c, a
      000B0B FD 7E 01         [19] 2190 	ld	a, 1 (iy)
      000B0E CE 00            [ 7] 2191 	adc	a, #0x00
      000B10 47               [ 4] 2192 	ld	b, a
                                   2193 ;main.c:524: if (direction == DIRECTION_UP) 
      000B11 3Ar14r00         [13] 2194 	ld	a,(#_direction + 0)
      000B14 B7               [ 4] 2195 	or	a, a
      000B15 20 0E            [12] 2196 	jr	NZ, 00117$
                                   2197 ;main.c:525: metatile = GSL_metatileLookup(playerX + 7, playerY - 1);
      000B17 ED 5Br02r00      [20] 2198 	ld	de, (_playerY)
      000B1B 1B               [ 6] 2199 	dec	de
      000B1C D5               [11] 2200 	push	de
      000B1D C5               [11] 2201 	push	bc
      000B1E CDr00r00         [17] 2202 	call	_GSL_metatileLookup
      000B21 F1               [10] 2203 	pop	af
      000B22 F1               [10] 2204 	pop	af
      000B23 18 54            [12] 2205 	jr	00118$
      000B25                       2206 00117$:
                                   2207 ;main.c:526: else if (direction == DIRECTION_DOWN) 
      000B25 3Ar14r00         [13] 2208 	ld	a,(#_direction + 0)
      000B28 3D               [ 4] 2209 	dec	a
      000B29 20 10            [12] 2210 	jr	NZ, 00114$
                                   2211 ;main.c:527: metatile = GSL_metatileLookup(playerX + 7, playerY + 8);
      000B2B 2Ar02r00         [16] 2212 	ld	hl, (_playerY)
      000B2E 11 08 00         [10] 2213 	ld	de, #0x0008
      000B31 19               [11] 2214 	add	hl, de
      000B32 E5               [11] 2215 	push	hl
      000B33 C5               [11] 2216 	push	bc
      000B34 CDr00r00         [17] 2217 	call	_GSL_metatileLookup
      000B37 F1               [10] 2218 	pop	af
      000B38 F1               [10] 2219 	pop	af
      000B39 18 3E            [12] 2220 	jr	00118$
      000B3B                       2221 00114$:
                                   2222 ;main.c:529: metatile = GSL_metatileLookup(playerX - 9, playerY + 7);
      000B3B FD 21r02r00      [14] 2223 	ld	iy, #_playerY
      000B3F FD 7E 00         [19] 2224 	ld	a, 0 (iy)
      000B42 C6 07            [ 7] 2225 	add	a, #0x07
      000B44 4F               [ 4] 2226 	ld	c, a
      000B45 FD 7E 01         [19] 2227 	ld	a, 1 (iy)
      000B48 CE 00            [ 7] 2228 	adc	a, #0x00
      000B4A 47               [ 4] 2229 	ld	b, a
                                   2230 ;main.c:528: else if (direction == DIRECTION_LEFT) 
      000B4B 3Ar14r00         [13] 2231 	ld	a,(#_direction + 0)
      000B4E D6 02            [ 7] 2232 	sub	a, #0x02
      000B50 20 19            [12] 2233 	jr	NZ, 00111$
                                   2234 ;main.c:529: metatile = GSL_metatileLookup(playerX - 9, playerY + 7);
      000B52 FD 21r00r00      [14] 2235 	ld	iy, #_playerX
      000B56 FD 7E 00         [19] 2236 	ld	a, 0 (iy)
      000B59 C6 F7            [ 7] 2237 	add	a, #0xf7
      000B5B 5F               [ 4] 2238 	ld	e, a
      000B5C FD 7E 01         [19] 2239 	ld	a, 1 (iy)
      000B5F CE FF            [ 7] 2240 	adc	a, #0xff
      000B61 57               [ 4] 2241 	ld	d, a
      000B62 C5               [11] 2242 	push	bc
      000B63 D5               [11] 2243 	push	de
      000B64 CDr00r00         [17] 2244 	call	_GSL_metatileLookup
      000B67 F1               [10] 2245 	pop	af
      000B68 F1               [10] 2246 	pop	af
      000B69 18 0E            [12] 2247 	jr	00118$
      000B6B                       2248 00111$:
                                   2249 ;main.c:530: else metatile = GSL_metatileLookup(playerX + 8, playerY + 7);
      000B6B 2Ar00r00         [16] 2250 	ld	hl, (_playerX)
      000B6E 11 08 00         [10] 2251 	ld	de, #0x0008
      000B71 19               [11] 2252 	add	hl, de
      000B72 C5               [11] 2253 	push	bc
      000B73 E5               [11] 2254 	push	hl
      000B74 CDr00r00         [17] 2255 	call	_GSL_metatileLookup
      000B77 F1               [10] 2256 	pop	af
      000B78 F1               [10] 2257 	pop	af
      000B79                       2258 00118$:
                                   2259 ;main.c:531: processAttackInteraction(metatile);
      000B79 E5               [11] 2260 	push	hl
      000B7A CDr7Fr0B         [17] 2261 	call	_processAttackInteraction
      000B7D F1               [10] 2262 	pop	af
                                   2263 ;main.c:532: }
      000B7E C9               [10] 2264 	ret
                                   2265 ;main.c:545: void processAttackInteraction(unsigned char * metatile)
                                   2266 ;	---------------------------------
                                   2267 ; Function processAttackInteraction
                                   2268 ; ---------------------------------
      000B7F                       2269 _processAttackInteraction::
      000B7F DD E5            [15] 2270 	push	ix
      000B81 DD 21 00 00      [14] 2271 	ld	ix,#0
      000B85 DD 39            [15] 2272 	add	ix,sp
                                   2273 ;main.c:557: if (*metatile == METATILE_GREEN_TREE)
      000B87 DD 4E 04         [19] 2274 	ld	c, 4 (ix)
      000B8A DD 46 05         [19] 2275 	ld	b, 5 (ix)
      000B8D 0A               [ 7] 2276 	ld	a, (bc)
      000B8E D6 11            [ 7] 2277 	sub	a, #0x11
      000B90 20 08            [12] 2278 	jr	NZ, 00102$
                                   2279 ;main.c:560: *metatile = METATILE_TREE_STUMP;
      000B92 3E 38            [ 7] 2280 	ld	a, #0x38
      000B94 02               [ 7] 2281 	ld	(bc), a
                                   2282 ;main.c:563: GSL_metatileUpdate();
      000B95 C5               [11] 2283 	push	bc
      000B96 CDr00r00         [17] 2284 	call	_GSL_metatileUpdate
      000B99 C1               [10] 2285 	pop	bc
      000B9A                       2286 00102$:
                                   2287 ;main.c:568: if (*metatile == METATILE_CUT_CACTUS) 
      000B9A 0A               [ 7] 2288 	ld	a, (bc)
      000B9B D6 90            [ 7] 2289 	sub	a, #0x90
      000B9D 20 08            [12] 2290 	jr	NZ, 00104$
                                   2291 ;main.c:571: *metatile = METATILE_SAND; 
      000B9F 3E B0            [ 7] 2292 	ld	a, #0xb0
      000BA1 02               [ 7] 2293 	ld	(bc), a
                                   2294 ;main.c:574: GSL_metatileUpdate();
      000BA2 C5               [11] 2295 	push	bc
      000BA3 CDr00r00         [17] 2296 	call	_GSL_metatileUpdate
      000BA6 C1               [10] 2297 	pop	bc
      000BA7                       2298 00104$:
                                   2299 ;main.c:588: if (*metatile == METATILE_INTERACTIVE_TOMBSTONE_1)
      000BA7 0A               [ 7] 2300 	ld	a, (bc)
      000BA8 D6 78            [ 7] 2301 	sub	a, #0x78
      000BAA 20 43            [12] 2302 	jr	NZ, 00106$
                                   2303 ;main.c:593: *metatile = METATILE_TOMBSTONE; 
      000BAC 3E A9            [ 7] 2304 	ld	a, #0xa9
      000BAE 02               [ 7] 2305 	ld	(bc), a
                                   2306 ;main.c:599: *(GSL_getScrolltableAddress() + (51*64 + 28)) = METATILE_GRASS;
      000BAF C5               [11] 2307 	push	bc
      000BB0 CDr00r00         [17] 2308 	call	_GSL_getScrolltableAddress
      000BB3 C1               [10] 2309 	pop	bc
      000BB4 11 DC 0C         [10] 2310 	ld	de, #0x0cdc
      000BB7 19               [11] 2311 	add	hl, de
      000BB8 36 59            [10] 2312 	ld	(hl), #0x59
                                   2313 ;main.c:603: GSL_metatileUpdateCustom(448, 816, (51*64 + 28));
      000BBA C5               [11] 2314 	push	bc
      000BBB 21 DC 0C         [10] 2315 	ld	hl, #0x0cdc
      000BBE E5               [11] 2316 	push	hl
      000BBF 21 30 03         [10] 2317 	ld	hl, #0x0330
      000BC2 E5               [11] 2318 	push	hl
      000BC3 21 C0 01         [10] 2319 	ld	hl, #0x01c0
      000BC6 E5               [11] 2320 	push	hl
      000BC7 CDr00r00         [17] 2321 	call	_GSL_metatileUpdateCustom
      000BCA 21 06 00         [10] 2322 	ld	hl, #6
      000BCD 39               [11] 2323 	add	hl, sp
      000BCE F9               [ 6] 2324 	ld	sp, hl
      000BCF CDr00r00         [17] 2325 	call	_GSL_getScrolltableAddress
      000BD2 C1               [10] 2326 	pop	bc
      000BD3 11 DD 0C         [10] 2327 	ld	de, #0x0cdd
      000BD6 19               [11] 2328 	add	hl, de
      000BD7 36 59            [10] 2329 	ld	(hl), #0x59
                                   2330 ;main.c:607: GSL_metatileUpdateCustom(464, 816, (51*64 + 29));
      000BD9 C5               [11] 2331 	push	bc
      000BDA 21 DD 0C         [10] 2332 	ld	hl, #0x0cdd
      000BDD E5               [11] 2333 	push	hl
      000BDE 21 30 03         [10] 2334 	ld	hl, #0x0330
      000BE1 E5               [11] 2335 	push	hl
      000BE2 21 D0 01         [10] 2336 	ld	hl, #0x01d0
      000BE5 E5               [11] 2337 	push	hl
      000BE6 CDr00r00         [17] 2338 	call	_GSL_metatileUpdateCustom
      000BE9 21 06 00         [10] 2339 	ld	hl, #6
      000BEC 39               [11] 2340 	add	hl, sp
      000BED F9               [ 6] 2341 	ld	sp, hl
      000BEE C1               [10] 2342 	pop	bc
      000BEF                       2343 00106$:
                                   2344 ;main.c:612: if (*metatile == METATILE_INTERACTIVE_TOMBSTONE_2)
      000BEF 0A               [ 7] 2345 	ld	a, (bc)
      000BF0 D6 91            [ 7] 2346 	sub	a, #0x91
      000BF2 20 59            [12] 2347 	jr	NZ, 00109$
                                   2348 ;main.c:615: *metatile = METATILE_TOMBSTONE; 
      000BF4 3E A9            [ 7] 2349 	ld	a, #0xa9
      000BF6 02               [ 7] 2350 	ld	(bc), a
                                   2351 ;main.c:618: *(GSL_getScrolltableAddress() + (43*64 + 28)) = METATILE_VERTICAL_BRIDGE;
      000BF7 CDr00r00         [17] 2352 	call	_GSL_getScrolltableAddress
      000BFA 01 DC 0A         [10] 2353 	ld	bc, #0x0adc
      000BFD 09               [11] 2354 	add	hl, bc
      000BFE 36 10            [10] 2355 	ld	(hl), #0x10
                                   2356 ;main.c:619: GSL_metatileUpdateCustom(448, 688, (43*64 + 28));
      000C00 21 DC 0A         [10] 2357 	ld	hl, #0x0adc
      000C03 E5               [11] 2358 	push	hl
      000C04 21 B0 02         [10] 2359 	ld	hl, #0x02b0
      000C07 E5               [11] 2360 	push	hl
      000C08 21 C0 01         [10] 2361 	ld	hl, #0x01c0
      000C0B E5               [11] 2362 	push	hl
      000C0C CDr00r00         [17] 2363 	call	_GSL_metatileUpdateCustom
      000C0F 21 06 00         [10] 2364 	ld	hl, #6
      000C12 39               [11] 2365 	add	hl, sp
      000C13 F9               [ 6] 2366 	ld	sp, hl
                                   2367 ;main.c:621: *(GSL_getScrolltableAddress() + (44*64 + 28)) = METATILE_VERTICAL_BRIDGE;
      000C14 CDr00r00         [17] 2368 	call	_GSL_getScrolltableAddress
      000C17 01 1C 0B         [10] 2369 	ld	bc, #0x0b1c
      000C1A 09               [11] 2370 	add	hl, bc
      000C1B 36 10            [10] 2371 	ld	(hl), #0x10
                                   2372 ;main.c:622: GSL_metatileUpdateCustom(448, 704, (44*64 + 28));
      000C1D 21 1C 0B         [10] 2373 	ld	hl, #0x0b1c
      000C20 E5               [11] 2374 	push	hl
      000C21 21 C0 02         [10] 2375 	ld	hl, #0x02c0
      000C24 E5               [11] 2376 	push	hl
      000C25 26 01            [ 7] 2377 	ld	h, #0x01
      000C27 E5               [11] 2378 	push	hl
      000C28 CDr00r00         [17] 2379 	call	_GSL_metatileUpdateCustom
      000C2B 21 06 00         [10] 2380 	ld	hl, #6
      000C2E 39               [11] 2381 	add	hl, sp
      000C2F F9               [ 6] 2382 	ld	sp, hl
                                   2383 ;main.c:624: *(GSL_getScrolltableAddress() + (45*64 + 28)) = METATILE_VERTICAL_BRIDGE;
      000C30 CDr00r00         [17] 2384 	call	_GSL_getScrolltableAddress
      000C33 01 5C 0B         [10] 2385 	ld	bc, #0x0b5c
      000C36 09               [11] 2386 	add	hl, bc
      000C37 36 10            [10] 2387 	ld	(hl), #0x10
                                   2388 ;main.c:625: GSL_metatileUpdateCustom(448, 720, (45*64 + 28));
      000C39 21 5C 0B         [10] 2389 	ld	hl, #0x0b5c
      000C3C E5               [11] 2390 	push	hl
      000C3D 21 D0 02         [10] 2391 	ld	hl, #0x02d0
      000C40 E5               [11] 2392 	push	hl
      000C41 21 C0 01         [10] 2393 	ld	hl, #0x01c0
      000C44 E5               [11] 2394 	push	hl
      000C45 CDr00r00         [17] 2395 	call	_GSL_metatileUpdateCustom
      000C48 21 06 00         [10] 2396 	ld	hl, #6
      000C4B 39               [11] 2397 	add	hl, sp
      000C4C F9               [ 6] 2398 	ld	sp, hl
      000C4D                       2399 00109$:
                                   2400 ;main.c:627: }
      000C4D DD E1            [14] 2401 	pop	ix
      000C4F C9               [10] 2402 	ret
                                   2403 	.area _CODE
                                   2404 	.area _INITIALIZER
      000000                       2405 __xinit__playerX:
      000000 88 03                 2406 	.dw #0x0388
      000002                       2407 __xinit__playerY:
      000002 A0 03                 2408 	.dw #0x03a0
      000004                       2409 __xinit__playerSpriteX:
      000004 88                    2410 	.db #0x88	; 136
      000005                       2411 __xinit__playerSpriteY:
      000005 60                    2412 	.db #0x60	; 96
      000006                       2413 __xinit__animationCount:
      000006 00                    2414 	.db #0x00	; 0
      000007                       2415 __xinit__actionCount:
      000007 00                    2416 	.db #0x00	; 0
      000008                       2417 __xinit__action:
      000008 02                    2418 	.db #0x02	; 2
      000009                       2419 __xinit__actionButtonWatch:
      000009 00                    2420 	.db #0x00	; 0
      00000A                       2421 __xinit__spriteTileOffsets:
      00000Ar54r01                 2422 	.dw _spriteMoveDown
      00000C                       2423 __xinit__scrollXOffset:
      00000C 00                    2424 	.db #0x00	; 0
      00000D                       2425 __xinit__scrollYOffset:
      00000D 00                    2426 	.db #0x00	; 0
      00000E                       2427 __xinit__spriteXOffset:
      00000E 00                    2428 	.db #0x00	; 0
      00000F                       2429 __xinit__spriteYOffset:
      00000F 00                    2430 	.db #0x00	; 0
      000010                       2431 __xinit__playerXOffset:
      000010 00 00                 2432 	.dw #0x0000
      000012                       2433 __xinit__playerYOffset:
      000012 00 00                 2434 	.dw #0x0000
      000014                       2435 __xinit__direction:
      000014 01                    2436 	.db #0x01	; 1
                                   2437 	.area _CABS (ABS)
      007FF0                       2438 	.org 0x7FF0
      007FF0                       2439 ___SMS__SEGA_signature:
      007FF0 54                    2440 	.db #0x54	; 84	'T'
      007FF1 4D                    2441 	.db #0x4d	; 77	'M'
      007FF2 52                    2442 	.db #0x52	; 82	'R'
      007FF3 20                    2443 	.db #0x20	; 32
      007FF4 53                    2444 	.db #0x53	; 83	'S'
      007FF5 45                    2445 	.db #0x45	; 69	'E'
      007FF6 47                    2446 	.db #0x47	; 71	'G'
      007FF7 41                    2447 	.db #0x41	; 65	'A'
      007FF8 FF                    2448 	.db #0xff	; 255
      007FF9 FF                    2449 	.db #0xff	; 255
      007FFA FF                    2450 	.db #0xff	; 255
      007FFB FF                    2451 	.db #0xff	; 255
      007FFC 99                    2452 	.db #0x99	; 153
      007FFD 99                    2453 	.db #0x99	; 153
      007FFE 01                    2454 	.db #0x01	; 1
      007FFF 4C                    2455 	.db #0x4c	; 76	'L'
