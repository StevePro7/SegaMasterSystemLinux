                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.9 #9960 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl ___SMS__SDSC_signature
                             12 	.globl ___SMS__SDSC_descr
                             13 	.globl ___SMS__SDSC_name
                             14 	.globl ___SMS__SDSC_author
                             15 	.globl ___SMS__SEGA_signature
                             16 	.globl _main
                             17 	.globl _interruptibleFrameDelay
                             18 	.globl _inputDiag_inlib
                             19 	.globl _runScript
                             20 	.globl _effect1
                             21 	.globl _effect4
                             22 	.globl _effect3
                             23 	.globl _effect2
                             24 	.globl _stepIt
                             25 	.globl _tempMoveSprite
                             26 	.globl _setupSprite
                             27 	.globl _cheapCos
                             28 	.globl _cheapSin
                             29 	.globl _addRotatedXY
                             30 	.globl _drawString
                             31 	.globl _inlib_poll
                             32 	.globl _inlib_init
                             33 	.globl _savedata_commit
                             34 	.globl _savedata_init
                             35 	.globl _savestruct_valid
                             36 	.globl _savestruct_reset
                             37 	.globl _util_smsClear
                             38 	.globl _PSGSFXFrame
                             39 	.globl _PSGFrame
                             40 	.globl _PSGStop
                             41 	.globl _PSGPlayNoRepeat
                             42 	.globl _SMS_resetPauseRequest
                             43 	.globl _SMS_queryPauseRequested
                             44 	.globl _SMS_getKeysPressed
                             45 	.globl _SMS_getKeysStatus
                             46 	.globl _SMS_loadSpritePalette
                             47 	.globl _SMS_copySpritestoSAT
                             48 	.globl _SMS_hideSprite
                             49 	.globl _SMS_updateSpritePosition
                             50 	.globl _SMS_addSprite
                             51 	.globl _SMS_crt0_RST18
                             52 	.globl _SMS_crt0_RST08
                             53 	.globl _SMS_loadTileMap
                             54 	.globl _SMS_loadTiles
                             55 	.globl _SMS_waitForVBlank
                             56 	.globl _SMS_useFirstHalfTilesforSprites
                             57 	.globl _SMS_setBGScrollY
                             58 	.globl _SMS_setBGScrollX
                             59 	.globl _SMS_VDPturnOffFeature
                             60 	.globl _SMS_VDPturnOnFeature
                             61 	.globl _SMS_init
                             62 	.globl _abs
                             63 	.globl _printf
                             64 	.globl _script
                             65 	.globl _start_pressed
                             66 	.globl _drawbuf
                             67 	.globl _SMS_SRAM
                             68 	.globl _SRAM_bank_to_be_mapped_on_slot2
                             69 	.globl _ROM_bank_to_be_mapped_on_slot2
                             70 	.globl _vsync_keycheck
                             71 	.globl _updateDisplay
                             72 ;--------------------------------------------------------
                             73 ; special function registers
                             74 ;--------------------------------------------------------
                     00BE    75 G$VDPDataPort$0$0 == 0x00be
                     00BE    76 _VDPDataPort	=	0x00be
                             77 ;--------------------------------------------------------
                             78 ; ram data
                             79 ;--------------------------------------------------------
                             80 	.area _DATA
                     FFFF    81 G$ROM_bank_to_be_mapped_on_slot2$0$0 == 0xffff
                     FFFF    82 _ROM_bank_to_be_mapped_on_slot2	=	0xffff
                     FFFC    83 G$SRAM_bank_to_be_mapped_on_slot2$0$0 == 0xfffc
                     FFFC    84 _SRAM_bank_to_be_mapped_on_slot2	=	0xfffc
                     8000    85 G$SMS_SRAM$0$0 == 0x8000
                     8000    86 _SMS_SRAM	=	0x8000
                     0000    87 Fmain$spriteIds$0$0==.
   0000                      88 _spriteIds:
   0000                      89 	.ds 7
                     0007    90 Fmain$spriteX$0$0==.
   0007                      91 _spriteX:
   0007                      92 	.ds 7
                     000E    93 Fmain$spriteY$0$0==.
   000E                      94 _spriteY:
   000E                      95 	.ds 7
                     0015    96 G$drawbuf$0$0==.
   0015                      97 _drawbuf::
   0015                      98 	.ds 2
                     0017    99 G$start_pressed$0$0==.
   0017                     100 _start_pressed::
   0017                     101 	.ds 1
                     0018   102 Lmain.clearDisplay$msk$1$150==.
   0018                     103 _clearDisplay_msk_1_150:
   0018                     104 	.ds 1
                     0019   105 Lmain.clearDisplay$off$1$150==.
   0019                     106 _clearDisplay_off_1_150:
   0019                     107 	.ds 1
                     001A   108 Lmain.runScript$frame$1$221==.
   001A                     109 _runScript_frame_1_221:
   001A                     110 	.ds 2
                            111 ;--------------------------------------------------------
                            112 ; ram data
                            113 ;--------------------------------------------------------
                            114 	.area _INITIALIZED
                     0000   115 Fmain$drawing$0$0==.
   0000                     116 _drawing:
   0000                     117 	.ds 1
                     0001   118 Fmain$paddle_mode$0$0==.
   0001                     119 _paddle_mode:
   0001                     120 	.ds 1
                     0002   121 Fmain$fill_mode$0$0==.
   0002                     122 _fill_mode:
   0002                     123 	.ds 1
                     0003   124 G$script$0$0==.
   0003                     125 _script::
   0003                     126 	.ds 364
                            127 ;--------------------------------------------------------
                            128 ; absolute external ram data
                            129 ;--------------------------------------------------------
                            130 	.area _DABS (ABS)
                            131 ;--------------------------------------------------------
                            132 ; global & static initialisations
                            133 ;--------------------------------------------------------
                            134 	.area _HOME
                            135 	.area _GSINIT
                            136 	.area _GSFINAL
                            137 	.area _GSINIT
                     0000   138 	Fmain$clearDisplay$0$0	= .
                            139 	.globl	Fmain$clearDisplay$0$0
                     0000   140 	C$main.c$137$1$150	= .
                            141 	.globl	C$main.c$137$1$150
                            142 ;main.c:137: static uint8_t msk = 0xAA;
   0000 FD 21r18r00   [14]  143 	ld	iy, #_clearDisplay_msk_1_150
   0004 FD 36 00 AA   [19]  144 	ld	0 (iy), #0xaa
                     0008   145 	C$main.c$138$1$150	= .
                            146 	.globl	C$main.c$138$1$150
                            147 ;main.c:138: static uint8_t off = 0;
   0008 FD 21r19r00   [14]  148 	ld	iy, #_clearDisplay_off_1_150
   000C FD 36 00 00   [19]  149 	ld	0 (iy), #0x00
                     0010   150 	G$runScript$0$0	= .
                            151 	.globl	G$runScript$0$0
                     0010   152 	C$main.c$576$1$221	= .
                            153 	.globl	C$main.c$576$1$221
                            154 ;main.c:576: static uint16_t frame = 0;
   0010 21 00 00      [10]  155 	ld	hl, #0x0000
   0013 22r1Ar00      [16]  156 	ld	(_runScript_frame_1_221), hl
                            157 ;--------------------------------------------------------
                            158 ; Home
                            159 ;--------------------------------------------------------
                            160 	.area _HOME
                            161 	.area _HOME
                            162 ;--------------------------------------------------------
                            163 ; code
                            164 ;--------------------------------------------------------
                            165 	.area _CODE
                     0000   166 	G$setupSprite$0$0	= .
                            167 	.globl	G$setupSprite$0$0
                     0000   168 	C$main.c$42$0$0	= .
                            169 	.globl	C$main.c$42$0$0
                            170 ;main.c:42: void setupSprite(uint8_t sidx, uint8_t x, uint8_t y, uint8_t tile_id)
                            171 ;	---------------------------------
                            172 ; Function setupSprite
                            173 ; ---------------------------------
   0000                     174 _setupSprite::
   0000 DD E5         [15]  175 	push	ix
   0002 DD 21 00 00   [14]  176 	ld	ix,#0
   0006 DD 39         [15]  177 	add	ix,sp
                     0008   178 	C$main.c$44$1$136	= .
                            179 	.globl	C$main.c$44$1$136
                            180 ;main.c:44: spriteX[sidx] = x;
   0008 01r07r00      [10]  181 	ld	bc, #_spriteX+0
   000B DD 6E 04      [19]  182 	ld	l,4 (ix)
   000E 26 00         [ 7]  183 	ld	h,#0x00
   0010 09            [11]  184 	add	hl, bc
   0011 DD 7E 05      [19]  185 	ld	a, 5 (ix)
   0014 77            [ 7]  186 	ld	(hl), a
                     0015   187 	C$main.c$45$1$136	= .
                            188 	.globl	C$main.c$45$1$136
                            189 ;main.c:45: spriteY[sidx] = y;
   0015 01r0Er00      [10]  190 	ld	bc, #_spriteY+0
   0018 DD 6E 04      [19]  191 	ld	l,4 (ix)
   001B 26 00         [ 7]  192 	ld	h,#0x00
   001D 09            [11]  193 	add	hl, bc
   001E DD 7E 06      [19]  194 	ld	a, 6 (ix)
   0021 77            [ 7]  195 	ld	(hl), a
                     0022   196 	C$main.c$46$1$136	= .
                            197 	.globl	C$main.c$46$1$136
                            198 ;main.c:46: spriteIds[sidx] = SMS_addSprite(x, y, tile_id);
   0022 DD 7E 04      [19]  199 	ld	a, 4 (ix)
   0025 C6r00         [ 7]  200 	add	a, #<(_spriteIds)
   0027 4F            [ 4]  201 	ld	c, a
   0028 3E 00         [ 7]  202 	ld	a, #0x00
   002A CEs00         [ 7]  203 	adc	a, #>(_spriteIds)
   002C 47            [ 4]  204 	ld	b, a
   002D C5            [11]  205 	push	bc
   002E DD 66 07      [19]  206 	ld	h, 7 (ix)
   0031 DD 6E 06      [19]  207 	ld	l, 6 (ix)
   0034 E5            [11]  208 	push	hl
   0035 DD 7E 05      [19]  209 	ld	a, 5 (ix)
   0038 F5            [11]  210 	push	af
   0039 33            [ 6]  211 	inc	sp
   003A CDr00r00      [17]  212 	call	_SMS_addSprite
   003D F1            [10]  213 	pop	af
   003E 33            [ 6]  214 	inc	sp
   003F 7D            [ 4]  215 	ld	a, l
   0040 C1            [10]  216 	pop	bc
   0041 02            [ 7]  217 	ld	(bc), a
   0042 DD E1         [14]  218 	pop	ix
                     0044   219 	C$main.c$47$1$136	= .
                            220 	.globl	C$main.c$47$1$136
                     0044   221 	XG$setupSprite$0$0	= .
                            222 	.globl	XG$setupSprite$0$0
   0044 C9            [10]  223 	ret
                     0045   224 	G$tempMoveSprite$0$0	= .
                            225 	.globl	G$tempMoveSprite$0$0
                     0045   226 	C$main.c$55$1$136	= .
                            227 	.globl	C$main.c$55$1$136
                            228 ;main.c:55: void tempMoveSprite(uint8_t sidx, int8_t x, int8_t y)
                            229 ;	---------------------------------
                            230 ; Function tempMoveSprite
                            231 ; ---------------------------------
   0045                     232 _tempMoveSprite::
   0045 DD E5         [15]  233 	push	ix
   0047 DD 21 00 00   [14]  234 	ld	ix,#0
   004B DD 39         [15]  235 	add	ix,sp
                     004D   236 	C$main.c$57$1$138	= .
                            237 	.globl	C$main.c$57$1$138
                            238 ;main.c:57: SMS_updateSpritePosition(spriteIds[sidx], spriteX[sidx] + x, spriteY[sidx] + y);
   004D 01r0Er00      [10]  239 	ld	bc, #_spriteY+0
   0050 DD 6E 04      [19]  240 	ld	l,4 (ix)
   0053 26 00         [ 7]  241 	ld	h,#0x00
   0055 09            [11]  242 	add	hl, bc
   0056 7E            [ 7]  243 	ld	a, (hl)
   0057 DD 86 06      [19]  244 	add	a, 6 (ix)
   005A 47            [ 4]  245 	ld	b, a
   005B 11r07r00      [10]  246 	ld	de, #_spriteX+0
   005E DD 6E 04      [19]  247 	ld	l,4 (ix)
   0061 26 00         [ 7]  248 	ld	h,#0x00
   0063 19            [11]  249 	add	hl, de
   0064 4E            [ 7]  250 	ld	c, (hl)
   0065 79            [ 4]  251 	ld	a, c
   0066 DD 86 05      [19]  252 	add	a, 5 (ix)
   0069 57            [ 4]  253 	ld	d, a
   006A 3Er00         [ 7]  254 	ld	a, #<(_spriteIds)
   006C DD 86 04      [19]  255 	add	a, 4 (ix)
   006F 6F            [ 4]  256 	ld	l, a
   0070 3Es00         [ 7]  257 	ld	a, #>(_spriteIds)
   0072 CE 00         [ 7]  258 	adc	a, #0x00
   0074 67            [ 4]  259 	ld	h, a
   0075 7E            [ 7]  260 	ld	a, (hl)
   0076 C5            [11]  261 	push	bc
   0077 33            [ 6]  262 	inc	sp
   0078 5F            [ 4]  263 	ld	e, a
   0079 D5            [11]  264 	push	de
   007A CDr00r00      [17]  265 	call	_SMS_updateSpritePosition
   007D F1            [10]  266 	pop	af
   007E 33            [ 6]  267 	inc	sp
   007F DD E1         [14]  268 	pop	ix
                     0081   269 	C$main.c$58$1$138	= .
                            270 	.globl	C$main.c$58$1$138
                     0081   271 	XG$tempMoveSprite$0$0	= .
                            272 	.globl	XG$tempMoveSprite$0$0
   0081 C9            [10]  273 	ret
                     0082   274 	G$vsync_keycheck$0$0	= .
                            275 	.globl	G$vsync_keycheck$0$0
                     0082   276 	C$main.c$62$1$138	= .
                            277 	.globl	C$main.c$62$1$138
                            278 ;main.c:62: void vsync_keycheck()
                            279 ;	---------------------------------
                            280 ; Function vsync_keycheck
                            281 ; ---------------------------------
   0082                     282 _vsync_keycheck::
                     0082   283 	C$main.c$64$1$139	= .
                            284 	.globl	C$main.c$64$1$139
                            285 ;main.c:64: SMS_waitForVBlank();
   0082 CDr00r00      [17]  286 	call	_SMS_waitForVBlank
                     0085   287 	C$main.c$65$1$139	= .
                            288 	.globl	C$main.c$65$1$139
                            289 ;main.c:65: SMS_copySpritestoSAT();
   0085 CDr00r00      [17]  290 	call	_SMS_copySpritestoSAT
                     0088   291 	C$main.c$66$1$139	= .
                            292 	.globl	C$main.c$66$1$139
                            293 ;main.c:66: PSGFrame();
   0088 CDr00r00      [17]  294 	call	_PSGFrame
                     008B   295 	C$main.c$67$1$139	= .
                            296 	.globl	C$main.c$67$1$139
                            297 ;main.c:67: PSGSFXFrame();
   008B CDr00r00      [17]  298 	call	_PSGSFXFrame
                     008E   299 	C$main.c$68$1$139	= .
                            300 	.globl	C$main.c$68$1$139
                            301 ;main.c:68: inlib_poll();
   008E CDr00r00      [17]  302 	call	_inlib_poll
                     0091   303 	C$main.c$72$1$139	= .
                            304 	.globl	C$main.c$72$1$139
                            305 ;main.c:72: if (inlib_port1.sms.buttons)
   0091 3Ar01r00      [13]  306 	ld	a, (#(_inlib_port1 + 0x0001) + 0)
   0094 B7            [ 4]  307 	or	a, a
   0095 C8            [11]  308 	ret	Z
                     0096   309 	C$main.c$74$2$140	= .
                            310 	.globl	C$main.c$74$2$140
                            311 ;main.c:74: start_pressed = 1;
   0096 21r17r00      [10]  312 	ld	hl,#_start_pressed + 0
   0099 36 01         [10]  313 	ld	(hl), #0x01
                     009B   314 	C$main.c$76$1$139	= .
                            315 	.globl	C$main.c$76$1$139
                     009B   316 	XG$vsync_keycheck$0$0	= .
                            317 	.globl	XG$vsync_keycheck$0$0
   009B C9            [10]  318 	ret
                     009C   319 	Fmain$blitTile$0$0	= .
                            320 	.globl	Fmain$blitTile$0$0
                     009C   321 	C$main.c$92$1$139	= .
                            322 	.globl	C$main.c$92$1$139
                            323 ;main.c:92: static void blitTile(uint8_t *data, uint16_t tilefrom, unsigned char n_tiles)
                            324 ;	---------------------------------
                            325 ; Function blitTile
                            326 ; ---------------------------------
   009C                     327 _blitTile:
   009C DD E5         [15]  328 	push	ix
   009E DD 21 00 00   [14]  329 	ld	ix,#0
   00A2 DD 39         [15]  330 	add	ix,sp
   00A4 3B            [ 6]  331 	dec	sp
                     00A5   332 	C$main.c$98$1$142	= .
                            333 	.globl	C$main.c$98$1$142
                            334 ;main.c:98: __endasm;
   00A5 F3            [ 4]  335 	di
                     00A6   336 	C$main.c$100$1$142	= .
                            337 	.globl	C$main.c$100$1$142
                            338 ;main.c:100: SMS_setAddr(0x4000 | (tilefrom * 32));
   00A6 DD 6E 06      [19]  339 	ld	l,6 (ix)
   00A9 DD 66 07      [19]  340 	ld	h,7 (ix)
   00AC 29            [11]  341 	add	hl, hl
   00AD 29            [11]  342 	add	hl, hl
   00AE 29            [11]  343 	add	hl, hl
   00AF 29            [11]  344 	add	hl, hl
   00B0 29            [11]  345 	add	hl, hl
   00B1 CB F4         [ 8]  346 	set	6, h
   00B3 CF            [11]  347 	rst	#0x08
                     00B4   348 	C$main.c$102$1$142	= .
                            349 	.globl	C$main.c$102$1$142
                            350 ;main.c:102: for (i = 0; i < n_tiles * 8; i++)
   00B4 DD 4E 04      [19]  351 	ld	c,4 (ix)
   00B7 DD 46 05      [19]  352 	ld	b,5 (ix)
   00BA DD 36 FF 00   [19]  353 	ld	-1 (ix), #0x00
   00BE                     354 00103$:
   00BE DD 6E 08      [19]  355 	ld	l, 8 (ix)
   00C1 26 00         [ 7]  356 	ld	h, #0x00
   00C3 29            [11]  357 	add	hl, hl
   00C4 29            [11]  358 	add	hl, hl
   00C5 29            [11]  359 	add	hl, hl
   00C6 DD 5E FF      [19]  360 	ld	e, -1 (ix)
   00C9 16 00         [ 7]  361 	ld	d, #0x00
   00CB 7B            [ 4]  362 	ld	a, e
   00CC 95            [ 4]  363 	sub	a, l
   00CD 7A            [ 4]  364 	ld	a, d
   00CE 9C            [ 4]  365 	sbc	a, h
   00CF E2rD4r00      [10]  366 	jp	PO, 00116$
   00D2 EE 80         [ 7]  367 	xor	a, #0x80
   00D4                     368 00116$:
   00D4 F2rFFr00      [10]  369 	jp	P, 00101$
                     00D7   370 	C$main.c$104$3$144	= .
                            371 	.globl	C$main.c$104$3$144
                            372 ;main.c:104: v = ~(*data++);
   00D7 0A            [ 7]  373 	ld	a, (bc)
   00D8 03            [ 6]  374 	inc	bc
   00D9 2F            [ 4]  375 	cpl
                     00DA   376 	C$main.c$105$3$144	= .
                            377 	.globl	C$main.c$105$3$144
                            378 ;main.c:105: VDPDataPort = v;
   00DA 5F            [ 4]  379 	ld	e,a
   00DB D3 BE         [11]  380 	out	(_VDPDataPort), a
                     00DD   381 	C$main.c$106$3$144	= .
                            382 	.globl	C$main.c$106$3$144
                            383 ;main.c:106: WAIT_VRAM;
   00DD 00            [ 4]  384 	nop 
   00DE 00            [ 4]  385 	nop 
   00DF 00            [ 4]  386 	nop 
   00E0 00            [ 4]  387 	nop 
   00E1 00            [ 4]  388 	nop 
                     00E2   389 	C$main.c$107$3$144	= .
                            390 	.globl	C$main.c$107$3$144
                            391 ;main.c:107: VDPDataPort = v;
   00E2 7B            [ 4]  392 	ld	a, e
   00E3 D3 BE         [11]  393 	out	(_VDPDataPort), a
                     00E5   394 	C$main.c$108$3$144	= .
                            395 	.globl	C$main.c$108$3$144
                            396 ;main.c:108: WAIT_VRAM;
   00E5 00            [ 4]  397 	nop 
   00E6 00            [ 4]  398 	nop 
   00E7 00            [ 4]  399 	nop 
   00E8 00            [ 4]  400 	nop 
   00E9 00            [ 4]  401 	nop 
                     00EA   402 	C$main.c$109$3$144	= .
                            403 	.globl	C$main.c$109$3$144
                            404 ;main.c:109: VDPDataPort = v;
   00EA 7B            [ 4]  405 	ld	a, e
   00EB D3 BE         [11]  406 	out	(_VDPDataPort), a
                     00ED   407 	C$main.c$110$3$144	= .
                            408 	.globl	C$main.c$110$3$144
                            409 ;main.c:110: WAIT_VRAM;
   00ED 00            [ 4]  410 	nop 
   00EE 00            [ 4]  411 	nop 
   00EF 00            [ 4]  412 	nop 
   00F0 00            [ 4]  413 	nop 
   00F1 00            [ 4]  414 	nop 
                     00F2   415 	C$main.c$111$3$144	= .
                            416 	.globl	C$main.c$111$3$144
                            417 ;main.c:111: VDPDataPort = v;
   00F2 7B            [ 4]  418 	ld	a, e
   00F3 D3 BE         [11]  419 	out	(_VDPDataPort), a
                     00F5   420 	C$main.c$112$3$144	= .
                            421 	.globl	C$main.c$112$3$144
                            422 ;main.c:112: WAIT_VRAM;
   00F5 00            [ 4]  423 	nop 
   00F6 00            [ 4]  424 	nop 
   00F7 00            [ 4]  425 	nop 
   00F8 00            [ 4]  426 	nop 
   00F9 00            [ 4]  427 	nop 
                     00FA   428 	C$main.c$102$2$143	= .
                            429 	.globl	C$main.c$102$2$143
                            430 ;main.c:102: for (i = 0; i < n_tiles * 8; i++)
   00FA DD 34 FF      [23]  431 	inc	-1 (ix)
   00FD 18 BF         [12]  432 	jr	00103$
   00FF                     433 00101$:
                     00FF   434 	C$main.c$117$1$142	= .
                            435 	.globl	C$main.c$117$1$142
                            436 ;main.c:117: __endasm;
   00FF FB            [ 4]  437 	ei
   0100 33            [ 6]  438 	inc	sp
   0101 DD E1         [14]  439 	pop	ix
                     0103   440 	C$main.c$118$1$142	= .
                            441 	.globl	C$main.c$118$1$142
                     0103   442 	XFmain$blitTile$0$0	= .
                            443 	.globl	XFmain$blitTile$0$0
   0103 C9            [10]  444 	ret
                     0104   445 	Fmain$syncDisplay$0$0	= .
                            446 	.globl	Fmain$syncDisplay$0$0
                     0104   447 	C$main.c$120$1$142	= .
                            448 	.globl	C$main.c$120$1$142
                            449 ;main.c:120: static void syncDisplay(void)
                            450 ;	---------------------------------
                            451 ; Function syncDisplay
                            452 ; ---------------------------------
   0104                     453 _syncDisplay:
   0104 DD E5         [15]  454 	push	ix
   0106 DD 21 00 00   [14]  455 	ld	ix,#0
   010A DD 39         [15]  456 	add	ix,sp
   010C F5            [11]  457 	push	af
                     010D   458 	C$main.c$124$2$147	= .
                            459 	.globl	C$main.c$124$2$147
                            460 ;main.c:124: for (y = 0; y < DRAWAREA_TILES_H; y++)
   010D 01 00 00      [10]  461 	ld	bc, #0x0000
   0110                     462 00102$:
                     0110   463 	C$main.c$128$3$148	= .
                            464 	.globl	C$main.c$128$3$148
                            465 ;main.c:128: DRAWAREA_FIRST_TID + y * DRAWAREA_TILES_W,
   0110 69            [ 4]  466 	ld	l, c
   0111 60            [ 4]  467 	ld	h, b
   0112 29            [11]  468 	add	hl, hl
   0113 09            [11]  469 	add	hl, bc
   0114 29            [11]  470 	add	hl, hl
   0115 29            [11]  471 	add	hl, hl
   0116 29            [11]  472 	add	hl, hl
   0117 EB            [ 4]  473 	ex	de,hl
   0118 21 48 00      [10]  474 	ld	hl, #0x0048
   011B 19            [11]  475 	add	hl,de
   011C E3            [19]  476 	ex	(sp), hl
                     011D   477 	C$main.c$127$3$148	= .
                            478 	.globl	C$main.c$127$3$148
                            479 ;main.c:127: blitTile(drawbuf + (y * DRAWAREA_TILES_W) * 8,
   011D 69            [ 4]  480 	ld	l, c
   011E 60            [ 4]  481 	ld	h, b
   011F 29            [11]  482 	add	hl, hl
   0120 09            [11]  483 	add	hl, bc
   0121 29            [11]  484 	add	hl, hl
   0122 29            [11]  485 	add	hl, hl
   0123 29            [11]  486 	add	hl, hl
   0124 29            [11]  487 	add	hl, hl
   0125 29            [11]  488 	add	hl, hl
   0126 29            [11]  489 	add	hl, hl
   0127 EB            [ 4]  490 	ex	de,hl
   0128 FD 2Ar15r00   [20]  491 	ld	iy, (_drawbuf)
   012C FD 19         [15]  492 	add	iy, de
   012E C5            [11]  493 	push	bc
   012F 3E 18         [ 7]  494 	ld	a, #0x18
   0131 F5            [11]  495 	push	af
   0132 33            [ 6]  496 	inc	sp
   0133 DD 6E FE      [19]  497 	ld	l,-2 (ix)
   0136 DD 66 FF      [19]  498 	ld	h,-1 (ix)
   0139 E5            [11]  499 	push	hl
   013A FD E5         [15]  500 	push	iy
   013C CDr9Cr00      [17]  501 	call	_blitTile
   013F F1            [10]  502 	pop	af
   0140 F1            [10]  503 	pop	af
   0141 33            [ 6]  504 	inc	sp
   0142 C1            [10]  505 	pop	bc
                     0143   506 	C$main.c$124$2$147	= .
                            507 	.globl	C$main.c$124$2$147
                            508 ;main.c:124: for (y = 0; y < DRAWAREA_TILES_H; y++)
   0143 03            [ 6]  509 	inc	bc
   0144 79            [ 4]  510 	ld	a, c
   0145 D6 0F         [ 7]  511 	sub	a, #0x0f
   0147 78            [ 4]  512 	ld	a, b
   0148 17            [ 4]  513 	rla
   0149 3F            [ 4]  514 	ccf
   014A 1F            [ 4]  515 	rra
   014B DE 80         [ 7]  516 	sbc	a, #0x80
   014D 38 C1         [12]  517 	jr	C,00102$
   014F DD F9         [10]  518 	ld	sp, ix
   0151 DD E1         [14]  519 	pop	ix
                     0153   520 	C$main.c$131$2$147	= .
                            521 	.globl	C$main.c$131$2$147
                     0153   522 	XFmain$syncDisplay$0$0	= .
                            523 	.globl	XFmain$syncDisplay$0$0
   0153 C9            [10]  524 	ret
                     0154   525 	Fmain$clearDisplay$0$0	= .
                            526 	.globl	Fmain$clearDisplay$0$0
                     0154   527 	C$main.c$133$2$147	= .
                            528 	.globl	C$main.c$133$2$147
                            529 ;main.c:133: static void clearDisplay(uint8_t full)
                            530 ;	---------------------------------
                            531 ; Function clearDisplay
                            532 ; ---------------------------------
   0154                     533 _clearDisplay:
   0154 DD E5         [15]  534 	push	ix
   0156 DD 21 00 00   [14]  535 	ld	ix,#0
   015A DD 39         [15]  536 	add	ix,sp
   015C 21 F6 FF      [10]  537 	ld	hl, #-10
   015F 39            [11]  538 	add	hl, sp
   0160 F9            [ 6]  539 	ld	sp, hl
                     0161   540 	C$main.c$140$1$150	= .
                            541 	.globl	C$main.c$140$1$150
                            542 ;main.c:140: if (full)
   0161 DD 7E 04      [19]  543 	ld	a, 4 (ix)
   0164 B7            [ 4]  544 	or	a, a
   0165 28 10         [12]  545 	jr	Z,00127$
                     0167   546 	C$main.c$142$2$151	= .
                            547 	.globl	C$main.c$142$2$151
                            548 ;main.c:142: memset(drawbuf, 0, DRAWAREA_TILES * 8);
   0167 2Ar15r00      [16]  549 	ld	hl, (_drawbuf)
   016A 36 00         [10]  550 	ld	(hl), #0x00
   016C 5D            [ 4]  551 	ld	e, l
   016D 54            [ 4]  552 	ld	d, h
   016E 13            [ 6]  553 	inc	de
   016F 01 3F 0B      [10]  554 	ld	bc, #0x0b3f
   0172 ED B0         [21]  555 	ldir
   0174 C3r57r02      [10]  556 	jp	00134$
                     0177   557 	C$main.c$146$1$150	= .
                            558 	.globl	C$main.c$146$1$150
                            559 ;main.c:146: for (i = 0; i < DRAWAREA_TILES * 8; i += 4)
   0177                     560 00127$:
   0177 DD 36 FA 00   [19]  561 	ld	-6 (ix), #0x00
   017B DD 36 FB 00   [19]  562 	ld	-5 (ix), #0x00
   017F                     563 00113$:
                     017F   564 	C$main.c$148$4$154	= .
                            565 	.globl	C$main.c$148$4$154
                            566 ;main.c:148: drawbuf[i + (off & 3)] &= msk;
   017F 3Ar19r00      [13]  567 	ld	a,(#_clearDisplay_off_1_150 + 0)
   0182 E6 03         [ 7]  568 	and	a, #0x03
   0184 5F            [ 4]  569 	ld	e, a
   0185 16 00         [ 7]  570 	ld	d, #0x00
   0187 DD 7E FA      [19]  571 	ld	a, -6 (ix)
   018A 83            [ 4]  572 	add	a, e
   018B 4F            [ 4]  573 	ld	c, a
   018C DD 7E FB      [19]  574 	ld	a, -5 (ix)
   018F 8A            [ 4]  575 	adc	a, d
   0190 47            [ 4]  576 	ld	b, a
   0191 FD 21r15r00   [14]  577 	ld	iy, #_drawbuf
   0195 FD 7E 00      [19]  578 	ld	a, 0 (iy)
   0198 81            [ 4]  579 	add	a, c
   0199 4F            [ 4]  580 	ld	c, a
   019A FD 7E 01      [19]  581 	ld	a, 1 (iy)
   019D 88            [ 4]  582 	adc	a, b
   019E 47            [ 4]  583 	ld	b, a
   019F 0A            [ 7]  584 	ld	a, (bc)
   01A0 FD 21r18r00   [14]  585 	ld	iy, #_clearDisplay_msk_1_150
   01A4 FD A6 00      [19]  586 	and	a, 0 (iy)
   01A7 02            [ 7]  587 	ld	(bc), a
                     01A8   588 	C$main.c$151$4$154	= .
                            589 	.globl	C$main.c$151$4$154
                            590 ;main.c:151: if ((i & 0x1ff) == 0)
   01A8 DD 7E FA      [19]  591 	ld	a, -6 (ix)
   01AB B7            [ 4]  592 	or	a, a
   01AC 20 0F         [12]  593 	jr	NZ,00114$
   01AE DD CB FB 46   [20]  594 	bit	0, -5 (ix)
   01B2 20 09         [12]  595 	jr	NZ,00114$
                     01B4   596 	C$main.c$153$5$155	= .
                            597 	.globl	C$main.c$153$5$155
                            598 ;main.c:153: SMS_waitForVBlank();
   01B4 CDr00r00      [17]  599 	call	_SMS_waitForVBlank
                     01B7   600 	C$main.c$154$5$155	= .
                            601 	.globl	C$main.c$154$5$155
                            602 ;main.c:154: PSGFrame();
   01B7 CDr00r00      [17]  603 	call	_PSGFrame
                     01BA   604 	C$main.c$155$5$155	= .
                            605 	.globl	C$main.c$155$5$155
                            606 ;main.c:155: PSGSFXFrame();
   01BA CDr00r00      [17]  607 	call	_PSGSFXFrame
   01BD                     608 00114$:
                     01BD   609 	C$main.c$146$3$153	= .
                            610 	.globl	C$main.c$146$3$153
                            611 ;main.c:146: for (i = 0; i < DRAWAREA_TILES * 8; i += 4)
   01BD DD 7E FA      [19]  612 	ld	a, -6 (ix)
   01C0 C6 04         [ 7]  613 	add	a, #0x04
   01C2 DD 77 FA      [19]  614 	ld	-6 (ix), a
   01C5 DD 7E FB      [19]  615 	ld	a, -5 (ix)
   01C8 CE 00         [ 7]  616 	adc	a, #0x00
   01CA DD 77 FB      [19]  617 	ld	-5 (ix), a
   01CD DD 7E FA      [19]  618 	ld	a, -6 (ix)
   01D0 D6 40         [ 7]  619 	sub	a, #0x40
   01D2 DD 7E FB      [19]  620 	ld	a, -5 (ix)
   01D5 17            [ 4]  621 	rla
   01D6 3F            [ 4]  622 	ccf
   01D7 1F            [ 4]  623 	rra
   01D8 DE 8B         [ 7]  624 	sbc	a, #0x8b
   01DA 38 A3         [12]  625 	jr	C,00113$
                     01DC   626 	C$main.c$158$2$152	= .
                            627 	.globl	C$main.c$158$2$152
                            628 ;main.c:158: msk ^= 0xff;
   01DC FD 21r18r00   [14]  629 	ld	iy, #_clearDisplay_msk_1_150
   01E0 FD 7E 00      [19]  630 	ld	a, 0 (iy)
   01E3 EE FF         [ 7]  631 	xor	a, #0xff
   01E5 FD 77 00      [19]  632 	ld	0 (iy), a
                     01E8   633 	C$main.c$160$1$150	= .
                            634 	.globl	C$main.c$160$1$150
                            635 ;main.c:160: for (i = 0; i < DRAWAREA_TILES * 8; i += 4)
   01E8 DD 36 FA 00   [19]  636 	ld	-6 (ix), #0x00
   01EC DD 36 FB 00   [19]  637 	ld	-5 (ix), #0x00
   01F0                     638 00115$:
                     01F0   639 	C$main.c$162$4$157	= .
                            640 	.globl	C$main.c$162$4$157
                            641 ;main.c:162: drawbuf[i + ((2 + off) & 3)] &= msk;
   01F0 21r19r00      [10]  642 	ld	hl,#_clearDisplay_off_1_150 + 0
   01F3 4E            [ 7]  643 	ld	c, (hl)
   01F4 06 00         [ 7]  644 	ld	b, #0x00
   01F6 03            [ 6]  645 	inc	bc
   01F7 03            [ 6]  646 	inc	bc
   01F8 79            [ 4]  647 	ld	a, c
   01F9 E6 03         [ 7]  648 	and	a, #0x03
   01FB 5F            [ 4]  649 	ld	e, a
   01FC 16 00         [ 7]  650 	ld	d, #0x00
   01FE DD 7E FA      [19]  651 	ld	a, -6 (ix)
   0201 83            [ 4]  652 	add	a, e
   0202 4F            [ 4]  653 	ld	c, a
   0203 DD 7E FB      [19]  654 	ld	a, -5 (ix)
   0206 8A            [ 4]  655 	adc	a, d
   0207 47            [ 4]  656 	ld	b, a
   0208 FD 21r15r00   [14]  657 	ld	iy, #_drawbuf
   020C FD 7E 00      [19]  658 	ld	a, 0 (iy)
   020F 81            [ 4]  659 	add	a, c
   0210 4F            [ 4]  660 	ld	c, a
   0211 FD 7E 01      [19]  661 	ld	a, 1 (iy)
   0214 88            [ 4]  662 	adc	a, b
   0215 47            [ 4]  663 	ld	b, a
   0216 0A            [ 7]  664 	ld	a, (bc)
   0217 FD 21r18r00   [14]  665 	ld	iy, #_clearDisplay_msk_1_150
   021B FD A6 00      [19]  666 	and	a, 0 (iy)
   021E 02            [ 7]  667 	ld	(bc), a
                     021F   668 	C$main.c$165$4$157	= .
                            669 	.globl	C$main.c$165$4$157
                            670 ;main.c:165: if ((i & 0x1ff) == 0)
   021F DD 7E FA      [19]  671 	ld	a, -6 (ix)
   0222 B7            [ 4]  672 	or	a, a
   0223 20 0F         [12]  673 	jr	NZ,00116$
   0225 DD CB FB 46   [20]  674 	bit	0, -5 (ix)
   0229 20 09         [12]  675 	jr	NZ,00116$
                     022B   676 	C$main.c$167$5$158	= .
                            677 	.globl	C$main.c$167$5$158
                            678 ;main.c:167: SMS_waitForVBlank();
   022B CDr00r00      [17]  679 	call	_SMS_waitForVBlank
                     022E   680 	C$main.c$168$5$158	= .
                            681 	.globl	C$main.c$168$5$158
                            682 ;main.c:168: PSGFrame();
   022E CDr00r00      [17]  683 	call	_PSGFrame
                     0231   684 	C$main.c$169$5$158	= .
                            685 	.globl	C$main.c$169$5$158
                            686 ;main.c:169: PSGSFXFrame();
   0231 CDr00r00      [17]  687 	call	_PSGSFXFrame
   0234                     688 00116$:
                     0234   689 	C$main.c$160$3$156	= .
                            690 	.globl	C$main.c$160$3$156
                            691 ;main.c:160: for (i = 0; i < DRAWAREA_TILES * 8; i += 4)
   0234 DD 7E FA      [19]  692 	ld	a, -6 (ix)
   0237 C6 04         [ 7]  693 	add	a, #0x04
   0239 DD 77 FA      [19]  694 	ld	-6 (ix), a
   023C DD 7E FB      [19]  695 	ld	a, -5 (ix)
   023F CE 00         [ 7]  696 	adc	a, #0x00
   0241 DD 77 FB      [19]  697 	ld	-5 (ix), a
   0244 DD 7E FA      [19]  698 	ld	a, -6 (ix)
   0247 D6 40         [ 7]  699 	sub	a, #0x40
   0249 DD 7E FB      [19]  700 	ld	a, -5 (ix)
   024C 17            [ 4]  701 	rla
   024D 3F            [ 4]  702 	ccf
   024E 1F            [ 4]  703 	rra
   024F DE 8B         [ 7]  704 	sbc	a, #0x8b
   0251 38 9D         [12]  705 	jr	C,00115$
                     0253   706 	C$main.c$172$2$152	= .
                            707 	.globl	C$main.c$172$2$152
                            708 ;main.c:172: off++;
   0253 21r19r00      [10]  709 	ld	hl, #_clearDisplay_off_1_150+0
   0256 34            [11]  710 	inc	(hl)
                     0257   711 	C$main.c$175$1$150	= .
                            712 	.globl	C$main.c$175$1$150
                            713 ;main.c:175: for (y = 0; y < DRAWAREA_TILES_H; y++)
   0257                     714 00134$:
   0257 DD 36 F8 00   [19]  715 	ld	-8 (ix), #0x00
   025B DD 36 F9 00   [19]  716 	ld	-7 (ix), #0x00
   025F                     717 00119$:
                     025F   718 	C$main.c$177$3$160	= .
                            719 	.globl	C$main.c$177$3$160
                            720 ;main.c:177: SMS_waitForVBlank();
   025F CDr00r00      [17]  721 	call	_SMS_waitForVBlank
                     0262   722 	C$main.c$178$3$160	= .
                            723 	.globl	C$main.c$178$3$160
                            724 ;main.c:178: SMS_copySpritestoSAT();
   0262 CDr00r00      [17]  725 	call	_SMS_copySpritestoSAT
                     0265   726 	C$main.c$179$3$160	= .
                            727 	.globl	C$main.c$179$3$160
                            728 ;main.c:179: PSGFrame();
   0265 CDr00r00      [17]  729 	call	_PSGFrame
                     0268   730 	C$main.c$180$3$160	= .
                            731 	.globl	C$main.c$180$3$160
                            732 ;main.c:180: PSGSFXFrame();
   0268 CDr00r00      [17]  733 	call	_PSGSFXFrame
                     026B   734 	C$main.c$183$3$160	= .
                            735 	.globl	C$main.c$183$3$160
                            736 ;main.c:183: DRAWAREA_FIRST_TID + y * DRAWAREA_TILES_W,
   026B DD 4E F8      [19]  737 	ld	c,-8 (ix)
   026E DD 46 F9      [19]  738 	ld	b,-7 (ix)
   0271 69            [ 4]  739 	ld	l, c
   0272 60            [ 4]  740 	ld	h, b
   0273 29            [11]  741 	add	hl, hl
   0274 09            [11]  742 	add	hl, bc
   0275 29            [11]  743 	add	hl, hl
   0276 29            [11]  744 	add	hl, hl
   0277 29            [11]  745 	add	hl, hl
   0278 EB            [ 4]  746 	ex	de,hl
   0279 21 48 00      [10]  747 	ld	hl, #0x0048
   027C 19            [11]  748 	add	hl,de
   027D DD 75 FE      [19]  749 	ld	-2 (ix), l
   0280 DD 74 FF      [19]  750 	ld	-1 (ix), h
                     0283   751 	C$main.c$182$3$160	= .
                            752 	.globl	C$main.c$182$3$160
                            753 ;main.c:182: blitTile(drawbuf + (y * DRAWAREA_TILES_W) * 8,
   0283 DD 4E F8      [19]  754 	ld	c,-8 (ix)
   0286 DD 46 F9      [19]  755 	ld	b,-7 (ix)
   0289 69            [ 4]  756 	ld	l, c
   028A 60            [ 4]  757 	ld	h, b
   028B 29            [11]  758 	add	hl, hl
   028C 09            [11]  759 	add	hl, bc
   028D 29            [11]  760 	add	hl, hl
   028E 29            [11]  761 	add	hl, hl
   028F 29            [11]  762 	add	hl, hl
   0290 29            [11]  763 	add	hl, hl
   0291 29            [11]  764 	add	hl, hl
   0292 29            [11]  765 	add	hl, hl
   0293 4D            [ 4]  766 	ld	c, l
   0294 44            [ 4]  767 	ld	b, h
   0295 FD 2Ar15r00   [20]  768 	ld	iy, (_drawbuf)
   0299 FD 09         [15]  769 	add	iy, bc
   029B D5            [11]  770 	push	de
   029C 3E 0C         [ 7]  771 	ld	a, #0x0c
   029E F5            [11]  772 	push	af
   029F 33            [ 6]  773 	inc	sp
   02A0 DD 6E FE      [19]  774 	ld	l,-2 (ix)
   02A3 DD 66 FF      [19]  775 	ld	h,-1 (ix)
   02A6 E5            [11]  776 	push	hl
   02A7 FD E5         [15]  777 	push	iy
   02A9 CDr9Cr00      [17]  778 	call	_blitTile
   02AC F1            [10]  779 	pop	af
   02AD F1            [10]  780 	pop	af
   02AE 33            [ 6]  781 	inc	sp
   02AF CDr00r00      [17]  782 	call	_SMS_waitForVBlank
   02B2 CDr00r00      [17]  783 	call	_SMS_copySpritestoSAT
   02B5 CDr00r00      [17]  784 	call	_PSGFrame
   02B8 CDr00r00      [17]  785 	call	_PSGSFXFrame
   02BB D1            [10]  786 	pop	de
                     02BC   787 	C$main.c$192$3$160	= .
                            788 	.globl	C$main.c$192$3$160
                            789 ;main.c:192: DRAWAREA_FIRST_TID + y * DRAWAREA_TILES_W + DRAWAREA_TILES_W / 2,
   02BC 21 54 00      [10]  790 	ld	hl, #0x0054
   02BF 19            [11]  791 	add	hl,de
   02C0 4D            [ 4]  792 	ld	c, l
   02C1 44            [ 4]  793 	ld	b, h
                     02C2   794 	C$main.c$191$3$160	= .
                            795 	.globl	C$main.c$191$3$160
                            796 ;main.c:191: blitTile(drawbuf + (y * DRAWAREA_TILES_W + DRAWAREA_TILES_W / 2) * 8,
   02C2 21 0C 00      [10]  797 	ld	hl, #0x000c
   02C5 19            [11]  798 	add	hl, de
   02C6 29            [11]  799 	add	hl, hl
   02C7 29            [11]  800 	add	hl, hl
   02C8 29            [11]  801 	add	hl, hl
   02C9 EB            [ 4]  802 	ex	de,hl
   02CA FD 2Ar15r00   [20]  803 	ld	iy, (_drawbuf)
   02CE FD 19         [15]  804 	add	iy, de
   02D0 3E 0C         [ 7]  805 	ld	a, #0x0c
   02D2 F5            [11]  806 	push	af
   02D3 33            [ 6]  807 	inc	sp
   02D4 C5            [11]  808 	push	bc
   02D5 FD E5         [15]  809 	push	iy
   02D7 CDr9Cr00      [17]  810 	call	_blitTile
   02DA F1            [10]  811 	pop	af
   02DB F1            [10]  812 	pop	af
   02DC 33            [ 6]  813 	inc	sp
                     02DD   814 	C$main.c$195$3$160	= .
                            815 	.globl	C$main.c$195$3$160
                            816 ;main.c:195: ye = (y & 3) << 2;
   02DD DD 7E F8      [19]  817 	ld	a, -8 (ix)
   02E0 E6 03         [ 7]  818 	and	a, #0x03
   02E2 6F            [ 4]  819 	ld	l, a
   02E3 26 00         [ 7]  820 	ld	h, #0x00
   02E5 29            [11]  821 	add	hl, hl
   02E6 29            [11]  822 	add	hl, hl
   02E7 E3            [19]  823 	ex	(sp), hl
                     02E8   824 	C$main.c$196$3$160	= .
                            825 	.globl	C$main.c$196$3$160
                            826 ;main.c:196: SMS_setBGScrollY(ye);
   02E8 DD 6E F6      [19]  827 	ld	l, -10 (ix)
   02EB CDr00r00      [17]  828 	call	_SMS_setBGScrollY
                     02EE   829 	C$main.c$197$3$160	= .
                            830 	.globl	C$main.c$197$3$160
                            831 ;main.c:197: xe = (y & 1) << 2;
   02EE DD 7E F8      [19]  832 	ld	a, -8 (ix)
   02F1 E6 01         [ 7]  833 	and	a, #0x01
   02F3 6F            [ 4]  834 	ld	l, a
   02F4 26 00         [ 7]  835 	ld	h, #0x00
   02F6 29            [11]  836 	add	hl, hl
   02F7 29            [11]  837 	add	hl, hl
   02F8 DD 75 FC      [19]  838 	ld	-4 (ix), l
   02FB DD 74 FD      [19]  839 	ld	-3 (ix), h
                     02FE   840 	C$main.c$198$3$160	= .
                            841 	.globl	C$main.c$198$3$160
                            842 ;main.c:198: SMS_setBGScrollX(xe);
   02FE DD 6E FC      [19]  843 	ld	l, -4 (ix)
   0301 CDr00r00      [17]  844 	call	_SMS_setBGScrollX
                     0304   845 	C$main.c$200$1$150	= .
                            846 	.globl	C$main.c$200$1$150
                            847 ;main.c:200: for (i = LK_SID; i < N_SPRITES; i++)
   0304 01 01 00      [10]  848 	ld	bc, #0x0001
   0307                     849 00117$:
                     0307   850 	C$main.c$202$5$162	= .
                            851 	.globl	C$main.c$202$5$162
                            852 ;main.c:202: tempMoveSprite(i, xe, -ye);
   0307 DD 5E F6      [19]  853 	ld	e, -10 (ix)
   030A AF            [ 4]  854 	xor	a, a
   030B 93            [ 4]  855 	sub	a, e
   030C 67            [ 4]  856 	ld	h, a
   030D DD 56 FC      [19]  857 	ld	d, -4 (ix)
   0310 79            [ 4]  858 	ld	a, c
   0311 C5            [11]  859 	push	bc
   0312 E5            [11]  860 	push	hl
   0313 33            [ 6]  861 	inc	sp
   0314 5F            [ 4]  862 	ld	e, a
   0315 D5            [11]  863 	push	de
   0316 CDr45r00      [17]  864 	call	_tempMoveSprite
   0319 F1            [10]  865 	pop	af
   031A 33            [ 6]  866 	inc	sp
   031B C1            [10]  867 	pop	bc
                     031C   868 	C$main.c$200$4$161	= .
                            869 	.globl	C$main.c$200$4$161
                            870 ;main.c:200: for (i = LK_SID; i < N_SPRITES; i++)
   031C 03            [ 6]  871 	inc	bc
   031D 79            [ 4]  872 	ld	a, c
   031E D6 07         [ 7]  873 	sub	a, #0x07
   0320 78            [ 4]  874 	ld	a, b
   0321 17            [ 4]  875 	rla
   0322 3F            [ 4]  876 	ccf
   0323 1F            [ 4]  877 	rra
   0324 DE 80         [ 7]  878 	sbc	a, #0x80
   0326 38 DF         [12]  879 	jr	C,00117$
                     0328   880 	C$main.c$175$2$159	= .
                            881 	.globl	C$main.c$175$2$159
                            882 ;main.c:175: for (y = 0; y < DRAWAREA_TILES_H; y++)
   0328 DD 34 F8      [23]  883 	inc	-8 (ix)
   032B 20 03         [12]  884 	jr	NZ,00186$
   032D DD 34 F9      [23]  885 	inc	-7 (ix)
   0330                     886 00186$:
   0330 DD 7E F8      [19]  887 	ld	a, -8 (ix)
   0333 D6 0F         [ 7]  888 	sub	a, #0x0f
   0335 DD 7E F9      [19]  889 	ld	a, -7 (ix)
   0338 17            [ 4]  890 	rla
   0339 3F            [ 4]  891 	ccf
   033A 1F            [ 4]  892 	rra
   033B DE 80         [ 7]  893 	sbc	a, #0x80
   033D DAr5Fr02      [10]  894 	jp	C, 00119$
                     0340   895 	C$main.c$206$1$150	= .
                            896 	.globl	C$main.c$206$1$150
                            897 ;main.c:206: for (i = LK_SID; i < N_SPRITES; i++)
   0340 01 01 00      [10]  898 	ld	bc, #0x0001
   0343                     899 00121$:
                     0343   900 	C$main.c$208$3$164	= .
                            901 	.globl	C$main.c$208$3$164
                            902 ;main.c:208: tempMoveSprite(i, 0, 0);
   0343 51            [ 4]  903 	ld	d, c
   0344 C5            [11]  904 	push	bc
   0345 21 00 00      [10]  905 	ld	hl, #0x0000
   0348 E5            [11]  906 	push	hl
   0349 D5            [11]  907 	push	de
   034A 33            [ 6]  908 	inc	sp
   034B CDr45r00      [17]  909 	call	_tempMoveSprite
   034E F1            [10]  910 	pop	af
   034F 33            [ 6]  911 	inc	sp
   0350 C1            [10]  912 	pop	bc
                     0351   913 	C$main.c$206$2$163	= .
                            914 	.globl	C$main.c$206$2$163
                            915 ;main.c:206: for (i = LK_SID; i < N_SPRITES; i++)
   0351 03            [ 6]  916 	inc	bc
   0352 79            [ 4]  917 	ld	a, c
   0353 D6 07         [ 7]  918 	sub	a, #0x07
   0355 78            [ 4]  919 	ld	a, b
   0356 17            [ 4]  920 	rla
   0357 3F            [ 4]  921 	ccf
   0358 1F            [ 4]  922 	rra
   0359 DE 80         [ 7]  923 	sbc	a, #0x80
   035B 38 E6         [12]  924 	jr	C,00121$
                     035D   925 	C$main.c$211$1$150	= .
                            926 	.globl	C$main.c$211$1$150
                            927 ;main.c:211: SMS_setBGScrollX(0);
   035D 2E 00         [ 7]  928 	ld	l, #0x00
   035F CDr00r00      [17]  929 	call	_SMS_setBGScrollX
                     0362   930 	C$main.c$212$1$150	= .
                            931 	.globl	C$main.c$212$1$150
                            932 ;main.c:212: SMS_setBGScrollY(0);
   0362 2E 00         [ 7]  933 	ld	l, #0x00
   0364 CDr00r00      [17]  934 	call	_SMS_setBGScrollY
   0367 DD F9         [10]  935 	ld	sp, ix
   0369 DD E1         [14]  936 	pop	ix
                     036B   937 	C$main.c$213$1$150	= .
                            938 	.globl	C$main.c$213$1$150
                     036B   939 	XFmain$clearDisplay$0$0	= .
                            940 	.globl	XFmain$clearDisplay$0$0
   036B C9            [10]  941 	ret
                     036C   942 	Fmain$setupTilemap$0$0	= .
                            943 	.globl	Fmain$setupTilemap$0$0
                     036C   944 	C$main.c$215$1$150	= .
                            945 	.globl	C$main.c$215$1$150
                            946 ;main.c:215: static void setupTilemap()
                            947 ;	---------------------------------
                            948 ; Function setupTilemap
                            949 ; ---------------------------------
   036C                     950 _setupTilemap:
   036C DD E5         [15]  951 	push	ix
   036E DD 21 00 00   [14]  952 	ld	ix,#0
   0372 DD 39         [15]  953 	add	ix,sp
   0374 F5            [11]  954 	push	af
                     0375   955 	C$main.c$218$1$150	= .
                            956 	.globl	C$main.c$218$1$150
                            957 ;main.c:218: int tid = DRAWAREA_FIRST_TID;
   0375 01 48 00      [10]  958 	ld	bc, #0x0048
                     0378   959 	C$main.c$220$1$165	= .
                            960 	.globl	C$main.c$220$1$165
                            961 ;main.c:220: SMS_loadTileMap(0, 0, main_tilemap, main_tilemap_size);
   0378 C5            [11]  962 	push	bc
   0379 21 00 06      [10]  963 	ld	hl, #0x0600
   037C E5            [11]  964 	push	hl
   037D 21r00r00      [10]  965 	ld	hl, #_main_tilemap
   0380 E5            [11]  966 	push	hl
   0381 21 00 00      [10]  967 	ld	hl, #0x0000
   0384 E5            [11]  968 	push	hl
   0385 CDr00r00      [17]  969 	call	_SMS_loadTileMap
   0388 21 06 00      [10]  970 	ld	hl, #6
   038B 39            [11]  971 	add	hl, sp
   038C F9            [ 6]  972 	ld	sp, hl
   038D C1            [10]  973 	pop	bc
                     038E   974 	C$main.c$222$2$170	= .
                            975 	.globl	C$main.c$222$2$170
                            976 ;main.c:222: for (y = 0; y < DRAWAREA_TILES_H; y++)
   038E 11 00 00      [10]  977 	ld	de, #0x0000
   0391                     978 00107$:
                     0391   979 	C$main.c$224$3$167	= .
                            980 	.globl	C$main.c$224$3$167
                            981 ;main.c:224: SMS_setNextTileatXY(DRAWAREA_X, y + DRAWAREA_Y);
   0391 21 04 00      [10]  982 	ld	hl, #0x0004
   0394 19            [11]  983 	add	hl, de
   0395 29            [11]  984 	add	hl, hl
   0396 29            [11]  985 	add	hl, hl
   0397 29            [11]  986 	add	hl, hl
   0398 29            [11]  987 	add	hl, hl
   0399 29            [11]  988 	add	hl, hl
   039A 29            [11]  989 	add	hl, hl
   039B CB DD         [ 8]  990 	set	3, l
   039D 7C            [ 4]  991 	ld	a, h
   039E F6 78         [ 7]  992 	or	a, #0x78
   03A0 67            [ 4]  993 	ld	h, a
   03A1 C5            [11]  994 	push	bc
   03A2 CF            [11]  995 	rst	#0x08
   03A3 C1            [10]  996 	pop	bc
                     03A4   997 	C$main.c$225$2$170	= .
                            998 	.globl	C$main.c$225$2$170
                            999 ;main.c:225: for (x = 0; x < DRAWAREA_TILES_W; x++)
   03A4 21 00 00      [10] 1000 	ld	hl, #0x0000
   03A7                    1001 00105$:
                     03A7  1002 	C$main.c$227$5$169	= .
                           1003 	.globl	C$main.c$227$5$169
                           1004 ;main.c:227: SMS_setTile(tid++);
   03A7 33            [ 6] 1005 	inc	sp
   03A8 33            [ 6] 1006 	inc	sp
   03A9 C5            [11] 1007 	push	bc
   03AA 03            [ 6] 1008 	inc	bc
   03AB E5            [11] 1009 	push	hl
   03AC DD 6E FE      [19] 1010 	ld	l,-2 (ix)
   03AF DD 66 FF      [19] 1011 	ld	h,-1 (ix)
   03B2 DF            [11] 1012 	rst	#0x18
   03B3 E1            [10] 1013 	pop	hl
                     03B4  1014 	C$main.c$225$4$168	= .
                           1015 	.globl	C$main.c$225$4$168
                           1016 ;main.c:225: for (x = 0; x < DRAWAREA_TILES_W; x++)
   03B4 23            [ 6] 1017 	inc	hl
   03B5 7D            [ 4] 1018 	ld	a, l
   03B6 D6 18         [ 7] 1019 	sub	a, #0x18
   03B8 7C            [ 4] 1020 	ld	a, h
   03B9 17            [ 4] 1021 	rla
   03BA 3F            [ 4] 1022 	ccf
   03BB 1F            [ 4] 1023 	rra
   03BC DE 80         [ 7] 1024 	sbc	a, #0x80
   03BE 38 E7         [12] 1025 	jr	C,00105$
                     03C0  1026 	C$main.c$222$2$170	= .
                           1027 	.globl	C$main.c$222$2$170
                           1028 ;main.c:222: for (y = 0; y < DRAWAREA_TILES_H; y++)
   03C0 13            [ 6] 1029 	inc	de
   03C1 7B            [ 4] 1030 	ld	a, e
   03C2 D6 0F         [ 7] 1031 	sub	a, #0x0f
   03C4 7A            [ 4] 1032 	ld	a, d
   03C5 17            [ 4] 1033 	rla
   03C6 3F            [ 4] 1034 	ccf
   03C7 1F            [ 4] 1035 	rra
   03C8 DE 80         [ 7] 1036 	sbc	a, #0x80
   03CA 38 C5         [12] 1037 	jr	C,00107$
                     03CC  1038 	C$main.c$233$2$170	= .
                           1039 	.globl	C$main.c$233$2$170
                           1040 ;main.c:233: for (y = 24; y < 26; y++)
   03CC 11 18 00      [10] 1041 	ld	de, #0x0018
   03CF                    1042 00111$:
                     03CF  1043 	C$main.c$235$3$171	= .
                           1044 	.globl	C$main.c$235$3$171
                           1045 ;main.c:235: SMS_setNextTileatXY(0, y);
   03CF 6B            [ 4] 1046 	ld	l, e
   03D0 62            [ 4] 1047 	ld	h, d
   03D1 29            [11] 1048 	add	hl, hl
   03D2 29            [11] 1049 	add	hl, hl
   03D3 29            [11] 1050 	add	hl, hl
   03D4 29            [11] 1051 	add	hl, hl
   03D5 29            [11] 1052 	add	hl, hl
   03D6 29            [11] 1053 	add	hl, hl
   03D7 7C            [ 4] 1054 	ld	a, h
   03D8 F6 78         [ 7] 1055 	or	a, #0x78
   03DA 67            [ 4] 1056 	ld	h, a
   03DB CF            [11] 1057 	rst	#0x08
                     03DC  1058 	C$main.c$236$2$170	= .
                           1059 	.globl	C$main.c$236$2$170
                           1060 ;main.c:236: for (x = 0; x < 32; x++)
   03DC 01 00 00      [10] 1061 	ld	bc, #0x0000
   03DF                    1062 00109$:
                     03DF  1063 	C$main.c$238$5$173	= .
                           1064 	.globl	C$main.c$238$5$173
                           1065 ;main.c:238: SMS_setTile(BGBLANK_TID);
   03DF 21 47 00      [10] 1066 	ld	hl, #0x0047
   03E2 DF            [11] 1067 	rst	#0x18
                     03E3  1068 	C$main.c$236$4$172	= .
                           1069 	.globl	C$main.c$236$4$172
                           1070 ;main.c:236: for (x = 0; x < 32; x++)
   03E3 03            [ 6] 1071 	inc	bc
   03E4 79            [ 4] 1072 	ld	a, c
   03E5 D6 20         [ 7] 1073 	sub	a, #0x20
   03E7 78            [ 4] 1074 	ld	a, b
   03E8 17            [ 4] 1075 	rla
   03E9 3F            [ 4] 1076 	ccf
   03EA 1F            [ 4] 1077 	rra
   03EB DE 80         [ 7] 1078 	sbc	a, #0x80
   03ED 38 F0         [12] 1079 	jr	C,00109$
                     03EF  1080 	C$main.c$233$2$170	= .
                           1081 	.globl	C$main.c$233$2$170
                           1082 ;main.c:233: for (y = 24; y < 26; y++)
   03EF 13            [ 6] 1083 	inc	de
   03F0 7B            [ 4] 1084 	ld	a, e
   03F1 D6 1A         [ 7] 1085 	sub	a, #0x1a
   03F3 7A            [ 4] 1086 	ld	a, d
   03F4 17            [ 4] 1087 	rla
   03F5 3F            [ 4] 1088 	ccf
   03F6 1F            [ 4] 1089 	rra
   03F7 DE 80         [ 7] 1090 	sbc	a, #0x80
   03F9 38 D4         [12] 1091 	jr	C,00111$
   03FB DD F9         [10] 1092 	ld	sp, ix
   03FD DD E1         [14] 1093 	pop	ix
                     03FF  1094 	C$main.c$241$2$170	= .
                           1095 	.globl	C$main.c$241$2$170
                     03FF  1096 	XFmain$setupTilemap$0$0	= .
                           1097 	.globl	XFmain$setupTilemap$0$0
   03FF C9            [10] 1098 	ret
                     0400  1099 	Fmain$putPixel$0$0	= .
                           1100 	.globl	Fmain$putPixel$0$0
                     0400  1101 	C$main.c$243$2$170	= .
                           1102 	.globl	C$main.c$243$2$170
                           1103 ;main.c:243: static void putPixel(int x, int y)
                           1104 ;	---------------------------------
                           1105 ; Function putPixel
                           1106 ; ---------------------------------
   0400                    1107 _putPixel:
   0400 DD E5         [15] 1108 	push	ix
   0402 DD 21 00 00   [14] 1109 	ld	ix,#0
   0406 DD 39         [15] 1110 	add	ix,sp
   0408 F5            [11] 1111 	push	af
   0409 3B            [ 6] 1112 	dec	sp
                     040A  1113 	C$main.c$249$1$175	= .
                           1114 	.globl	C$main.c$249$1$175
                           1115 ;main.c:249: modified_tile = (x >> 3) + (y >> 3) * DRAWAREA_TILES_W;
   040A DD 4E 04      [19] 1116 	ld	c,4 (ix)
   040D DD 46 05      [19] 1117 	ld	b,5 (ix)
   0410 CB 28         [ 8] 1118 	sra	b
   0412 CB 19         [ 8] 1119 	rr	c
   0414 CB 28         [ 8] 1120 	sra	b
   0416 CB 19         [ 8] 1121 	rr	c
   0418 CB 28         [ 8] 1122 	sra	b
   041A CB 19         [ 8] 1123 	rr	c
   041C DD 5E 06      [19] 1124 	ld	e,6 (ix)
   041F DD 56 07      [19] 1125 	ld	d,7 (ix)
   0422 CB 2A         [ 8] 1126 	sra	d
   0424 CB 1B         [ 8] 1127 	rr	e
   0426 CB 2A         [ 8] 1128 	sra	d
   0428 CB 1B         [ 8] 1129 	rr	e
   042A CB 2A         [ 8] 1130 	sra	d
   042C CB 1B         [ 8] 1131 	rr	e
   042E 6B            [ 4] 1132 	ld	l, e
   042F 62            [ 4] 1133 	ld	h, d
   0430 29            [11] 1134 	add	hl, hl
   0431 19            [11] 1135 	add	hl, de
   0432 29            [11] 1136 	add	hl, hl
   0433 29            [11] 1137 	add	hl, hl
   0434 29            [11] 1138 	add	hl, hl
   0435 09            [11] 1139 	add	hl,bc
   0436 EB            [ 4] 1140 	ex	de,hl
                     0437  1141 	C$main.c$251$1$175	= .
                           1142 	.globl	C$main.c$251$1$175
                           1143 ;main.c:251: bit = 0x80 >> (x & 7);
   0437 DD 7E 04      [19] 1144 	ld	a, 4 (ix)
   043A E6 07         [ 7] 1145 	and	a, #0x07
   043C 47            [ 4] 1146 	ld	b, a
   043D DD 36 FD 80   [19] 1147 	ld	-3 (ix), #0x80
   0441 04            [ 4] 1148 	inc	b
   0442 18 04         [12] 1149 	jr	00104$
   0444                    1150 00103$:
   0444 DD CB FD 3E   [23] 1151 	srl	-3 (ix)
   0448                    1152 00104$:
   0448 10 FA         [13] 1153 	djnz	00103$
                     044A  1154 	C$main.c$252$1$175	= .
                           1155 	.globl	C$main.c$252$1$175
                           1156 ;main.c:252: drawbuf[(modified_tile << 3) + (y & 0x7)] |= bit;
   044A 4B            [ 4] 1157 	ld	c, e
   044B 42            [ 4] 1158 	ld	b, d
   044C CB 21         [ 8] 1159 	sla	c
   044E CB 10         [ 8] 1160 	rl	b
   0450 CB 21         [ 8] 1161 	sla	c
   0452 CB 10         [ 8] 1162 	rl	b
   0454 CB 21         [ 8] 1163 	sla	c
   0456 CB 10         [ 8] 1164 	rl	b
   0458 DD 7E 06      [19] 1165 	ld	a, 6 (ix)
   045B E6 07         [ 7] 1166 	and	a, #0x07
   045D 6F            [ 4] 1167 	ld	l, a
   045E 26 00         [ 7] 1168 	ld	h, #0x00
   0460 09            [11] 1169 	add	hl,bc
   0461 DD 75 FE      [19] 1170 	ld	-2 (ix), l
   0464 DD 74 FF      [19] 1171 	ld	-1 (ix), h
   0467 FD 2Ar15r00   [20] 1172 	ld	iy, (_drawbuf)
   046B C5            [11] 1173 	push	bc
   046C DD 4E FE      [19] 1174 	ld	c,-2 (ix)
   046F DD 46 FF      [19] 1175 	ld	b,-1 (ix)
   0472 FD 09         [15] 1176 	add	iy, bc
   0474 C1            [10] 1177 	pop	bc
   0475 FD 7E 00      [19] 1178 	ld	a, 0 (iy)
   0478 DD B6 FD      [19] 1179 	or	a, -3 (ix)
   047B FD 77 00      [19] 1180 	ld	0 (iy), a
                     047E  1181 	C$main.c$254$1$175	= .
                           1182 	.globl	C$main.c$254$1$175
                           1183 ;main.c:254: blitTile(drawbuf + (modified_tile << 3), DRAWAREA_FIRST_TID + modified_tile, 1);
   047E 21 48 00      [10] 1184 	ld	hl, #0x0048
   0481 19            [11] 1185 	add	hl, de
   0482 FD 2Ar15r00   [20] 1186 	ld	iy, (_drawbuf)
   0486 FD 09         [15] 1187 	add	iy, bc
   0488 3E 01         [ 7] 1188 	ld	a, #0x01
   048A F5            [11] 1189 	push	af
   048B 33            [ 6] 1190 	inc	sp
   048C E5            [11] 1191 	push	hl
   048D FD E5         [15] 1192 	push	iy
   048F CDr9Cr00      [17] 1193 	call	_blitTile
   0492 DD F9         [10] 1194 	ld	sp,ix
   0494 DD E1         [14] 1195 	pop	ix
                     0496  1196 	C$main.c$255$1$175	= .
                           1197 	.globl	C$main.c$255$1$175
                     0496  1198 	XFmain$putPixel$0$0	= .
                           1199 	.globl	XFmain$putPixel$0$0
   0496 C9            [10] 1200 	ret
                     0497  1201 	Fmain$drawLine$0$0	= .
                           1202 	.globl	Fmain$drawLine$0$0
                     0497  1203 	C$main.c$257$1$175	= .
                           1204 	.globl	C$main.c$257$1$175
                           1205 ;main.c:257: static void drawLine(int x0, int y0, int x1, int y1)
                           1206 ;	---------------------------------
                           1207 ; Function drawLine
                           1208 ; ---------------------------------
   0497                    1209 _drawLine:
   0497 DD E5         [15] 1210 	push	ix
   0499 DD 21 00 00   [14] 1211 	ld	ix,#0
   049D DD 39         [15] 1212 	add	ix,sp
   049F 21 F3 FF      [10] 1213 	ld	hl, #-13
   04A2 39            [11] 1214 	add	hl, sp
   04A3 F9            [ 6] 1215 	ld	sp, hl
                     04A4  1216 	C$main.c$259$1$177	= .
                           1217 	.globl	C$main.c$259$1$177
                           1218 ;main.c:259: int16_t dx = abs(x1 - x0);
   04A4 DD 7E 08      [19] 1219 	ld	a, 8 (ix)
   04A7 DD 96 04      [19] 1220 	sub	a, 4 (ix)
   04AA 4F            [ 4] 1221 	ld	c, a
   04AB DD 7E 09      [19] 1222 	ld	a, 9 (ix)
   04AE DD 9E 05      [19] 1223 	sbc	a, 5 (ix)
   04B1 47            [ 4] 1224 	ld	b, a
   04B2 C5            [11] 1225 	push	bc
   04B3 CDr00r00      [17] 1226 	call	_abs
   04B6 F1            [10] 1227 	pop	af
   04B7 4D            [ 4] 1228 	ld	c, l
   04B8 44            [ 4] 1229 	ld	b, h
                     04B9  1230 	C$main.c$260$1$177	= .
                           1231 	.globl	C$main.c$260$1$177
                           1232 ;main.c:260: int16_t dy = -abs(y1 - y0);
   04B9 DD 7E 0A      [19] 1233 	ld	a, 10 (ix)
   04BC DD 96 06      [19] 1234 	sub	a, 6 (ix)
   04BF 5F            [ 4] 1235 	ld	e, a
   04C0 DD 7E 0B      [19] 1236 	ld	a, 11 (ix)
   04C3 DD 9E 07      [19] 1237 	sbc	a, 7 (ix)
   04C6 57            [ 4] 1238 	ld	d, a
   04C7 D5            [11] 1239 	push	de
   04C8 CDr00r00      [17] 1240 	call	_abs
   04CB F1            [10] 1241 	pop	af
   04CC AF            [ 4] 1242 	xor	a, a
   04CD 95            [ 4] 1243 	sub	a, l
   04CE 5F            [ 4] 1244 	ld	e, a
   04CF 3E 00         [ 7] 1245 	ld	a, #0x00
   04D1 9C            [ 4] 1246 	sbc	a, h
   04D2 DD 73 F6      [19] 1247 	ld	-10 (ix), e
   04D5 DD 77 F7      [19] 1248 	ld	-9 (ix), a
                     04D8  1249 	C$main.c$261$1$177	= .
                           1250 	.globl	C$main.c$261$1$177
                           1251 ;main.c:261: int8_t sx = x0 < x1 ? 1 : -1;
   04D8 DD 7E 04      [19] 1252 	ld	a, 4 (ix)
   04DB DD 96 08      [19] 1253 	sub	a, 8 (ix)
   04DE DD 7E 05      [19] 1254 	ld	a, 5 (ix)
   04E1 DD 9E 09      [19] 1255 	sbc	a, 9 (ix)
   04E4 E2rE9r04      [10] 1256 	jp	PO, 00147$
   04E7 EE 80         [ 7] 1257 	xor	a, #0x80
   04E9                    1258 00147$:
   04E9 F2rF0r04      [10] 1259 	jp	P, 00115$
   04EC 1E 01         [ 7] 1260 	ld	e, #0x01
   04EE 18 02         [12] 1261 	jr	00116$
   04F0                    1262 00115$:
   04F0 1E FF         [ 7] 1263 	ld	e, #0xff
   04F2                    1264 00116$:
   04F2 DD 73 F9      [19] 1265 	ld	-7 (ix), e
                     04F5  1266 	C$main.c$262$1$177	= .
                           1267 	.globl	C$main.c$262$1$177
                           1268 ;main.c:262: int8_t sy = y0 < y1 ? 1 : -1;
   04F5 DD 7E 06      [19] 1269 	ld	a, 6 (ix)
   04F8 DD 96 0A      [19] 1270 	sub	a, 10 (ix)
   04FB DD 7E 07      [19] 1271 	ld	a, 7 (ix)
   04FE DD 9E 0B      [19] 1272 	sbc	a, 11 (ix)
   0501 E2r06r05      [10] 1273 	jp	PO, 00148$
   0504 EE 80         [ 7] 1274 	xor	a, #0x80
   0506                    1275 00148$:
   0506 F2r0Dr05      [10] 1276 	jp	P, 00117$
   0509 1E 01         [ 7] 1277 	ld	e, #0x01
   050B 18 02         [12] 1278 	jr	00118$
   050D                    1279 00117$:
   050D 1E FF         [ 7] 1280 	ld	e, #0xff
   050F                    1281 00118$:
   050F DD 73 F8      [19] 1282 	ld	-8 (ix), e
                     0512  1283 	C$main.c$263$1$177	= .
                           1284 	.globl	C$main.c$263$1$177
                           1285 ;main.c:263: int err = dx + dy;
   0512 DD 6E F6      [19] 1286 	ld	l,-10 (ix)
   0515 DD 66 F7      [19] 1287 	ld	h,-9 (ix)
   0518 09            [11] 1288 	add	hl, bc
   0519 DD 75 FA      [19] 1289 	ld	-6 (ix), l
   051C DD 74 FB      [19] 1290 	ld	-5 (ix), h
                     051F  1291 	C$main.c$268$1$177	= .
                           1292 	.globl	C$main.c$268$1$177
                           1293 ;main.c:268: modified_tile = (x0 >> 3) + (y0 >> 3) * DRAWAREA_TILES_W;
   051F DD 5E 04      [19] 1294 	ld	e,4 (ix)
   0522 DD 56 05      [19] 1295 	ld	d,5 (ix)
   0525 CB 2A         [ 8] 1296 	sra	d
   0527 CB 1B         [ 8] 1297 	rr	e
   0529 CB 2A         [ 8] 1298 	sra	d
   052B CB 1B         [ 8] 1299 	rr	e
   052D CB 2A         [ 8] 1300 	sra	d
   052F CB 1B         [ 8] 1301 	rr	e
   0531 DD 6E 06      [19] 1302 	ld	l,6 (ix)
   0534 DD 66 07      [19] 1303 	ld	h,7 (ix)
   0537 CB 2C         [ 8] 1304 	sra	h
   0539 CB 1D         [ 8] 1305 	rr	l
   053B CB 2C         [ 8] 1306 	sra	h
   053D CB 1D         [ 8] 1307 	rr	l
   053F CB 2C         [ 8] 1308 	sra	h
   0541 CB 1D         [ 8] 1309 	rr	l
   0543 D5            [11] 1310 	push	de
   0544 5D            [ 4] 1311 	ld	e, l
   0545 54            [ 4] 1312 	ld	d, h
   0546 29            [11] 1313 	add	hl, hl
   0547 19            [11] 1314 	add	hl, de
   0548 29            [11] 1315 	add	hl, hl
   0549 29            [11] 1316 	add	hl, hl
   054A 29            [11] 1317 	add	hl, hl
   054B D1            [10] 1318 	pop	de
   054C 19            [11] 1319 	add	hl, de
   054D DD 75 F4      [19] 1320 	ld	-12 (ix), l
   0550 DD 74 F5      [19] 1321 	ld	-11 (ix), h
                     0553  1322 	C$main.c$270$1$177	= .
                           1323 	.globl	C$main.c$270$1$177
                           1324 ;main.c:270: while (1)
   0553                    1325 00111$:
                     0553  1326 	C$main.c$273$2$178	= .
                           1327 	.globl	C$main.c$273$2$178
                           1328 ;main.c:273: next_tile = (x0 >> 3) + (y0 >> 3) * DRAWAREA_TILES_W;
   0553 DD 5E 04      [19] 1329 	ld	e,4 (ix)
   0556 DD 56 05      [19] 1330 	ld	d,5 (ix)
   0559 CB 2A         [ 8] 1331 	sra	d
   055B CB 1B         [ 8] 1332 	rr	e
   055D CB 2A         [ 8] 1333 	sra	d
   055F CB 1B         [ 8] 1334 	rr	e
   0561 CB 2A         [ 8] 1335 	sra	d
   0563 CB 1B         [ 8] 1336 	rr	e
   0565 DD 6E 06      [19] 1337 	ld	l,6 (ix)
   0568 DD 66 07      [19] 1338 	ld	h,7 (ix)
   056B CB 2C         [ 8] 1339 	sra	h
   056D CB 1D         [ 8] 1340 	rr	l
   056F CB 2C         [ 8] 1341 	sra	h
   0571 CB 1D         [ 8] 1342 	rr	l
   0573 CB 2C         [ 8] 1343 	sra	h
   0575 CB 1D         [ 8] 1344 	rr	l
   0577 D5            [11] 1345 	push	de
   0578 5D            [ 4] 1346 	ld	e, l
   0579 54            [ 4] 1347 	ld	d, h
   057A 29            [11] 1348 	add	hl, hl
   057B 19            [11] 1349 	add	hl, de
   057C 29            [11] 1350 	add	hl, hl
   057D 29            [11] 1351 	add	hl, hl
   057E 29            [11] 1352 	add	hl, hl
   057F D1            [10] 1353 	pop	de
   0580 19            [11] 1354 	add	hl,de
   0581 5D            [ 4] 1355 	ld	e, l
   0582 54            [ 4] 1356 	ld	d, h
                     0583  1357 	C$main.c$274$2$178	= .
                           1358 	.globl	C$main.c$274$2$178
                           1359 ;main.c:274: if (modified_tile != next_tile)
   0583 DD 7E F4      [19] 1360 	ld	a, -12 (ix)
   0586 93            [ 4] 1361 	sub	a, e
   0587 20 06         [12] 1362 	jr	NZ,00149$
   0589 DD 7E F5      [19] 1363 	ld	a, -11 (ix)
   058C 92            [ 4] 1364 	sub	a, d
   058D 28 53         [12] 1365 	jr	Z,00102$
   058F                    1366 00149$:
                     058F  1367 	C$main.c$276$3$179	= .
                           1368 	.globl	C$main.c$276$3$179
                           1369 ;main.c:276: blitTile(drawbuf + (modified_tile << 3), DRAWAREA_FIRST_TID + modified_tile, 1);
   058F DD 7E F4      [19] 1370 	ld	a, -12 (ix)
   0592 C6 48         [ 7] 1371 	add	a, #0x48
   0594 DD 77 FE      [19] 1372 	ld	-2 (ix), a
   0597 DD 7E F5      [19] 1373 	ld	a, -11 (ix)
   059A CE 00         [ 7] 1374 	adc	a, #0x00
   059C DD 77 FF      [19] 1375 	ld	-1 (ix), a
   059F DD 7E F4      [19] 1376 	ld	a, -12 (ix)
   05A2 DD 77 FC      [19] 1377 	ld	-4 (ix), a
   05A5 DD 7E F5      [19] 1378 	ld	a, -11 (ix)
   05A8 DD 77 FD      [19] 1379 	ld	-3 (ix), a
   05AB 3E 04         [ 7] 1380 	ld	a, #0x03+1
   05AD 18 08         [12] 1381 	jr	00151$
   05AF                    1382 00150$:
   05AF DD CB FC 26   [23] 1383 	sla	-4 (ix)
   05B3 DD CB FD 16   [23] 1384 	rl	-3 (ix)
   05B7                    1385 00151$:
   05B7 3D            [ 4] 1386 	dec	a
   05B8 20 F5         [12] 1387 	jr	NZ,00150$
   05BA E5            [11] 1388 	push	hl
   05BB DD 6E FC      [19] 1389 	ld	l, -4 (ix)
   05BE DD 66 FD      [19] 1390 	ld	h, -3 (ix)
   05C1 E5            [11] 1391 	push	hl
   05C2 FD E1         [14] 1392 	pop	iy
   05C4 E1            [10] 1393 	pop	hl
   05C5 C5            [11] 1394 	push	bc
   05C6 ED 4Br15r00   [20] 1395 	ld	bc, (_drawbuf)
   05CA FD 09         [15] 1396 	add	iy, bc
   05CC D5            [11] 1397 	push	de
   05CD 3E 01         [ 7] 1398 	ld	a, #0x01
   05CF F5            [11] 1399 	push	af
   05D0 33            [ 6] 1400 	inc	sp
   05D1 DD 6E FE      [19] 1401 	ld	l,-2 (ix)
   05D4 DD 66 FF      [19] 1402 	ld	h,-1 (ix)
   05D7 E5            [11] 1403 	push	hl
   05D8 FD E5         [15] 1404 	push	iy
   05DA CDr9Cr00      [17] 1405 	call	_blitTile
   05DD F1            [10] 1406 	pop	af
   05DE F1            [10] 1407 	pop	af
   05DF 33            [ 6] 1408 	inc	sp
   05E0 D1            [10] 1409 	pop	de
   05E1 C1            [10] 1410 	pop	bc
   05E2                    1411 00102$:
                     05E2  1412 	C$main.c$278$2$178	= .
                           1413 	.globl	C$main.c$278$2$178
                           1414 ;main.c:278: modified_tile = next_tile;
   05E2 DD 73 F4      [19] 1415 	ld	-12 (ix), e
   05E5 DD 72 F5      [19] 1416 	ld	-11 (ix), d
                     05E8  1417 	C$main.c$280$1$177	= .
                           1418 	.globl	C$main.c$280$1$177
                           1419 ;main.c:280: bit = 0x80 >> (x0 & 7);
   05E8 DD 7E 04      [19] 1420 	ld	a, 4 (ix)
   05EB E6 07         [ 7] 1421 	and	a, #0x07
   05ED DD 36 F3 80   [19] 1422 	ld	-13 (ix), #0x80
   05F1 3C            [ 4] 1423 	inc	a
   05F2 18 04         [12] 1424 	jr	00153$
   05F4                    1425 00152$:
   05F4 DD CB F3 3E   [23] 1426 	srl	-13 (ix)
   05F8                    1427 00153$:
   05F8 3D            [ 4] 1428 	dec	a
   05F9 20 F9         [12] 1429 	jr	NZ, 00152$
                     05FB  1430 	C$main.c$281$2$178	= .
                           1431 	.globl	C$main.c$281$2$178
                           1432 ;main.c:281: drawbuf[(modified_tile << 3) + (y0 & 0x7)] |= bit;
   05FB DD 73 FC      [19] 1433 	ld	-4 (ix), e
   05FE DD 72 FD      [19] 1434 	ld	-3 (ix), d
   0601 3E 04         [ 7] 1435 	ld	a, #0x03+1
   0603 18 08         [12] 1436 	jr	00155$
   0605                    1437 00154$:
   0605 DD CB FC 26   [23] 1438 	sla	-4 (ix)
   0609 DD CB FD 16   [23] 1439 	rl	-3 (ix)
   060D                    1440 00155$:
   060D 3D            [ 4] 1441 	dec	a
   060E 20 F5         [12] 1442 	jr	NZ,00154$
   0610 DD 7E 06      [19] 1443 	ld	a, 6 (ix)
   0613 E6 07         [ 7] 1444 	and	a, #0x07
   0615 6F            [ 4] 1445 	ld	l, a
   0616 26 00         [ 7] 1446 	ld	h, #0x00
   0618 E5            [11] 1447 	push	hl
   0619 FD E1         [14] 1448 	pop	iy
   061B C5            [11] 1449 	push	bc
   061C DD 4E FC      [19] 1450 	ld	c,-4 (ix)
   061F DD 46 FD      [19] 1451 	ld	b,-3 (ix)
   0622 FD 09         [15] 1452 	add	iy, bc
   0624 ED 4Br15r00   [20] 1453 	ld	bc, (_drawbuf)
   0628 FD 09         [15] 1454 	add	iy, bc
   062A C1            [10] 1455 	pop	bc
   062B FD 7E 00      [19] 1456 	ld	a, 0 (iy)
   062E DD B6 F3      [19] 1457 	or	a, -13 (ix)
   0631 FD 77 00      [19] 1458 	ld	0 (iy), a
                     0634  1459 	C$main.c$283$2$178	= .
                           1460 	.globl	C$main.c$283$2$178
                           1461 ;main.c:283: if ((x0 == x1) && (y0 == y1))
   0634 DD 7E 04      [19] 1462 	ld	a, 4 (ix)
   0637 DD 96 08      [19] 1463 	sub	a, 8 (ix)
   063A 20 18         [12] 1464 	jr	NZ,00104$
   063C DD 7E 05      [19] 1465 	ld	a, 5 (ix)
   063F DD 96 09      [19] 1466 	sub	a, 9 (ix)
   0642 20 10         [12] 1467 	jr	NZ,00104$
   0644 DD 7E 06      [19] 1468 	ld	a, 6 (ix)
   0647 DD 96 0A      [19] 1469 	sub	a, 10 (ix)
   064A 20 08         [12] 1470 	jr	NZ,00158$
   064C DD 7E 07      [19] 1471 	ld	a, 7 (ix)
   064F DD 96 0B      [19] 1472 	sub	a, 11 (ix)
   0652 28 74         [12] 1473 	jr	Z,00112$
   0654                    1474 00158$:
                     0654  1475 	C$main.c$284$2$178	= .
                           1476 	.globl	C$main.c$284$2$178
                           1477 ;main.c:284: break;
   0654                    1478 00104$:
                     0654  1479 	C$main.c$285$2$178	= .
                           1480 	.globl	C$main.c$285$2$178
                           1481 ;main.c:285: e2 = err * 2;
   0654 DD 6E FA      [19] 1482 	ld	l,-6 (ix)
   0657 DD 66 FB      [19] 1483 	ld	h,-5 (ix)
   065A 29            [11] 1484 	add	hl, hl
                     065B  1485 	C$main.c$286$2$178	= .
                           1486 	.globl	C$main.c$286$2$178
                           1487 ;main.c:286: if (e2 >= dy)
   065B 7D            [ 4] 1488 	ld	a, l
   065C DD 96 F6      [19] 1489 	sub	a, -10 (ix)
   065F 7C            [ 4] 1490 	ld	a, h
   0660 DD 9E F7      [19] 1491 	sbc	a, -9 (ix)
   0663 E2r68r06      [10] 1492 	jp	PO, 00159$
   0666 EE 80         [ 7] 1493 	xor	a, #0x80
   0668                    1494 00159$:
   0668 FAr94r06      [10] 1495 	jp	M, 00107$
                     066B  1496 	C$main.c$288$3$180	= .
                           1497 	.globl	C$main.c$288$3$180
                           1498 ;main.c:288: err += dy;
   066B DD 7E FA      [19] 1499 	ld	a, -6 (ix)
   066E DD 86 F6      [19] 1500 	add	a, -10 (ix)
   0671 DD 77 FA      [19] 1501 	ld	-6 (ix), a
   0674 DD 7E FB      [19] 1502 	ld	a, -5 (ix)
   0677 DD 8E F7      [19] 1503 	adc	a, -9 (ix)
   067A DD 77 FB      [19] 1504 	ld	-5 (ix), a
                     067D  1505 	C$main.c$289$3$180	= .
                           1506 	.globl	C$main.c$289$3$180
                           1507 ;main.c:289: x0 += sx;
   067D DD 5E F9      [19] 1508 	ld	e, -7 (ix)
   0680 DD 7E F9      [19] 1509 	ld	a, -7 (ix)
   0683 17            [ 4] 1510 	rla
   0684 9F            [ 4] 1511 	sbc	a, a
   0685 57            [ 4] 1512 	ld	d, a
   0686 DD 7E 04      [19] 1513 	ld	a, 4 (ix)
   0689 83            [ 4] 1514 	add	a, e
   068A DD 77 04      [19] 1515 	ld	4 (ix), a
   068D DD 7E 05      [19] 1516 	ld	a, 5 (ix)
   0690 8A            [ 4] 1517 	adc	a, d
   0691 DD 77 05      [19] 1518 	ld	5 (ix), a
   0694                    1519 00107$:
                     0694  1520 	C$main.c$291$2$178	= .
                           1521 	.globl	C$main.c$291$2$178
                           1522 ;main.c:291: if (e2 <= dx)
   0694 79            [ 4] 1523 	ld	a, c
   0695 95            [ 4] 1524 	sub	a, l
   0696 78            [ 4] 1525 	ld	a, b
   0697 9C            [ 4] 1526 	sbc	a, h
   0698 E2r9Dr06      [10] 1527 	jp	PO, 00160$
   069B EE 80         [ 7] 1528 	xor	a, #0x80
   069D                    1529 00160$:
   069D FAr53r05      [10] 1530 	jp	M, 00111$
                     06A0  1531 	C$main.c$293$3$181	= .
                           1532 	.globl	C$main.c$293$3$181
                           1533 ;main.c:293: err += dx;
   06A0 DD 7E FA      [19] 1534 	ld	a, -6 (ix)
   06A3 81            [ 4] 1535 	add	a, c
   06A4 DD 77 FA      [19] 1536 	ld	-6 (ix), a
   06A7 DD 7E FB      [19] 1537 	ld	a, -5 (ix)
   06AA 88            [ 4] 1538 	adc	a, b
   06AB DD 77 FB      [19] 1539 	ld	-5 (ix), a
                     06AE  1540 	C$main.c$294$3$181	= .
                           1541 	.globl	C$main.c$294$3$181
                           1542 ;main.c:294: y0 += sy;
   06AE DD 5E F8      [19] 1543 	ld	e, -8 (ix)
   06B1 DD 7E F8      [19] 1544 	ld	a, -8 (ix)
   06B4 17            [ 4] 1545 	rla
   06B5 9F            [ 4] 1546 	sbc	a, a
   06B6 57            [ 4] 1547 	ld	d, a
   06B7 DD 7E 06      [19] 1548 	ld	a, 6 (ix)
   06BA 83            [ 4] 1549 	add	a, e
   06BB DD 77 06      [19] 1550 	ld	6 (ix), a
   06BE DD 7E 07      [19] 1551 	ld	a, 7 (ix)
   06C1 8A            [ 4] 1552 	adc	a, d
   06C2 DD 77 07      [19] 1553 	ld	7 (ix), a
   06C5 C3r53r05      [10] 1554 	jp	00111$
   06C8                    1555 00112$:
                     06C8  1556 	C$main.c$298$1$177	= .
                           1557 	.globl	C$main.c$298$1$177
                           1558 ;main.c:298: blitTile(drawbuf + (modified_tile << 3), DRAWAREA_FIRST_TID + modified_tile, 1);
   06C8 21 48 00      [10] 1559 	ld	hl, #0x0048
   06CB 19            [11] 1560 	add	hl, de
   06CC FD 2Ar15r00   [20] 1561 	ld	iy, (_drawbuf)
   06D0 DD 5E FC      [19] 1562 	ld	e,-4 (ix)
   06D3 DD 56 FD      [19] 1563 	ld	d,-3 (ix)
   06D6 FD 19         [15] 1564 	add	iy, de
   06D8 3E 01         [ 7] 1565 	ld	a, #0x01
   06DA F5            [11] 1566 	push	af
   06DB 33            [ 6] 1567 	inc	sp
   06DC E5            [11] 1568 	push	hl
   06DD FD E5         [15] 1569 	push	iy
   06DF CDr9Cr00      [17] 1570 	call	_blitTile
   06E2 DD F9         [10] 1571 	ld	sp,ix
   06E4 DD E1         [14] 1572 	pop	ix
                     06E6  1573 	C$main.c$299$1$177	= .
                           1574 	.globl	C$main.c$299$1$177
                     06E6  1575 	XFmain$drawLine$0$0	= .
                           1576 	.globl	XFmain$drawLine$0$0
   06E6 C9            [10] 1577 	ret
                     06E7  1578 	Fmain$drawLineSync$0$0	= .
                           1579 	.globl	Fmain$drawLineSync$0$0
                     06E7  1580 	C$main.c$301$1$177	= .
                           1581 	.globl	C$main.c$301$1$177
                           1582 ;main.c:301: static void drawLineSync(int x0, int y0, int x1, int y1)
                           1583 ;	---------------------------------
                           1584 ; Function drawLineSync
                           1585 ; ---------------------------------
   06E7                    1586 _drawLineSync:
   06E7 DD E5         [15] 1587 	push	ix
   06E9 DD 21 00 00   [14] 1588 	ld	ix,#0
   06ED DD 39         [15] 1589 	add	ix,sp
   06EF 21 F3 FF      [10] 1590 	ld	hl, #-13
   06F2 39            [11] 1591 	add	hl, sp
   06F3 F9            [ 6] 1592 	ld	sp, hl
                     06F4  1593 	C$main.c$303$1$183	= .
                           1594 	.globl	C$main.c$303$1$183
                           1595 ;main.c:303: int16_t dx = abs(x1 - x0);
   06F4 DD 7E 08      [19] 1596 	ld	a, 8 (ix)
   06F7 DD 96 04      [19] 1597 	sub	a, 4 (ix)
   06FA 4F            [ 4] 1598 	ld	c, a
   06FB DD 7E 09      [19] 1599 	ld	a, 9 (ix)
   06FE DD 9E 05      [19] 1600 	sbc	a, 5 (ix)
   0701 47            [ 4] 1601 	ld	b, a
   0702 C5            [11] 1602 	push	bc
   0703 CDr00r00      [17] 1603 	call	_abs
   0706 F1            [10] 1604 	pop	af
   0707 4D            [ 4] 1605 	ld	c, l
   0708 44            [ 4] 1606 	ld	b, h
                     0709  1607 	C$main.c$304$1$183	= .
                           1608 	.globl	C$main.c$304$1$183
                           1609 ;main.c:304: int16_t dy = -abs(y1 - y0);
   0709 DD 7E 0A      [19] 1610 	ld	a, 10 (ix)
   070C DD 96 06      [19] 1611 	sub	a, 6 (ix)
   070F 5F            [ 4] 1612 	ld	e, a
   0710 DD 7E 0B      [19] 1613 	ld	a, 11 (ix)
   0713 DD 9E 07      [19] 1614 	sbc	a, 7 (ix)
   0716 57            [ 4] 1615 	ld	d, a
   0717 D5            [11] 1616 	push	de
   0718 CDr00r00      [17] 1617 	call	_abs
   071B F1            [10] 1618 	pop	af
   071C AF            [ 4] 1619 	xor	a, a
   071D 95            [ 4] 1620 	sub	a, l
   071E 5F            [ 4] 1621 	ld	e, a
   071F 3E 00         [ 7] 1622 	ld	a, #0x00
   0721 9C            [ 4] 1623 	sbc	a, h
   0722 DD 73 F5      [19] 1624 	ld	-11 (ix), e
   0725 DD 77 F6      [19] 1625 	ld	-10 (ix), a
                     0728  1626 	C$main.c$305$1$183	= .
                           1627 	.globl	C$main.c$305$1$183
                           1628 ;main.c:305: int8_t sx = x0 < x1 ? 1 : -1;
   0728 DD 7E 04      [19] 1629 	ld	a, 4 (ix)
   072B DD 96 08      [19] 1630 	sub	a, 8 (ix)
   072E DD 7E 05      [19] 1631 	ld	a, 5 (ix)
   0731 DD 9E 09      [19] 1632 	sbc	a, 9 (ix)
   0734 E2r39r07      [10] 1633 	jp	PO, 00147$
   0737 EE 80         [ 7] 1634 	xor	a, #0x80
   0739                    1635 00147$:
   0739 F2r40r07      [10] 1636 	jp	P, 00115$
   073C 1E 01         [ 7] 1637 	ld	e, #0x01
   073E 18 02         [12] 1638 	jr	00116$
   0740                    1639 00115$:
   0740 1E FF         [ 7] 1640 	ld	e, #0xff
   0742                    1641 00116$:
   0742 DD 73 F4      [19] 1642 	ld	-12 (ix), e
                     0745  1643 	C$main.c$306$1$183	= .
                           1644 	.globl	C$main.c$306$1$183
                           1645 ;main.c:306: int8_t sy = y0 < y1 ? 1 : -1;
   0745 DD 7E 06      [19] 1646 	ld	a, 6 (ix)
   0748 DD 96 0A      [19] 1647 	sub	a, 10 (ix)
   074B DD 7E 07      [19] 1648 	ld	a, 7 (ix)
   074E DD 9E 0B      [19] 1649 	sbc	a, 11 (ix)
   0751 E2r56r07      [10] 1650 	jp	PO, 00148$
   0754 EE 80         [ 7] 1651 	xor	a, #0x80
   0756                    1652 00148$:
   0756 F2r5Dr07      [10] 1653 	jp	P, 00117$
   0759 1E 01         [ 7] 1654 	ld	e, #0x01
   075B 18 02         [12] 1655 	jr	00118$
   075D                    1656 00117$:
   075D 1E FF         [ 7] 1657 	ld	e, #0xff
   075F                    1658 00118$:
   075F DD 73 F3      [19] 1659 	ld	-13 (ix), e
                     0762  1660 	C$main.c$307$1$183	= .
                           1661 	.globl	C$main.c$307$1$183
                           1662 ;main.c:307: int err = dx + dy;
   0762 DD 6E F5      [19] 1663 	ld	l,-11 (ix)
   0765 DD 66 F6      [19] 1664 	ld	h,-10 (ix)
   0768 09            [11] 1665 	add	hl, bc
   0769 DD 75 F8      [19] 1666 	ld	-8 (ix), l
   076C DD 74 F9      [19] 1667 	ld	-7 (ix), h
                     076F  1668 	C$main.c$312$1$183	= .
                           1669 	.globl	C$main.c$312$1$183
                           1670 ;main.c:312: modified_tile = (x0 >> 3) + (y0 >> 3) * DRAWAREA_TILES_W;
   076F DD 5E 04      [19] 1671 	ld	e,4 (ix)
   0772 DD 56 05      [19] 1672 	ld	d,5 (ix)
   0775 CB 2A         [ 8] 1673 	sra	d
   0777 CB 1B         [ 8] 1674 	rr	e
   0779 CB 2A         [ 8] 1675 	sra	d
   077B CB 1B         [ 8] 1676 	rr	e
   077D CB 2A         [ 8] 1677 	sra	d
   077F CB 1B         [ 8] 1678 	rr	e
   0781 DD 6E 06      [19] 1679 	ld	l,6 (ix)
   0784 DD 66 07      [19] 1680 	ld	h,7 (ix)
   0787 CB 2C         [ 8] 1681 	sra	h
   0789 CB 1D         [ 8] 1682 	rr	l
   078B CB 2C         [ 8] 1683 	sra	h
   078D CB 1D         [ 8] 1684 	rr	l
   078F CB 2C         [ 8] 1685 	sra	h
   0791 CB 1D         [ 8] 1686 	rr	l
   0793 D5            [11] 1687 	push	de
   0794 5D            [ 4] 1688 	ld	e, l
   0795 54            [ 4] 1689 	ld	d, h
   0796 29            [11] 1690 	add	hl, hl
   0797 19            [11] 1691 	add	hl, de
   0798 29            [11] 1692 	add	hl, hl
   0799 29            [11] 1693 	add	hl, hl
   079A 29            [11] 1694 	add	hl, hl
   079B D1            [10] 1695 	pop	de
   079C 19            [11] 1696 	add	hl, de
   079D DD 75 FA      [19] 1697 	ld	-6 (ix), l
   07A0 DD 74 FB      [19] 1698 	ld	-5 (ix), h
                     07A3  1699 	C$main.c$314$1$183	= .
                           1700 	.globl	C$main.c$314$1$183
                           1701 ;main.c:314: while (1)
   07A3                    1702 00111$:
                     07A3  1703 	C$main.c$317$2$184	= .
                           1704 	.globl	C$main.c$317$2$184
                           1705 ;main.c:317: next_tile = (x0 >> 3) + (y0 >> 3) * DRAWAREA_TILES_W;
   07A3 DD 5E 04      [19] 1706 	ld	e,4 (ix)
   07A6 DD 56 05      [19] 1707 	ld	d,5 (ix)
   07A9 CB 2A         [ 8] 1708 	sra	d
   07AB CB 1B         [ 8] 1709 	rr	e
   07AD CB 2A         [ 8] 1710 	sra	d
   07AF CB 1B         [ 8] 1711 	rr	e
   07B1 CB 2A         [ 8] 1712 	sra	d
   07B3 CB 1B         [ 8] 1713 	rr	e
   07B5 DD 6E 06      [19] 1714 	ld	l,6 (ix)
   07B8 DD 66 07      [19] 1715 	ld	h,7 (ix)
   07BB CB 2C         [ 8] 1716 	sra	h
   07BD CB 1D         [ 8] 1717 	rr	l
   07BF CB 2C         [ 8] 1718 	sra	h
   07C1 CB 1D         [ 8] 1719 	rr	l
   07C3 CB 2C         [ 8] 1720 	sra	h
   07C5 CB 1D         [ 8] 1721 	rr	l
   07C7 D5            [11] 1722 	push	de
   07C8 5D            [ 4] 1723 	ld	e, l
   07C9 54            [ 4] 1724 	ld	d, h
   07CA 29            [11] 1725 	add	hl, hl
   07CB 19            [11] 1726 	add	hl, de
   07CC 29            [11] 1727 	add	hl, hl
   07CD 29            [11] 1728 	add	hl, hl
   07CE 29            [11] 1729 	add	hl, hl
   07CF D1            [10] 1730 	pop	de
   07D0 19            [11] 1731 	add	hl,de
   07D1 5D            [ 4] 1732 	ld	e, l
   07D2 54            [ 4] 1733 	ld	d, h
                     07D3  1734 	C$main.c$318$2$184	= .
                           1735 	.globl	C$main.c$318$2$184
                           1736 ;main.c:318: if (modified_tile != next_tile)
   07D3 DD 7E FA      [19] 1737 	ld	a, -6 (ix)
   07D6 93            [ 4] 1738 	sub	a, e
   07D7 20 06         [12] 1739 	jr	NZ,00149$
   07D9 DD 7E FB      [19] 1740 	ld	a, -5 (ix)
   07DC 92            [ 4] 1741 	sub	a, d
   07DD 28 56         [12] 1742 	jr	Z,00102$
   07DF                    1743 00149$:
                     07DF  1744 	C$main.c$320$3$185	= .
                           1745 	.globl	C$main.c$320$3$185
                           1746 ;main.c:320: blitTile(drawbuf + (modified_tile << 3), DRAWAREA_FIRST_TID + modified_tile, 1);
   07DF DD 7E FA      [19] 1747 	ld	a, -6 (ix)
   07E2 C6 48         [ 7] 1748 	add	a, #0x48
   07E4 DD 77 FC      [19] 1749 	ld	-4 (ix), a
   07E7 DD 7E FB      [19] 1750 	ld	a, -5 (ix)
   07EA CE 00         [ 7] 1751 	adc	a, #0x00
   07EC DD 77 FD      [19] 1752 	ld	-3 (ix), a
   07EF DD 7E FA      [19] 1753 	ld	a, -6 (ix)
   07F2 DD 77 FE      [19] 1754 	ld	-2 (ix), a
   07F5 DD 7E FB      [19] 1755 	ld	a, -5 (ix)
   07F8 DD 77 FF      [19] 1756 	ld	-1 (ix), a
   07FB 3E 04         [ 7] 1757 	ld	a, #0x03+1
   07FD 18 08         [12] 1758 	jr	00151$
   07FF                    1759 00150$:
   07FF DD CB FE 26   [23] 1760 	sla	-2 (ix)
   0803 DD CB FF 16   [23] 1761 	rl	-1 (ix)
   0807                    1762 00151$:
   0807 3D            [ 4] 1763 	dec	a
   0808 20 F5         [12] 1764 	jr	NZ,00150$
   080A E5            [11] 1765 	push	hl
   080B DD 6E FE      [19] 1766 	ld	l, -2 (ix)
   080E DD 66 FF      [19] 1767 	ld	h, -1 (ix)
   0811 E5            [11] 1768 	push	hl
   0812 FD E1         [14] 1769 	pop	iy
   0814 E1            [10] 1770 	pop	hl
   0815 C5            [11] 1771 	push	bc
   0816 ED 4Br15r00   [20] 1772 	ld	bc, (_drawbuf)
   081A FD 09         [15] 1773 	add	iy, bc
   081C D5            [11] 1774 	push	de
   081D 3E 01         [ 7] 1775 	ld	a, #0x01
   081F F5            [11] 1776 	push	af
   0820 33            [ 6] 1777 	inc	sp
   0821 DD 6E FC      [19] 1778 	ld	l,-4 (ix)
   0824 DD 66 FD      [19] 1779 	ld	h,-3 (ix)
   0827 E5            [11] 1780 	push	hl
   0828 FD E5         [15] 1781 	push	iy
   082A CDr9Cr00      [17] 1782 	call	_blitTile
   082D F1            [10] 1783 	pop	af
   082E F1            [10] 1784 	pop	af
   082F 33            [ 6] 1785 	inc	sp
   0830 CDr82r00      [17] 1786 	call	_vsync_keycheck
   0833 D1            [10] 1787 	pop	de
   0834 C1            [10] 1788 	pop	bc
   0835                    1789 00102$:
                     0835  1790 	C$main.c$324$2$184	= .
                           1791 	.globl	C$main.c$324$2$184
                           1792 ;main.c:324: modified_tile = next_tile;
   0835 DD 73 FA      [19] 1793 	ld	-6 (ix), e
   0838 DD 72 FB      [19] 1794 	ld	-5 (ix), d
                     083B  1795 	C$main.c$326$1$183	= .
                           1796 	.globl	C$main.c$326$1$183
                           1797 ;main.c:326: bit = 0x80 >> (x0 & 7);
   083B DD 7E 04      [19] 1798 	ld	a, 4 (ix)
   083E E6 07         [ 7] 1799 	and	a, #0x07
   0840 DD 36 F7 80   [19] 1800 	ld	-9 (ix), #0x80
   0844 3C            [ 4] 1801 	inc	a
   0845 18 04         [12] 1802 	jr	00153$
   0847                    1803 00152$:
   0847 DD CB F7 3E   [23] 1804 	srl	-9 (ix)
   084B                    1805 00153$:
   084B 3D            [ 4] 1806 	dec	a
   084C 20 F9         [12] 1807 	jr	NZ, 00152$
                     084E  1808 	C$main.c$327$2$184	= .
                           1809 	.globl	C$main.c$327$2$184
                           1810 ;main.c:327: drawbuf[(modified_tile << 3) + (y0 & 0x7)] |= bit;
   084E DD 73 FE      [19] 1811 	ld	-2 (ix), e
   0851 DD 72 FF      [19] 1812 	ld	-1 (ix), d
   0854 3E 04         [ 7] 1813 	ld	a, #0x03+1
   0856 18 08         [12] 1814 	jr	00155$
   0858                    1815 00154$:
   0858 DD CB FE 26   [23] 1816 	sla	-2 (ix)
   085C DD CB FF 16   [23] 1817 	rl	-1 (ix)
   0860                    1818 00155$:
   0860 3D            [ 4] 1819 	dec	a
   0861 20 F5         [12] 1820 	jr	NZ,00154$
   0863 DD 7E 06      [19] 1821 	ld	a, 6 (ix)
   0866 E6 07         [ 7] 1822 	and	a, #0x07
   0868 6F            [ 4] 1823 	ld	l, a
   0869 26 00         [ 7] 1824 	ld	h, #0x00
   086B E5            [11] 1825 	push	hl
   086C FD E1         [14] 1826 	pop	iy
   086E C5            [11] 1827 	push	bc
   086F DD 4E FE      [19] 1828 	ld	c,-2 (ix)
   0872 DD 46 FF      [19] 1829 	ld	b,-1 (ix)
   0875 FD 09         [15] 1830 	add	iy, bc
   0877 ED 4Br15r00   [20] 1831 	ld	bc, (_drawbuf)
   087B FD 09         [15] 1832 	add	iy, bc
   087D C1            [10] 1833 	pop	bc
   087E FD 7E 00      [19] 1834 	ld	a, 0 (iy)
   0881 DD B6 F7      [19] 1835 	or	a, -9 (ix)
   0884 FD 77 00      [19] 1836 	ld	0 (iy), a
                     0887  1837 	C$main.c$329$2$184	= .
                           1838 	.globl	C$main.c$329$2$184
                           1839 ;main.c:329: if ((x0 == x1) && (y0 == y1))
   0887 DD 7E 04      [19] 1840 	ld	a, 4 (ix)
   088A DD 96 08      [19] 1841 	sub	a, 8 (ix)
   088D 20 18         [12] 1842 	jr	NZ,00104$
   088F DD 7E 05      [19] 1843 	ld	a, 5 (ix)
   0892 DD 96 09      [19] 1844 	sub	a, 9 (ix)
   0895 20 10         [12] 1845 	jr	NZ,00104$
   0897 DD 7E 06      [19] 1846 	ld	a, 6 (ix)
   089A DD 96 0A      [19] 1847 	sub	a, 10 (ix)
   089D 20 08         [12] 1848 	jr	NZ,00158$
   089F DD 7E 07      [19] 1849 	ld	a, 7 (ix)
   08A2 DD 96 0B      [19] 1850 	sub	a, 11 (ix)
   08A5 28 74         [12] 1851 	jr	Z,00112$
   08A7                    1852 00158$:
                     08A7  1853 	C$main.c$330$2$184	= .
                           1854 	.globl	C$main.c$330$2$184
                           1855 ;main.c:330: break;
   08A7                    1856 00104$:
                     08A7  1857 	C$main.c$331$2$184	= .
                           1858 	.globl	C$main.c$331$2$184
                           1859 ;main.c:331: e2 = err * 2;
   08A7 DD 6E F8      [19] 1860 	ld	l,-8 (ix)
   08AA DD 66 F9      [19] 1861 	ld	h,-7 (ix)
   08AD 29            [11] 1862 	add	hl, hl
                     08AE  1863 	C$main.c$332$2$184	= .
                           1864 	.globl	C$main.c$332$2$184
                           1865 ;main.c:332: if (e2 >= dy)
   08AE 7D            [ 4] 1866 	ld	a, l
   08AF DD 96 F5      [19] 1867 	sub	a, -11 (ix)
   08B2 7C            [ 4] 1868 	ld	a, h
   08B3 DD 9E F6      [19] 1869 	sbc	a, -10 (ix)
   08B6 E2rBBr08      [10] 1870 	jp	PO, 00159$
   08B9 EE 80         [ 7] 1871 	xor	a, #0x80
   08BB                    1872 00159$:
   08BB FArE7r08      [10] 1873 	jp	M, 00107$
                     08BE  1874 	C$main.c$334$3$186	= .
                           1875 	.globl	C$main.c$334$3$186
                           1876 ;main.c:334: err += dy;
   08BE DD 7E F8      [19] 1877 	ld	a, -8 (ix)
   08C1 DD 86 F5      [19] 1878 	add	a, -11 (ix)
   08C4 DD 77 F8      [19] 1879 	ld	-8 (ix), a
   08C7 DD 7E F9      [19] 1880 	ld	a, -7 (ix)
   08CA DD 8E F6      [19] 1881 	adc	a, -10 (ix)
   08CD DD 77 F9      [19] 1882 	ld	-7 (ix), a
                     08D0  1883 	C$main.c$335$3$186	= .
                           1884 	.globl	C$main.c$335$3$186
                           1885 ;main.c:335: x0 += sx;
   08D0 DD 5E F4      [19] 1886 	ld	e, -12 (ix)
   08D3 DD 7E F4      [19] 1887 	ld	a, -12 (ix)
   08D6 17            [ 4] 1888 	rla
   08D7 9F            [ 4] 1889 	sbc	a, a
   08D8 57            [ 4] 1890 	ld	d, a
   08D9 DD 7E 04      [19] 1891 	ld	a, 4 (ix)
   08DC 83            [ 4] 1892 	add	a, e
   08DD DD 77 04      [19] 1893 	ld	4 (ix), a
   08E0 DD 7E 05      [19] 1894 	ld	a, 5 (ix)
   08E3 8A            [ 4] 1895 	adc	a, d
   08E4 DD 77 05      [19] 1896 	ld	5 (ix), a
   08E7                    1897 00107$:
                     08E7  1898 	C$main.c$337$2$184	= .
                           1899 	.globl	C$main.c$337$2$184
                           1900 ;main.c:337: if (e2 <= dx)
   08E7 79            [ 4] 1901 	ld	a, c
   08E8 95            [ 4] 1902 	sub	a, l
   08E9 78            [ 4] 1903 	ld	a, b
   08EA 9C            [ 4] 1904 	sbc	a, h
   08EB E2rF0r08      [10] 1905 	jp	PO, 00160$
   08EE EE 80         [ 7] 1906 	xor	a, #0x80
   08F0                    1907 00160$:
   08F0 FArA3r07      [10] 1908 	jp	M, 00111$
                     08F3  1909 	C$main.c$339$3$187	= .
                           1910 	.globl	C$main.c$339$3$187
                           1911 ;main.c:339: err += dx;
   08F3 DD 7E F8      [19] 1912 	ld	a, -8 (ix)
   08F6 81            [ 4] 1913 	add	a, c
   08F7 DD 77 F8      [19] 1914 	ld	-8 (ix), a
   08FA DD 7E F9      [19] 1915 	ld	a, -7 (ix)
   08FD 88            [ 4] 1916 	adc	a, b
   08FE DD 77 F9      [19] 1917 	ld	-7 (ix), a
                     0901  1918 	C$main.c$340$3$187	= .
                           1919 	.globl	C$main.c$340$3$187
                           1920 ;main.c:340: y0 += sy;
   0901 DD 5E F3      [19] 1921 	ld	e, -13 (ix)
   0904 DD 7E F3      [19] 1922 	ld	a, -13 (ix)
   0907 17            [ 4] 1923 	rla
   0908 9F            [ 4] 1924 	sbc	a, a
   0909 57            [ 4] 1925 	ld	d, a
   090A DD 7E 06      [19] 1926 	ld	a, 6 (ix)
   090D 83            [ 4] 1927 	add	a, e
   090E DD 77 06      [19] 1928 	ld	6 (ix), a
   0911 DD 7E 07      [19] 1929 	ld	a, 7 (ix)
   0914 8A            [ 4] 1930 	adc	a, d
   0915 DD 77 07      [19] 1931 	ld	7 (ix), a
   0918 C3rA3r07      [10] 1932 	jp	00111$
   091B                    1933 00112$:
                     091B  1934 	C$main.c$344$1$183	= .
                           1935 	.globl	C$main.c$344$1$183
                           1936 ;main.c:344: blitTile(drawbuf + (modified_tile << 3), DRAWAREA_FIRST_TID + modified_tile, 1);
   091B 21 48 00      [10] 1937 	ld	hl, #0x0048
   091E 19            [11] 1938 	add	hl, de
   091F FD 2Ar15r00   [20] 1939 	ld	iy, (_drawbuf)
   0923 DD 5E FE      [19] 1940 	ld	e,-2 (ix)
   0926 DD 56 FF      [19] 1941 	ld	d,-1 (ix)
   0929 FD 19         [15] 1942 	add	iy, de
   092B 3E 01         [ 7] 1943 	ld	a, #0x01
   092D F5            [11] 1944 	push	af
   092E 33            [ 6] 1945 	inc	sp
   092F E5            [11] 1946 	push	hl
   0930 FD E5         [15] 1947 	push	iy
   0932 CDr9Cr00      [17] 1948 	call	_blitTile
   0935 F1            [10] 1949 	pop	af
   0936 F1            [10] 1950 	pop	af
   0937 33            [ 6] 1951 	inc	sp
                     0938  1952 	C$main.c$345$1$183	= .
                           1953 	.globl	C$main.c$345$1$183
                           1954 ;main.c:345: vsync_keycheck();
   0938 CDr82r00      [17] 1955 	call	_vsync_keycheck
   093B DD F9         [10] 1956 	ld	sp, ix
   093D DD E1         [14] 1957 	pop	ix
                     093F  1958 	C$main.c$346$1$183	= .
                           1959 	.globl	C$main.c$346$1$183
                     093F  1960 	XFmain$drawLineSync$0$0	= .
                           1961 	.globl	XFmain$drawLineSync$0$0
   093F C9            [10] 1962 	ret
                     0940  1963 	G$updateDisplay$0$0	= .
                           1964 	.globl	G$updateDisplay$0$0
                     0940  1965 	C$main.c$348$1$183	= .
                           1966 	.globl	C$main.c$348$1$183
                           1967 ;main.c:348: void updateDisplay(int new_x, int new_y, int old_x, int old_y, uint8_t s)
                           1968 ;	---------------------------------
                           1969 ; Function updateDisplay
                           1970 ; ---------------------------------
   0940                    1971 _updateDisplay::
   0940 DD E5         [15] 1972 	push	ix
   0942 DD 21 00 00   [14] 1973 	ld	ix,#0
   0946 DD 39         [15] 1974 	add	ix,sp
                     0948  1975 	C$main.c$353$1$189	= .
                           1976 	.globl	C$main.c$353$1$189
                           1977 ;main.c:353: if (drawing)
   0948 3Ar00r00      [13] 1978 	ld	a,(#_drawing + 0)
   094B B7            [ 4] 1979 	or	a, a
   094C 28 0C         [12] 1980 	jr	Z,00102$
                     094E  1981 	C$main.c$355$2$190	= .
                           1982 	.globl	C$main.c$355$2$190
                           1983 ;main.c:355: SMS_hideSprite(spriteIds[POINTER_SID]);
   094E 21r00r00      [10] 1984 	ld	hl, #_spriteIds+0
   0951 46            [ 7] 1985 	ld	b, (hl)
   0952 C5            [11] 1986 	push	bc
   0953 33            [ 6] 1987 	inc	sp
   0954 CDr00r00      [17] 1988 	call	_SMS_hideSprite
   0957 33            [ 6] 1989 	inc	sp
   0958 18 19         [12] 1990 	jr	00103$
   095A                    1991 00102$:
                     095A  1992 	C$main.c$359$2$191	= .
                           1993 	.globl	C$main.c$359$2$191
                           1994 ;main.c:359: SMS_updateSpritePosition(spriteIds[POINTER_SID], new_x + DRAWAREA_X * 8, new_y + DRAWAREA_Y * 8);
   095A DD 7E 06      [19] 1995 	ld	a, 6 (ix)
   095D C6 20         [ 7] 1996 	add	a, #0x20
   095F 57            [ 4] 1997 	ld	d, a
   0960 DD 7E 04      [19] 1998 	ld	a, 4 (ix)
   0963 C6 20         [ 7] 1999 	add	a, #0x20
   0965 4F            [ 4] 2000 	ld	c, a
   0966 21r00r00      [10] 2001 	ld	hl, #_spriteIds+0
   0969 46            [ 7] 2002 	ld	b, (hl)
   096A 59            [ 4] 2003 	ld	e, c
   096B D5            [11] 2004 	push	de
   096C C5            [11] 2005 	push	bc
   096D 33            [ 6] 2006 	inc	sp
   096E CDr00r00      [17] 2007 	call	_SMS_updateSpritePosition
   0971 F1            [10] 2008 	pop	af
   0972 33            [ 6] 2009 	inc	sp
   0973                    2010 00103$:
                     0973  2011 	C$main.c$362$1$189	= .
                           2012 	.globl	C$main.c$362$1$189
                           2013 ;main.c:362: if (drawing)
   0973 3Ar00r00      [13] 2014 	ld	a,(#_drawing + 0)
   0976 B7            [ 4] 2015 	or	a, a
   0977 28 6F         [12] 2016 	jr	Z,00111$
                     0979  2017 	C$main.c$364$2$192	= .
                           2018 	.globl	C$main.c$364$2$192
                           2019 ;main.c:364: putPixel(new_x, new_y);
   0979 DD 6E 06      [19] 2020 	ld	l,6 (ix)
   097C DD 66 07      [19] 2021 	ld	h,7 (ix)
   097F E5            [11] 2022 	push	hl
   0980 DD 6E 04      [19] 2023 	ld	l,4 (ix)
   0983 DD 66 05      [19] 2024 	ld	h,5 (ix)
   0986 E5            [11] 2025 	push	hl
   0987 CDr00r04      [17] 2026 	call	_putPixel
   098A F1            [10] 2027 	pop	af
   098B F1            [10] 2028 	pop	af
                     098C  2029 	C$main.c$367$2$192	= .
                           2030 	.globl	C$main.c$367$2$192
                           2031 ;main.c:367: if (paddle_mode || fill_mode)
   098C 3Ar01r00      [13] 2032 	ld	a,(#_paddle_mode + 0)
   098F B7            [ 4] 2033 	or	a, a
   0990 20 06         [12] 2034 	jr	NZ,00107$
   0992 3Ar02r00      [13] 2035 	ld	a,(#_fill_mode + 0)
   0995 B7            [ 4] 2036 	or	a, a
   0996 28 50         [12] 2037 	jr	Z,00111$
   0998                    2038 00107$:
                     0998  2039 	C$main.c$369$3$193	= .
                           2040 	.globl	C$main.c$369$3$193
                           2041 ;main.c:369: if (!s)
   0998 DD 7E 0C      [19] 2042 	ld	a, 12 (ix)
   099B B7            [ 4] 2043 	or	a, a
   099C 20 26         [12] 2044 	jr	NZ,00105$
                     099E  2045 	C$main.c$371$4$194	= .
                           2046 	.globl	C$main.c$371$4$194
                           2047 ;main.c:371: drawLine(new_x, new_y, old_x, old_y);
   099E DD 6E 0A      [19] 2048 	ld	l,10 (ix)
   09A1 DD 66 0B      [19] 2049 	ld	h,11 (ix)
   09A4 E5            [11] 2050 	push	hl
   09A5 DD 6E 08      [19] 2051 	ld	l,8 (ix)
   09A8 DD 66 09      [19] 2052 	ld	h,9 (ix)
   09AB E5            [11] 2053 	push	hl
   09AC DD 6E 06      [19] 2054 	ld	l,6 (ix)
   09AF DD 66 07      [19] 2055 	ld	h,7 (ix)
   09B2 E5            [11] 2056 	push	hl
   09B3 DD 6E 04      [19] 2057 	ld	l,4 (ix)
   09B6 DD 66 05      [19] 2058 	ld	h,5 (ix)
   09B9 E5            [11] 2059 	push	hl
   09BA CDr97r04      [17] 2060 	call	_drawLine
   09BD 21 08 00      [10] 2061 	ld	hl, #8
   09C0 39            [11] 2062 	add	hl, sp
   09C1 F9            [ 6] 2063 	ld	sp, hl
   09C2 18 24         [12] 2064 	jr	00111$
   09C4                    2065 00105$:
                     09C4  2066 	C$main.c$375$4$195	= .
                           2067 	.globl	C$main.c$375$4$195
                           2068 ;main.c:375: drawLineSync(new_x, new_y, old_x, old_y);
   09C4 DD 6E 0A      [19] 2069 	ld	l,10 (ix)
   09C7 DD 66 0B      [19] 2070 	ld	h,11 (ix)
   09CA E5            [11] 2071 	push	hl
   09CB DD 6E 08      [19] 2072 	ld	l,8 (ix)
   09CE DD 66 09      [19] 2073 	ld	h,9 (ix)
   09D1 E5            [11] 2074 	push	hl
   09D2 DD 6E 06      [19] 2075 	ld	l,6 (ix)
   09D5 DD 66 07      [19] 2076 	ld	h,7 (ix)
   09D8 E5            [11] 2077 	push	hl
   09D9 DD 6E 04      [19] 2078 	ld	l,4 (ix)
   09DC DD 66 05      [19] 2079 	ld	h,5 (ix)
   09DF E5            [11] 2080 	push	hl
   09E0 CDrE7r06      [17] 2081 	call	_drawLineSync
   09E3 21 08 00      [10] 2082 	ld	hl, #8
   09E6 39            [11] 2083 	add	hl, sp
   09E7 F9            [ 6] 2084 	ld	sp, hl
   09E8                    2085 00111$:
                     09E8  2086 	C$main.c$381$1$189	= .
                           2087 	.globl	C$main.c$381$1$189
                           2088 ;main.c:381: spriteX[LK_SID] = LEFT_KNOB_X;
   09E8 21r08r00      [10] 2089 	ld	hl, #(_spriteX + 0x0001)
   09EB 36 17         [10] 2090 	ld	(hl), #0x17
                     09ED  2091 	C$main.c$382$1$189	= .
                           2092 	.globl	C$main.c$382$1$189
                           2093 ;main.c:382: spriteY[LK_SID] = LEFT_KNOB_Y;
   09ED 21r0Fr00      [10] 2094 	ld	hl, #_spriteY + 1
   09F0 36 A7         [10] 2095 	ld	(hl), #0xa7
                     09F2  2096 	C$main.c$383$1$189	= .
                           2097 	.globl	C$main.c$383$1$189
                           2098 ;main.c:383: addRotatedXY(new_x, &spriteX[LK_SID], &spriteY[LK_SID]);
   09F2 4D            [ 4] 2099 	ld	c, l
   09F3 44            [ 4] 2100 	ld	b, h
   09F4 DD 56 04      [19] 2101 	ld	d, 4 (ix)
   09F7 E5            [11] 2102 	push	hl
   09F8 C5            [11] 2103 	push	bc
   09F9 01r08r00      [10] 2104 	ld	bc, #(_spriteX + 0x0001)
   09FC C5            [11] 2105 	push	bc
   09FD D5            [11] 2106 	push	de
   09FE 33            [ 6] 2107 	inc	sp
   09FF CDr00r00      [17] 2108 	call	_addRotatedXY
   0A02 F1            [10] 2109 	pop	af
   0A03 F1            [10] 2110 	pop	af
   0A04 33            [ 6] 2111 	inc	sp
   0A05 E1            [10] 2112 	pop	hl
                     0A06  2113 	C$main.c$384$1$189	= .
                           2114 	.globl	C$main.c$384$1$189
                           2115 ;main.c:384: SMS_updateSpritePosition(spriteIds[LK_SID], spriteX[LK_SID], spriteY[LK_SID]);
   0A06 4E            [ 7] 2116 	ld	c, (hl)
   0A07 21r08r00      [10] 2117 	ld	hl, #(_spriteX + 0x0001) + 0
   0A0A 46            [ 7] 2118 	ld	b, (hl)
   0A0B 21r01r00      [10] 2119 	ld	hl, #_spriteIds + 1
   0A0E 5E            [ 7] 2120 	ld	e, (hl)
   0A0F 79            [ 4] 2121 	ld	a, c
   0A10 F5            [11] 2122 	push	af
   0A11 33            [ 6] 2123 	inc	sp
   0A12 C5            [11] 2124 	push	bc
   0A13 33            [ 6] 2125 	inc	sp
   0A14 7B            [ 4] 2126 	ld	a, e
   0A15 F5            [11] 2127 	push	af
   0A16 33            [ 6] 2128 	inc	sp
   0A17 CDr00r00      [17] 2129 	call	_SMS_updateSpritePosition
   0A1A F1            [10] 2130 	pop	af
   0A1B 33            [ 6] 2131 	inc	sp
                     0A1C  2132 	C$main.c$386$1$189	= .
                           2133 	.globl	C$main.c$386$1$189
                           2134 ;main.c:386: spriteX[RK_SID] = RIGHT_KNOB_X;
   0A1C 21r09r00      [10] 2135 	ld	hl, #(_spriteX + 0x0002)
   0A1F 36 E7         [10] 2136 	ld	(hl), #0xe7
                     0A21  2137 	C$main.c$387$1$189	= .
                           2138 	.globl	C$main.c$387$1$189
                           2139 ;main.c:387: spriteY[RK_SID] = RIGHT_KNOB_Y;
   0A21 21r10r00      [10] 2140 	ld	hl, #(_spriteY + 0x0002)
   0A24 36 A7         [10] 2141 	ld	(hl), #0xa7
                     0A26  2142 	C$main.c$388$1$189	= .
                           2143 	.globl	C$main.c$388$1$189
                           2144 ;main.c:388: addRotatedXY(new_y, &spriteX[RK_SID], &spriteY[RK_SID]);
   0A26 01r09r00      [10] 2145 	ld	bc, #(_spriteX + 0x0002)
   0A29 DD 56 06      [19] 2146 	ld	d, 6 (ix)
   0A2C E5            [11] 2147 	push	hl
   0A2D C5            [11] 2148 	push	bc
   0A2E D5            [11] 2149 	push	de
   0A2F 33            [ 6] 2150 	inc	sp
   0A30 CDr00r00      [17] 2151 	call	_addRotatedXY
   0A33 F1            [10] 2152 	pop	af
   0A34 F1            [10] 2153 	pop	af
   0A35 33            [ 6] 2154 	inc	sp
                     0A36  2155 	C$main.c$389$1$189	= .
                           2156 	.globl	C$main.c$389$1$189
                           2157 ;main.c:389: SMS_updateSpritePosition(spriteIds[RK_SID], spriteX[RK_SID], spriteY[RK_SID]);
   0A36 21r10r00      [10] 2158 	ld	hl, #(_spriteY + 0x0002) + 0
   0A39 4E            [ 7] 2159 	ld	c, (hl)
   0A3A 21r09r00      [10] 2160 	ld	hl, #(_spriteX + 0x0002) + 0
   0A3D 46            [ 7] 2161 	ld	b, (hl)
   0A3E 21r02r00      [10] 2162 	ld	hl, #_spriteIds + 2
   0A41 5E            [ 7] 2163 	ld	e, (hl)
   0A42 79            [ 4] 2164 	ld	a, c
   0A43 F5            [11] 2165 	push	af
   0A44 33            [ 6] 2166 	inc	sp
   0A45 C5            [11] 2167 	push	bc
   0A46 33            [ 6] 2168 	inc	sp
   0A47 7B            [ 4] 2169 	ld	a, e
   0A48 F5            [11] 2170 	push	af
   0A49 33            [ 6] 2171 	inc	sp
   0A4A CDr00r00      [17] 2172 	call	_SMS_updateSpritePosition
   0A4D F1            [10] 2173 	pop	af
   0A4E 33            [ 6] 2174 	inc	sp
   0A4F DD E1         [14] 2175 	pop	ix
                     0A51  2176 	C$main.c$390$1$189	= .
                           2177 	.globl	C$main.c$390$1$189
                     0A51  2178 	XG$updateDisplay$0$0	= .
                           2179 	.globl	XG$updateDisplay$0$0
   0A51 C9            [10] 2180 	ret
                     0A52  2181 	G$stepIt$0$0	= .
                           2182 	.globl	G$stepIt$0$0
                     0A52  2183 	C$main.c$411$1$189	= .
                           2184 	.globl	C$main.c$411$1$189
                           2185 ;main.c:411: void stepIt(int *val, int *inc, int max)
                           2186 ;	---------------------------------
                           2187 ; Function stepIt
                           2188 ; ---------------------------------
   0A52                    2189 _stepIt::
   0A52 DD E5         [15] 2190 	push	ix
   0A54 DD 21 00 00   [14] 2191 	ld	ix,#0
   0A58 DD 39         [15] 2192 	add	ix,sp
   0A5A F5            [11] 2193 	push	af
                     0A5B  2194 	C$main.c$413$1$198	= .
                           2195 	.globl	C$main.c$413$1$198
                           2196 ;main.c:413: *val += *inc;
   0A5B DD 4E 04      [19] 2197 	ld	c,4 (ix)
   0A5E DD 46 05      [19] 2198 	ld	b,5 (ix)
   0A61 69            [ 4] 2199 	ld	l, c
   0A62 60            [ 4] 2200 	ld	h, b
   0A63 5E            [ 7] 2201 	ld	e, (hl)
   0A64 23            [ 6] 2202 	inc	hl
   0A65 56            [ 7] 2203 	ld	d, (hl)
   0A66 DD 7E 06      [19] 2204 	ld	a, 6 (ix)
   0A69 DD 77 FE      [19] 2205 	ld	-2 (ix), a
   0A6C DD 7E 07      [19] 2206 	ld	a, 7 (ix)
   0A6F DD 77 FF      [19] 2207 	ld	-1 (ix), a
   0A72 E1            [10] 2208 	pop	hl
   0A73 E5            [11] 2209 	push	hl
   0A74 7E            [ 7] 2210 	ld	a, (hl)
   0A75 23            [ 6] 2211 	inc	hl
   0A76 66            [ 7] 2212 	ld	h, (hl)
   0A77 6F            [ 4] 2213 	ld	l, a
   0A78 19            [11] 2214 	add	hl,de
   0A79 EB            [ 4] 2215 	ex	de,hl
   0A7A 69            [ 4] 2216 	ld	l, c
   0A7B 60            [ 4] 2217 	ld	h, b
   0A7C 73            [ 7] 2218 	ld	(hl), e
   0A7D 23            [ 6] 2219 	inc	hl
   0A7E 72            [ 7] 2220 	ld	(hl), d
                     0A7F  2221 	C$main.c$414$1$198	= .
                           2222 	.globl	C$main.c$414$1$198
                           2223 ;main.c:414: if (*val < 0)
   0A7F CB 7A         [ 8] 2224 	bit	7, d
   0A81 28 22         [12] 2225 	jr	Z,00102$
                     0A83  2226 	C$main.c$416$2$199	= .
                           2227 	.globl	C$main.c$416$2$199
                           2228 ;main.c:416: *inc = -*inc;
   0A83 E1            [10] 2229 	pop	hl
   0A84 E5            [11] 2230 	push	hl
   0A85 5E            [ 7] 2231 	ld	e, (hl)
   0A86 23            [ 6] 2232 	inc	hl
   0A87 56            [ 7] 2233 	ld	d, (hl)
   0A88 AF            [ 4] 2234 	xor	a, a
   0A89 93            [ 4] 2235 	sub	a, e
   0A8A 5F            [ 4] 2236 	ld	e, a
   0A8B 3E 00         [ 7] 2237 	ld	a, #0x00
   0A8D 9A            [ 4] 2238 	sbc	a, d
   0A8E 57            [ 4] 2239 	ld	d, a
   0A8F E1            [10] 2240 	pop	hl
   0A90 E5            [11] 2241 	push	hl
   0A91 73            [ 7] 2242 	ld	(hl), e
   0A92 23            [ 6] 2243 	inc	hl
   0A93 72            [ 7] 2244 	ld	(hl), d
                     0A94  2245 	C$main.c$417$2$199	= .
                           2246 	.globl	C$main.c$417$2$199
                           2247 ;main.c:417: *val = -*val;
   0A94 69            [ 4] 2248 	ld	l, c
   0A95 60            [ 4] 2249 	ld	h, b
   0A96 5E            [ 7] 2250 	ld	e, (hl)
   0A97 23            [ 6] 2251 	inc	hl
   0A98 56            [ 7] 2252 	ld	d, (hl)
   0A99 AF            [ 4] 2253 	xor	a, a
   0A9A 93            [ 4] 2254 	sub	a, e
   0A9B 5F            [ 4] 2255 	ld	e, a
   0A9C 3E 00         [ 7] 2256 	ld	a, #0x00
   0A9E 9A            [ 4] 2257 	sbc	a, d
   0A9F 57            [ 4] 2258 	ld	d, a
   0AA0 69            [ 4] 2259 	ld	l, c
   0AA1 60            [ 4] 2260 	ld	h, b
   0AA2 73            [ 7] 2261 	ld	(hl), e
   0AA3 23            [ 6] 2262 	inc	hl
   0AA4 72            [ 7] 2263 	ld	(hl), d
   0AA5                    2264 00102$:
                     0AA5  2265 	C$main.c$419$1$198	= .
                           2266 	.globl	C$main.c$419$1$198
                           2267 ;main.c:419: if (*val >= max)
   0AA5 69            [ 4] 2268 	ld	l, c
   0AA6 60            [ 4] 2269 	ld	h, b
   0AA7 5E            [ 7] 2270 	ld	e, (hl)
   0AA8 23            [ 6] 2271 	inc	hl
   0AA9 56            [ 7] 2272 	ld	d, (hl)
   0AAA 7B            [ 4] 2273 	ld	a, e
   0AAB DD 96 08      [19] 2274 	sub	a, 8 (ix)
   0AAE 7A            [ 4] 2275 	ld	a, d
   0AAF DD 9E 09      [19] 2276 	sbc	a, 9 (ix)
   0AB2 E2rB7r0A      [10] 2277 	jp	PO, 00115$
   0AB5 EE 80         [ 7] 2278 	xor	a, #0x80
   0AB7                    2279 00115$:
   0AB7 FArEAr0A      [10] 2280 	jp	M, 00105$
                     0ABA  2281 	C$main.c$421$2$200	= .
                           2282 	.globl	C$main.c$421$2$200
                           2283 ;main.c:421: *inc = -*inc;
   0ABA E1            [10] 2284 	pop	hl
   0ABB E5            [11] 2285 	push	hl
   0ABC 5E            [ 7] 2286 	ld	e, (hl)
   0ABD 23            [ 6] 2287 	inc	hl
   0ABE 56            [ 7] 2288 	ld	d, (hl)
   0ABF AF            [ 4] 2289 	xor	a, a
   0AC0 93            [ 4] 2290 	sub	a, e
   0AC1 5F            [ 4] 2291 	ld	e, a
   0AC2 3E 00         [ 7] 2292 	ld	a, #0x00
   0AC4 9A            [ 4] 2293 	sbc	a, d
   0AC5 57            [ 4] 2294 	ld	d, a
   0AC6 E1            [10] 2295 	pop	hl
   0AC7 E5            [11] 2296 	push	hl
   0AC8 73            [ 7] 2297 	ld	(hl), e
   0AC9 23            [ 6] 2298 	inc	hl
   0ACA 72            [ 7] 2299 	ld	(hl), d
                     0ACB  2300 	C$main.c$422$2$200	= .
                           2301 	.globl	C$main.c$422$2$200
                           2302 ;main.c:422: *val = max - (*val - max) - 1;
   0ACB 69            [ 4] 2303 	ld	l, c
   0ACC 60            [ 4] 2304 	ld	h, b
   0ACD 5E            [ 7] 2305 	ld	e, (hl)
   0ACE 23            [ 6] 2306 	inc	hl
   0ACF 56            [ 7] 2307 	ld	d, (hl)
   0AD0 7B            [ 4] 2308 	ld	a, e
   0AD1 DD 96 08      [19] 2309 	sub	a, 8 (ix)
   0AD4 5F            [ 4] 2310 	ld	e, a
   0AD5 7A            [ 4] 2311 	ld	a, d
   0AD6 DD 9E 09      [19] 2312 	sbc	a, 9 (ix)
   0AD9 57            [ 4] 2313 	ld	d, a
   0ADA DD 7E 08      [19] 2314 	ld	a, 8 (ix)
   0ADD 93            [ 4] 2315 	sub	a, e
   0ADE 5F            [ 4] 2316 	ld	e, a
   0ADF DD 7E 09      [19] 2317 	ld	a, 9 (ix)
   0AE2 9A            [ 4] 2318 	sbc	a, d
   0AE3 57            [ 4] 2319 	ld	d, a
   0AE4 1B            [ 6] 2320 	dec	de
   0AE5 7B            [ 4] 2321 	ld	a, e
   0AE6 02            [ 7] 2322 	ld	(bc), a
   0AE7 03            [ 6] 2323 	inc	bc
   0AE8 7A            [ 4] 2324 	ld	a, d
   0AE9 02            [ 7] 2325 	ld	(bc), a
   0AEA                    2326 00105$:
   0AEA DD F9         [10] 2327 	ld	sp, ix
   0AEC DD E1         [14] 2328 	pop	ix
                     0AEE  2329 	C$main.c$424$1$198	= .
                           2330 	.globl	C$main.c$424$1$198
                     0AEE  2331 	XG$stepIt$0$0	= .
                           2332 	.globl	XG$stepIt$0$0
   0AEE C9            [10] 2333 	ret
                     0AEF  2334 	G$effect2$0$0	= .
                           2335 	.globl	G$effect2$0$0
                     0AEF  2336 	C$main.c$426$1$198	= .
                           2337 	.globl	C$main.c$426$1$198
                           2338 ;main.c:426: void effect2(struct scriptEvent *ev)
                           2339 ;	---------------------------------
                           2340 ; Function effect2
                           2341 ; ---------------------------------
   0AEF                    2342 _effect2::
   0AEF DD E5         [15] 2343 	push	ix
   0AF1 DD 21 00 00   [14] 2344 	ld	ix,#0
   0AF5 DD 39         [15] 2345 	add	ix,sp
   0AF7 21 F6 FF      [10] 2346 	ld	hl, #-10
   0AFA 39            [11] 2347 	add	hl, sp
   0AFB F9            [ 6] 2348 	ld	sp, hl
                     0AFC  2349 	C$main.c$434$1$202	= .
                           2350 	.globl	C$main.c$434$1$202
                           2351 ;main.c:434: x = prev_x = 40;
   0AFC 01 28 00      [10] 2352 	ld	bc, #0x0028
                     0AFF  2353 	C$main.c$435$1$202	= .
                           2354 	.globl	C$main.c$435$1$202
                           2355 ;main.c:435: y = prev_y = 50;
   0AFF DD 36 FA 32   [19] 2356 	ld	-6 (ix), #0x32
   0B03 DD 36 FB 00   [19] 2357 	ld	-5 (ix), #0x00
                     0B07  2358 	C$main.c$437$2$203	= .
                           2359 	.globl	C$main.c$437$2$203
                           2360 ;main.c:437: for (i = 0; i < 512 && !start_pressed; i++)
   0B07 11 00 00      [10] 2361 	ld	de, #0x0000
   0B0A                    2362 00106$:
   0B0A 7A            [ 4] 2363 	ld	a, d
   0B0B D6 02         [ 7] 2364 	sub	a, #0x02
   0B0D D2r0Cr0C      [10] 2365 	jp	NC, 00108$
   0B10 3Ar17r00      [13] 2366 	ld	a,(#_start_pressed + 0)
   0B13 B7            [ 4] 2367 	or	a, a
   0B14 C2r0Cr0C      [10] 2368 	jp	NZ, 00108$
                     0B17  2369 	C$main.c$440$3$204	= .
                           2370 	.globl	C$main.c$440$3$204
                           2371 ;main.c:440: x = MAX_PX / 2 + (cheapSin(i / 2) >> 10) + (cheapCos(i * 2 + i) >> 11);
   0B17 6B            [ 4] 2372 	ld	l, e
   0B18 62            [ 4] 2373 	ld	h, d
   0B19 CB 3C         [ 8] 2374 	srl	h
   0B1B CB 1D         [ 8] 2375 	rr	l
   0B1D DD 75 FC      [19] 2376 	ld	-4 (ix), l
   0B20 C5            [11] 2377 	push	bc
   0B21 D5            [11] 2378 	push	de
   0B22 DD 7E FC      [19] 2379 	ld	a, -4 (ix)
   0B25 F5            [11] 2380 	push	af
   0B26 33            [ 6] 2381 	inc	sp
   0B27 CDr00r00      [17] 2382 	call	_cheapSin
   0B2A 33            [ 6] 2383 	inc	sp
   0B2B D1            [10] 2384 	pop	de
   0B2C C1            [10] 2385 	pop	bc
   0B2D 7C            [ 4] 2386 	ld	a, h
   0B2E CB 2F         [ 8] 2387 	sra	a
   0B30 CB 2F         [ 8] 2388 	sra	a
   0B32 6F            [ 4] 2389 	ld	l,a
   0B33 CB 07         [ 8] 2390 	rlc	a
   0B35 9F            [ 4] 2391 	sbc	a, a
   0B36 67            [ 4] 2392 	ld	h, a
   0B37 7D            [ 4] 2393 	ld	a, l
   0B38 C6 5F         [ 7] 2394 	add	a, #0x5f
   0B3A DD 77 FD      [19] 2395 	ld	-3 (ix), a
   0B3D 7C            [ 4] 2396 	ld	a, h
   0B3E CE 00         [ 7] 2397 	adc	a, #0x00
   0B40 DD 77 FE      [19] 2398 	ld	-2 (ix), a
   0B43 DD 73 FF      [19] 2399 	ld	-1 (ix), e
   0B46 7B            [ 4] 2400 	ld	a, e
   0B47 87            [ 4] 2401 	add	a, a
   0B48 6F            [ 4] 2402 	ld	l,a
   0B49 DD 86 FF      [19] 2403 	add	a, -1 (ix)
   0B4C 67            [ 4] 2404 	ld	h, a
   0B4D C5            [11] 2405 	push	bc
   0B4E D5            [11] 2406 	push	de
   0B4F E5            [11] 2407 	push	hl
   0B50 33            [ 6] 2408 	inc	sp
   0B51 CDr00r00      [17] 2409 	call	_cheapCos
   0B54 33            [ 6] 2410 	inc	sp
   0B55 D1            [10] 2411 	pop	de
   0B56 C1            [10] 2412 	pop	bc
   0B57 7C            [ 4] 2413 	ld	a, h
   0B58 CB 2F         [ 8] 2414 	sra	a
   0B5A CB 2F         [ 8] 2415 	sra	a
   0B5C CB 2F         [ 8] 2416 	sra	a
   0B5E 6F            [ 4] 2417 	ld	l,a
   0B5F CB 07         [ 8] 2418 	rlc	a
   0B61 9F            [ 4] 2419 	sbc	a, a
   0B62 67            [ 4] 2420 	ld	h, a
   0B63 DD 7E FD      [19] 2421 	ld	a, -3 (ix)
   0B66 85            [ 4] 2422 	add	a, l
   0B67 6F            [ 4] 2423 	ld	l, a
   0B68 DD 7E FE      [19] 2424 	ld	a, -2 (ix)
   0B6B 8C            [ 4] 2425 	adc	a, h
   0B6C DD 75 F8      [19] 2426 	ld	-8 (ix), l
   0B6F DD 77 F9      [19] 2427 	ld	-7 (ix), a
                     0B72  2428 	C$main.c$441$3$204	= .
                           2429 	.globl	C$main.c$441$3$204
                           2430 ;main.c:441: y = MAX_PY / 2 + (-cheapCos(i / 2 + i) >> 11) + (cheapSin(i * 5) >> 12);
   0B72 DD 7E FC      [19] 2431 	ld	a, -4 (ix)
   0B75 DD 86 FF      [19] 2432 	add	a, -1 (ix)
   0B78 67            [ 4] 2433 	ld	h, a
   0B79 C5            [11] 2434 	push	bc
   0B7A D5            [11] 2435 	push	de
   0B7B E5            [11] 2436 	push	hl
   0B7C 33            [ 6] 2437 	inc	sp
   0B7D CDr00r00      [17] 2438 	call	_cheapCos
   0B80 33            [ 6] 2439 	inc	sp
   0B81 D1            [10] 2440 	pop	de
   0B82 C1            [10] 2441 	pop	bc
   0B83 AF            [ 4] 2442 	xor	a, a
   0B84 95            [ 4] 2443 	sub	a, l
   0B85 3E 00         [ 7] 2444 	ld	a, #0x00
   0B87 9C            [ 4] 2445 	sbc	a, h
   0B88 CB 2F         [ 8] 2446 	sra	a
   0B8A CB 2F         [ 8] 2447 	sra	a
   0B8C CB 2F         [ 8] 2448 	sra	a
   0B8E 6F            [ 4] 2449 	ld	l,a
   0B8F CB 07         [ 8] 2450 	rlc	a
   0B91 9F            [ 4] 2451 	sbc	a, a
   0B92 67            [ 4] 2452 	ld	h, a
   0B93 7D            [ 4] 2453 	ld	a, l
   0B94 C6 3B         [ 7] 2454 	add	a, #0x3b
   0B96 DD 77 FD      [19] 2455 	ld	-3 (ix), a
   0B99 7C            [ 4] 2456 	ld	a, h
   0B9A CE 00         [ 7] 2457 	adc	a, #0x00
   0B9C DD 77 FE      [19] 2458 	ld	-2 (ix), a
   0B9F D5            [11] 2459 	push	de
   0BA0 DD 7E FF      [19] 2460 	ld	a, -1 (ix)
   0BA3 5F            [ 4] 2461 	ld	e, a
   0BA4 87            [ 4] 2462 	add	a, a
   0BA5 87            [ 4] 2463 	add	a, a
   0BA6 83            [ 4] 2464 	add	a, e
   0BA7 D1            [10] 2465 	pop	de
   0BA8 67            [ 4] 2466 	ld	h, a
   0BA9 C5            [11] 2467 	push	bc
   0BAA D5            [11] 2468 	push	de
   0BAB E5            [11] 2469 	push	hl
   0BAC 33            [ 6] 2470 	inc	sp
   0BAD CDr00r00      [17] 2471 	call	_cheapSin
   0BB0 33            [ 6] 2472 	inc	sp
   0BB1 D1            [10] 2473 	pop	de
   0BB2 C1            [10] 2474 	pop	bc
   0BB3 7C            [ 4] 2475 	ld	a, h
   0BB4 CB 2F         [ 8] 2476 	sra	a
   0BB6 CB 2F         [ 8] 2477 	sra	a
   0BB8 CB 2F         [ 8] 2478 	sra	a
   0BBA CB 2F         [ 8] 2479 	sra	a
   0BBC 6F            [ 4] 2480 	ld	l,a
   0BBD CB 07         [ 8] 2481 	rlc	a
   0BBF 9F            [ 4] 2482 	sbc	a, a
   0BC0 67            [ 4] 2483 	ld	h, a
   0BC1 DD 7E FD      [19] 2484 	ld	a, -3 (ix)
   0BC4 85            [ 4] 2485 	add	a, l
   0BC5 6F            [ 4] 2486 	ld	l, a
   0BC6 DD 7E FE      [19] 2487 	ld	a, -2 (ix)
   0BC9 8C            [ 4] 2488 	adc	a, h
   0BCA 67            [ 4] 2489 	ld	h, a
   0BCB 33            [ 6] 2490 	inc	sp
   0BCC 33            [ 6] 2491 	inc	sp
   0BCD E5            [11] 2492 	push	hl
                     0BCE  2493 	C$main.c$443$3$204	= .
                           2494 	.globl	C$main.c$443$3$204
                           2495 ;main.c:443: if (i)
   0BCE 7A            [ 4] 2496 	ld	a, d
   0BCF B3            [ 4] 2497 	or	a,e
   0BD0 28 24         [12] 2498 	jr	Z,00102$
                     0BD2  2499 	C$main.c$445$4$205	= .
                           2500 	.globl	C$main.c$445$4$205
                           2501 ;main.c:445: updateDisplay(prev_x, prev_y, x, y, 1);
   0BD2 D5            [11] 2502 	push	de
   0BD3 3E 01         [ 7] 2503 	ld	a, #0x01
   0BD5 F5            [11] 2504 	push	af
   0BD6 33            [ 6] 2505 	inc	sp
   0BD7 DD 6E F6      [19] 2506 	ld	l,-10 (ix)
   0BDA DD 66 F7      [19] 2507 	ld	h,-9 (ix)
   0BDD E5            [11] 2508 	push	hl
   0BDE DD 6E F8      [19] 2509 	ld	l,-8 (ix)
   0BE1 DD 66 F9      [19] 2510 	ld	h,-7 (ix)
   0BE4 E5            [11] 2511 	push	hl
   0BE5 DD 6E FA      [19] 2512 	ld	l,-6 (ix)
   0BE8 DD 66 FB      [19] 2513 	ld	h,-5 (ix)
   0BEB E5            [11] 2514 	push	hl
   0BEC C5            [11] 2515 	push	bc
   0BED CDr40r09      [17] 2516 	call	_updateDisplay
   0BF0 21 09 00      [10] 2517 	ld	hl, #9
   0BF3 39            [11] 2518 	add	hl, sp
   0BF4 F9            [ 6] 2519 	ld	sp, hl
   0BF5 D1            [10] 2520 	pop	de
   0BF6                    2521 00102$:
                     0BF6  2522 	C$main.c$448$3$204	= .
                           2523 	.globl	C$main.c$448$3$204
                           2524 ;main.c:448: prev_x = x;
   0BF6 DD 4E F8      [19] 2525 	ld	c,-8 (ix)
   0BF9 DD 46 F9      [19] 2526 	ld	b,-7 (ix)
                     0BFC  2527 	C$main.c$449$3$204	= .
                           2528 	.globl	C$main.c$449$3$204
                           2529 ;main.c:449: prev_y = y;
   0BFC DD 7E F6      [19] 2530 	ld	a, -10 (ix)
   0BFF DD 77 FA      [19] 2531 	ld	-6 (ix), a
   0C02 DD 7E F7      [19] 2532 	ld	a, -9 (ix)
   0C05 DD 77 FB      [19] 2533 	ld	-5 (ix), a
                     0C08  2534 	C$main.c$437$2$203	= .
                           2535 	.globl	C$main.c$437$2$203
                           2536 ;main.c:437: for (i = 0; i < 512 && !start_pressed; i++)
   0C08 13            [ 6] 2537 	inc	de
   0C09 C3r0Ar0B      [10] 2538 	jp	00106$
   0C0C                    2539 00108$:
   0C0C DD F9         [10] 2540 	ld	sp, ix
   0C0E DD E1         [14] 2541 	pop	ix
                     0C10  2542 	C$main.c$451$2$203	= .
                           2543 	.globl	C$main.c$451$2$203
                     0C10  2544 	XG$effect2$0$0	= .
                           2545 	.globl	XG$effect2$0$0
   0C10 C9            [10] 2546 	ret
                     0C11  2547 	G$effect3$0$0	= .
                           2548 	.globl	G$effect3$0$0
                     0C11  2549 	C$main.c$453$2$203	= .
                           2550 	.globl	C$main.c$453$2$203
                           2551 ;main.c:453: void effect3(struct scriptEvent *ev)
                           2552 ;	---------------------------------
                           2553 ; Function effect3
                           2554 ; ---------------------------------
   0C11                    2555 _effect3::
   0C11 DD E5         [15] 2556 	push	ix
   0C13 DD 21 00 00   [14] 2557 	ld	ix,#0
   0C17 DD 39         [15] 2558 	add	ix,sp
   0C19 21 F6 FF      [10] 2559 	ld	hl, #-10
   0C1C 39            [11] 2560 	add	hl, sp
   0C1D F9            [ 6] 2561 	ld	sp, hl
                     0C1E  2562 	C$main.c$461$1$207	= .
                           2563 	.globl	C$main.c$461$1$207
                           2564 ;main.c:461: x = prev_x = 40;
   0C1E 01 28 00      [10] 2565 	ld	bc, #0x0028
                     0C21  2566 	C$main.c$462$1$207	= .
                           2567 	.globl	C$main.c$462$1$207
                           2568 ;main.c:462: y = prev_y = 50;
   0C21 DD 36 F8 32   [19] 2569 	ld	-8 (ix), #0x32
   0C25 DD 36 F9 00   [19] 2570 	ld	-7 (ix), #0x00
                     0C29  2571 	C$main.c$464$2$208	= .
                           2572 	.globl	C$main.c$464$2$208
                           2573 ;main.c:464: for (i = 0; i < 512 && !start_pressed; i++)
   0C29 11 00 00      [10] 2574 	ld	de, #0x0000
   0C2C                    2575 00106$:
   0C2C 7A            [ 4] 2576 	ld	a, d
   0C2D D6 02         [ 7] 2577 	sub	a, #0x02
   0C2F D2r22r0D      [10] 2578 	jp	NC, 00108$
   0C32 3Ar17r00      [13] 2579 	ld	a,(#_start_pressed + 0)
   0C35 B7            [ 4] 2580 	or	a, a
   0C36 C2r22r0D      [10] 2581 	jp	NZ, 00108$
                     0C39  2582 	C$main.c$467$3$209	= .
                           2583 	.globl	C$main.c$467$3$209
                           2584 ;main.c:467: x = MAX_PX / 2 + ((cheapSin(i) >> 11) + (cheapCos(i * 3 + i / 2) >> 10));
   0C39 DD 73 FF      [19] 2585 	ld	-1 (ix), e
   0C3C C5            [11] 2586 	push	bc
   0C3D D5            [11] 2587 	push	de
   0C3E DD 7E FF      [19] 2588 	ld	a, -1 (ix)
   0C41 F5            [11] 2589 	push	af
   0C42 33            [ 6] 2590 	inc	sp
   0C43 CDr00r00      [17] 2591 	call	_cheapSin
   0C46 33            [ 6] 2592 	inc	sp
   0C47 D1            [10] 2593 	pop	de
   0C48 C1            [10] 2594 	pop	bc
   0C49 7C            [ 4] 2595 	ld	a, h
   0C4A CB 2F         [ 8] 2596 	sra	a
   0C4C CB 2F         [ 8] 2597 	sra	a
   0C4E CB 2F         [ 8] 2598 	sra	a
   0C50 DD 77 FC      [19] 2599 	ld	-4 (ix), a
   0C53 CB 07         [ 8] 2600 	rlc	a
   0C55 9F            [ 4] 2601 	sbc	a, a
   0C56 DD 77 FD      [19] 2602 	ld	-3 (ix), a
   0C59 D5            [11] 2603 	push	de
   0C5A DD 7E FF      [19] 2604 	ld	a, -1 (ix)
   0C5D 5F            [ 4] 2605 	ld	e, a
   0C5E 87            [ 4] 2606 	add	a, a
   0C5F 83            [ 4] 2607 	add	a, e
   0C60 D1            [10] 2608 	pop	de
   0C61 DD 77 FE      [19] 2609 	ld	-2 (ix), a
   0C64 6B            [ 4] 2610 	ld	l, e
   0C65 62            [ 4] 2611 	ld	h, d
   0C66 CB 3C         [ 8] 2612 	srl	h
   0C68 CB 1D         [ 8] 2613 	rr	l
   0C6A DD 7E FE      [19] 2614 	ld	a, -2 (ix)
   0C6D 85            [ 4] 2615 	add	a, l
   0C6E DD 77 FE      [19] 2616 	ld	-2 (ix), a
   0C71 C5            [11] 2617 	push	bc
   0C72 D5            [11] 2618 	push	de
   0C73 DD 7E FE      [19] 2619 	ld	a, -2 (ix)
   0C76 F5            [11] 2620 	push	af
   0C77 33            [ 6] 2621 	inc	sp
   0C78 CDr00r00      [17] 2622 	call	_cheapCos
   0C7B 33            [ 6] 2623 	inc	sp
   0C7C D1            [10] 2624 	pop	de
   0C7D C1            [10] 2625 	pop	bc
   0C7E 7C            [ 4] 2626 	ld	a, h
   0C7F CB 2F         [ 8] 2627 	sra	a
   0C81 CB 2F         [ 8] 2628 	sra	a
   0C83 6F            [ 4] 2629 	ld	l,a
   0C84 CB 07         [ 8] 2630 	rlc	a
   0C86 9F            [ 4] 2631 	sbc	a, a
   0C87 67            [ 4] 2632 	ld	h, a
   0C88 DD 7E FC      [19] 2633 	ld	a, -4 (ix)
   0C8B 85            [ 4] 2634 	add	a, l
   0C8C 6F            [ 4] 2635 	ld	l, a
   0C8D DD 7E FD      [19] 2636 	ld	a, -3 (ix)
   0C90 8C            [ 4] 2637 	adc	a, h
   0C91 67            [ 4] 2638 	ld	h, a
   0C92 7D            [ 4] 2639 	ld	a, l
   0C93 C6 5F         [ 7] 2640 	add	a, #0x5f
   0C95 DD 77 F6      [19] 2641 	ld	-10 (ix), a
   0C98 7C            [ 4] 2642 	ld	a, h
   0C99 CE 00         [ 7] 2643 	adc	a, #0x00
   0C9B DD 77 F7      [19] 2644 	ld	-9 (ix), a
                     0C9E  2645 	C$main.c$468$3$209	= .
                           2646 	.globl	C$main.c$468$3$209
                           2647 ;main.c:468: y = MAX_PY / 2 + ((cheapCos(i) >> 11) + (cheapSin(i * 3 + i / 2) >> 10));
   0C9E C5            [11] 2648 	push	bc
   0C9F D5            [11] 2649 	push	de
   0CA0 DD 7E FF      [19] 2650 	ld	a, -1 (ix)
   0CA3 F5            [11] 2651 	push	af
   0CA4 33            [ 6] 2652 	inc	sp
   0CA5 CDr00r00      [17] 2653 	call	_cheapCos
   0CA8 33            [ 6] 2654 	inc	sp
   0CA9 D1            [10] 2655 	pop	de
   0CAA C1            [10] 2656 	pop	bc
   0CAB 7C            [ 4] 2657 	ld	a, h
   0CAC CB 2F         [ 8] 2658 	sra	a
   0CAE CB 2F         [ 8] 2659 	sra	a
   0CB0 CB 2F         [ 8] 2660 	sra	a
   0CB2 DD 77 FC      [19] 2661 	ld	-4 (ix), a
   0CB5 CB 07         [ 8] 2662 	rlc	a
   0CB7 9F            [ 4] 2663 	sbc	a, a
   0CB8 DD 77 FD      [19] 2664 	ld	-3 (ix), a
   0CBB C5            [11] 2665 	push	bc
   0CBC D5            [11] 2666 	push	de
   0CBD DD 7E FE      [19] 2667 	ld	a, -2 (ix)
   0CC0 F5            [11] 2668 	push	af
   0CC1 33            [ 6] 2669 	inc	sp
   0CC2 CDr00r00      [17] 2670 	call	_cheapSin
   0CC5 33            [ 6] 2671 	inc	sp
   0CC6 D1            [10] 2672 	pop	de
   0CC7 C1            [10] 2673 	pop	bc
   0CC8 7C            [ 4] 2674 	ld	a, h
   0CC9 CB 2F         [ 8] 2675 	sra	a
   0CCB CB 2F         [ 8] 2676 	sra	a
   0CCD 6F            [ 4] 2677 	ld	l,a
   0CCE CB 07         [ 8] 2678 	rlc	a
   0CD0 9F            [ 4] 2679 	sbc	a, a
   0CD1 67            [ 4] 2680 	ld	h, a
   0CD2 DD 7E FC      [19] 2681 	ld	a, -4 (ix)
   0CD5 85            [ 4] 2682 	add	a, l
   0CD6 6F            [ 4] 2683 	ld	l, a
   0CD7 DD 7E FD      [19] 2684 	ld	a, -3 (ix)
   0CDA 8C            [ 4] 2685 	adc	a, h
   0CDB 67            [ 4] 2686 	ld	h, a
   0CDC 7D            [ 4] 2687 	ld	a, l
   0CDD C6 3B         [ 7] 2688 	add	a, #0x3b
   0CDF DD 77 FA      [19] 2689 	ld	-6 (ix), a
   0CE2 7C            [ 4] 2690 	ld	a, h
   0CE3 CE 00         [ 7] 2691 	adc	a, #0x00
   0CE5 DD 77 FB      [19] 2692 	ld	-5 (ix), a
                     0CE8  2693 	C$main.c$470$3$209	= .
                           2694 	.globl	C$main.c$470$3$209
                           2695 ;main.c:470: if (i)
   0CE8 7A            [ 4] 2696 	ld	a, d
   0CE9 B3            [ 4] 2697 	or	a,e
   0CEA 28 24         [12] 2698 	jr	Z,00102$
                     0CEC  2699 	C$main.c$472$4$210	= .
                           2700 	.globl	C$main.c$472$4$210
                           2701 ;main.c:472: updateDisplay(prev_x, prev_y, x, y, 1);
   0CEC D5            [11] 2702 	push	de
   0CED 3E 01         [ 7] 2703 	ld	a, #0x01
   0CEF F5            [11] 2704 	push	af
   0CF0 33            [ 6] 2705 	inc	sp
   0CF1 DD 6E FA      [19] 2706 	ld	l,-6 (ix)
   0CF4 DD 66 FB      [19] 2707 	ld	h,-5 (ix)
   0CF7 E5            [11] 2708 	push	hl
   0CF8 DD 6E F6      [19] 2709 	ld	l,-10 (ix)
   0CFB DD 66 F7      [19] 2710 	ld	h,-9 (ix)
   0CFE E5            [11] 2711 	push	hl
   0CFF DD 6E F8      [19] 2712 	ld	l,-8 (ix)
   0D02 DD 66 F9      [19] 2713 	ld	h,-7 (ix)
   0D05 E5            [11] 2714 	push	hl
   0D06 C5            [11] 2715 	push	bc
   0D07 CDr40r09      [17] 2716 	call	_updateDisplay
   0D0A 21 09 00      [10] 2717 	ld	hl, #9
   0D0D 39            [11] 2718 	add	hl, sp
   0D0E F9            [ 6] 2719 	ld	sp, hl
   0D0F D1            [10] 2720 	pop	de
   0D10                    2721 00102$:
                     0D10  2722 	C$main.c$475$3$209	= .
                           2723 	.globl	C$main.c$475$3$209
                           2724 ;main.c:475: prev_x = x;
   0D10 C1            [10] 2725 	pop	bc
   0D11 C5            [11] 2726 	push	bc
                     0D12  2727 	C$main.c$476$3$209	= .
                           2728 	.globl	C$main.c$476$3$209
                           2729 ;main.c:476: prev_y = y;
   0D12 DD 7E FA      [19] 2730 	ld	a, -6 (ix)
   0D15 DD 77 F8      [19] 2731 	ld	-8 (ix), a
   0D18 DD 7E FB      [19] 2732 	ld	a, -5 (ix)
   0D1B DD 77 F9      [19] 2733 	ld	-7 (ix), a
                     0D1E  2734 	C$main.c$464$2$208	= .
                           2735 	.globl	C$main.c$464$2$208
                           2736 ;main.c:464: for (i = 0; i < 512 && !start_pressed; i++)
   0D1E 13            [ 6] 2737 	inc	de
   0D1F C3r2Cr0C      [10] 2738 	jp	00106$
   0D22                    2739 00108$:
   0D22 DD F9         [10] 2740 	ld	sp, ix
   0D24 DD E1         [14] 2741 	pop	ix
                     0D26  2742 	C$main.c$478$2$208	= .
                           2743 	.globl	C$main.c$478$2$208
                     0D26  2744 	XG$effect3$0$0	= .
                           2745 	.globl	XG$effect3$0$0
   0D26 C9            [10] 2746 	ret
                     0D27  2747 	G$effect4$0$0	= .
                           2748 	.globl	G$effect4$0$0
                     0D27  2749 	C$main.c$480$2$208	= .
                           2750 	.globl	C$main.c$480$2$208
                           2751 ;main.c:480: void effect4(struct scriptEvent *ev)
                           2752 ;	---------------------------------
                           2753 ; Function effect4
                           2754 ; ---------------------------------
   0D27                    2755 _effect4::
   0D27 DD E5         [15] 2756 	push	ix
   0D29 DD 21 00 00   [14] 2757 	ld	ix,#0
   0D2D DD 39         [15] 2758 	add	ix,sp
   0D2F 21 FA FF      [10] 2759 	ld	hl, #-6
   0D32 39            [11] 2760 	add	hl, sp
   0D33 F9            [ 6] 2761 	ld	sp, hl
                     0D34  2762 	C$main.c$488$1$212	= .
                           2763 	.globl	C$main.c$488$1$212
                           2764 ;main.c:488: x = prev_x = 40;
   0D34 DD 36 FC 28   [19] 2765 	ld	-4 (ix), #0x28
   0D38 DD 36 FD 00   [19] 2766 	ld	-3 (ix), #0x00
                     0D3C  2767 	C$main.c$489$1$212	= .
                           2768 	.globl	C$main.c$489$1$212
                           2769 ;main.c:489: y = prev_y = 50;
   0D3C DD 36 FE 32   [19] 2770 	ld	-2 (ix), #0x32
   0D40 DD 36 FF 00   [19] 2771 	ld	-1 (ix), #0x00
                     0D44  2772 	C$main.c$491$2$213	= .
                           2773 	.globl	C$main.c$491$2$213
                           2774 ;main.c:491: for (i = 0; i < 2048; i++)
   0D44 01 00 00      [10] 2775 	ld	bc, #0x0000
   0D47                    2776 00104$:
                     0D47  2777 	C$main.c$494$2$213	= .
                           2778 	.globl	C$main.c$494$2$213
                           2779 ;main.c:494: x = MAX_PX / 2 + ((cheapSin(i * 8 + i) >> 10));
   0D47 59            [ 4] 2780 	ld	e, c
   0D48 7B            [ 4] 2781 	ld	a, e
   0D49 07            [ 4] 2782 	rlca
   0D4A 07            [ 4] 2783 	rlca
   0D4B 07            [ 4] 2784 	rlca
   0D4C E6 F8         [ 7] 2785 	and	a, #0xf8
   0D4E 6F            [ 4] 2786 	ld	l, a
   0D4F 19            [11] 2787 	add	hl, de
   0D50 C5            [11] 2788 	push	bc
   0D51 D5            [11] 2789 	push	de
   0D52 7D            [ 4] 2790 	ld	a, l
   0D53 F5            [11] 2791 	push	af
   0D54 33            [ 6] 2792 	inc	sp
   0D55 CDr00r00      [17] 2793 	call	_cheapSin
   0D58 33            [ 6] 2794 	inc	sp
   0D59 D1            [10] 2795 	pop	de
   0D5A C1            [10] 2796 	pop	bc
   0D5B 7C            [ 4] 2797 	ld	a, h
   0D5C CB 2F         [ 8] 2798 	sra	a
   0D5E CB 2F         [ 8] 2799 	sra	a
   0D60 6F            [ 4] 2800 	ld	l,a
   0D61 CB 07         [ 8] 2801 	rlc	a
   0D63 9F            [ 4] 2802 	sbc	a, a
   0D64 67            [ 4] 2803 	ld	h, a
   0D65 7D            [ 4] 2804 	ld	a, l
   0D66 C6 5F         [ 7] 2805 	add	a, #0x5f
   0D68 DD 77 FA      [19] 2806 	ld	-6 (ix), a
   0D6B 7C            [ 4] 2807 	ld	a, h
   0D6C CE 00         [ 7] 2808 	adc	a, #0x00
   0D6E DD 77 FB      [19] 2809 	ld	-5 (ix), a
                     0D71  2810 	C$main.c$495$3$214	= .
                           2811 	.globl	C$main.c$495$3$214
                           2812 ;main.c:495: y = MAX_PY / 2 + ((cheapSin(i * 7) >> 10));
   0D71 7B            [ 4] 2813 	ld	a, e
   0D72 87            [ 4] 2814 	add	a, a
   0D73 83            [ 4] 2815 	add	a, e
   0D74 87            [ 4] 2816 	add	a, a
   0D75 83            [ 4] 2817 	add	a, e
   0D76 57            [ 4] 2818 	ld	d, a
   0D77 C5            [11] 2819 	push	bc
   0D78 D5            [11] 2820 	push	de
   0D79 33            [ 6] 2821 	inc	sp
   0D7A CDr00r00      [17] 2822 	call	_cheapSin
   0D7D 33            [ 6] 2823 	inc	sp
   0D7E C1            [10] 2824 	pop	bc
   0D7F 7C            [ 4] 2825 	ld	a, h
   0D80 CB 2F         [ 8] 2826 	sra	a
   0D82 CB 2F         [ 8] 2827 	sra	a
   0D84 5F            [ 4] 2828 	ld	e,a
   0D85 CB 07         [ 8] 2829 	rlc	a
   0D87 9F            [ 4] 2830 	sbc	a, a
   0D88 57            [ 4] 2831 	ld	d, a
   0D89 21 3B 00      [10] 2832 	ld	hl, #0x003b
   0D8C 19            [11] 2833 	add	hl, de
                     0D8D  2834 	C$main.c$497$3$214	= .
                           2835 	.globl	C$main.c$497$3$214
                           2836 ;main.c:497: if (i)
   0D8D 78            [ 4] 2837 	ld	a, b
   0D8E B1            [ 4] 2838 	or	a,c
   0D8F 28 22         [12] 2839 	jr	Z,00102$
                     0D91  2840 	C$main.c$499$4$215	= .
                           2841 	.globl	C$main.c$499$4$215
                           2842 ;main.c:499: drawLineSync(prev_x, prev_y, x, y);
   0D91 E5            [11] 2843 	push	hl
   0D92 C5            [11] 2844 	push	bc
   0D93 E5            [11] 2845 	push	hl
   0D94 DD 5E FA      [19] 2846 	ld	e,-6 (ix)
   0D97 DD 56 FB      [19] 2847 	ld	d,-5 (ix)
   0D9A D5            [11] 2848 	push	de
   0D9B DD 5E FE      [19] 2849 	ld	e,-2 (ix)
   0D9E DD 56 FF      [19] 2850 	ld	d,-1 (ix)
   0DA1 D5            [11] 2851 	push	de
   0DA2 DD 5E FC      [19] 2852 	ld	e,-4 (ix)
   0DA5 DD 56 FD      [19] 2853 	ld	d,-3 (ix)
   0DA8 D5            [11] 2854 	push	de
   0DA9 CDrE7r06      [17] 2855 	call	_drawLineSync
   0DAC 21 08 00      [10] 2856 	ld	hl, #8
   0DAF 39            [11] 2857 	add	hl, sp
   0DB0 F9            [ 6] 2858 	ld	sp, hl
   0DB1 C1            [10] 2859 	pop	bc
   0DB2 E1            [10] 2860 	pop	hl
   0DB3                    2861 00102$:
                     0DB3  2862 	C$main.c$502$3$214	= .
                           2863 	.globl	C$main.c$502$3$214
                           2864 ;main.c:502: prev_x = x;
   0DB3 DD 7E FA      [19] 2865 	ld	a, -6 (ix)
   0DB6 DD 77 FC      [19] 2866 	ld	-4 (ix), a
   0DB9 DD 7E FB      [19] 2867 	ld	a, -5 (ix)
   0DBC DD 77 FD      [19] 2868 	ld	-3 (ix), a
                     0DBF  2869 	C$main.c$503$3$214	= .
                           2870 	.globl	C$main.c$503$3$214
                           2871 ;main.c:503: prev_y = y;
   0DBF DD 75 FE      [19] 2872 	ld	-2 (ix), l
   0DC2 DD 74 FF      [19] 2873 	ld	-1 (ix), h
                     0DC5  2874 	C$main.c$491$2$213	= .
                           2875 	.globl	C$main.c$491$2$213
                           2876 ;main.c:491: for (i = 0; i < 2048; i++)
   0DC5 03            [ 6] 2877 	inc	bc
   0DC6 78            [ 4] 2878 	ld	a, b
   0DC7 D6 08         [ 7] 2879 	sub	a, #0x08
   0DC9 DAr47r0D      [10] 2880 	jp	C, 00104$
   0DCC DD F9         [10] 2881 	ld	sp, ix
   0DCE DD E1         [14] 2882 	pop	ix
                     0DD0  2883 	C$main.c$505$2$213	= .
                           2884 	.globl	C$main.c$505$2$213
                     0DD0  2885 	XG$effect4$0$0	= .
                           2886 	.globl	XG$effect4$0$0
   0DD0 C9            [10] 2887 	ret
                     0DD1  2888 	G$effect1$0$0	= .
                           2889 	.globl	G$effect1$0$0
                     0DD1  2890 	C$main.c$507$2$213	= .
                           2891 	.globl	C$main.c$507$2$213
                           2892 ;main.c:507: void effect1(struct scriptEvent *ev)
                           2893 ;	---------------------------------
                           2894 ; Function effect1
                           2895 ; ---------------------------------
   0DD1                    2896 _effect1::
   0DD1 DD E5         [15] 2897 	push	ix
   0DD3 DD 21 00 00   [14] 2898 	ld	ix,#0
   0DD7 DD 39         [15] 2899 	add	ix,sp
   0DD9 21 EE FF      [10] 2900 	ld	hl, #-18
   0DDC 39            [11] 2901 	add	hl, sp
   0DDD F9            [ 6] 2902 	ld	sp, hl
                     0DDE  2903 	C$main.c$509$1$213	= .
                           2904 	.globl	C$main.c$509$1$213
                           2905 ;main.c:509: int x1 = 0, y1 = 30, x2 = MAX_PX, y2 = MAX_PY - 30;
   0DDE DD 36 F0 00   [19] 2906 	ld	-16 (ix), #0x00
   0DE2 DD 36 F1 00   [19] 2907 	ld	-15 (ix), #0x00
   0DE6 DD 36 FA 1E   [19] 2908 	ld	-6 (ix), #0x1e
   0DEA DD 36 FB 00   [19] 2909 	ld	-5 (ix), #0x00
   0DEE 21 BF 00      [10] 2910 	ld	hl, #0x00bf
   0DF1 E3            [19] 2911 	ex	(sp), hl
   0DF2 DD 36 F4 59   [19] 2912 	ld	-12 (ix), #0x59
   0DF6 DD 36 F5 00   [19] 2913 	ld	-11 (ix), #0x00
                     0DFA  2914 	C$main.c$510$1$213	= .
                           2915 	.globl	C$main.c$510$1$213
                           2916 ;main.c:510: int x1i = 0, y1i = 5, x2i = -0, y2i = -5;
   0DFA DD 36 F6 00   [19] 2917 	ld	-10 (ix), #0x00
   0DFE DD 36 F7 00   [19] 2918 	ld	-9 (ix), #0x00
   0E02 DD 36 F8 05   [19] 2919 	ld	-8 (ix), #0x05
   0E06 DD 36 F9 00   [19] 2920 	ld	-7 (ix), #0x00
   0E0A DD 36 F2 00   [19] 2921 	ld	-14 (ix), #0x00
   0E0E DD 36 F3 00   [19] 2922 	ld	-13 (ix), #0x00
   0E12 DD 36 FE FB   [19] 2923 	ld	-2 (ix), #0xfb
   0E16 DD 36 FF FF   [19] 2924 	ld	-1 (ix), #0xff
                     0E1A  2925 	C$main.c$513$2$218	= .
                           2926 	.globl	C$main.c$513$2$218
                           2927 ;main.c:513: for (i = 0; i < 10; i++)
   0E1A DD 36 FC 00   [19] 2928 	ld	-4 (ix), #0x00
   0E1E DD 36 FD 00   [19] 2929 	ld	-3 (ix), #0x00
   0E22                    2930 00102$:
                     0E22  2931 	C$main.c$516$3$219	= .
                           2932 	.globl	C$main.c$516$3$219
                           2933 ;main.c:516: stepIt(&x1, &x1i, MAX_PX);
   0E22 21 08 00      [10] 2934 	ld	hl, #0x0008
   0E25 39            [11] 2935 	add	hl, sp
   0E26 4D            [ 4] 2936 	ld	c, l
   0E27 44            [ 4] 2937 	ld	b, h
   0E28 21 02 00      [10] 2938 	ld	hl, #0x0002
   0E2B 39            [11] 2939 	add	hl, sp
   0E2C 11 BF 00      [10] 2940 	ld	de, #0x00bf
   0E2F D5            [11] 2941 	push	de
   0E30 C5            [11] 2942 	push	bc
   0E31 E5            [11] 2943 	push	hl
   0E32 CDr52r0A      [17] 2944 	call	_stepIt
   0E35 21 06 00      [10] 2945 	ld	hl, #6
   0E38 39            [11] 2946 	add	hl, sp
   0E39 F9            [ 6] 2947 	ld	sp, hl
                     0E3A  2948 	C$main.c$517$3$219	= .
                           2949 	.globl	C$main.c$517$3$219
                           2950 ;main.c:517: stepIt(&x2, &x2i, MAX_PX);
   0E3A 21 04 00      [10] 2951 	ld	hl, #0x0004
   0E3D 39            [11] 2952 	add	hl, sp
   0E3E 4D            [ 4] 2953 	ld	c, l
   0E3F 44            [ 4] 2954 	ld	b, h
   0E40 21 00 00      [10] 2955 	ld	hl, #0x0000
   0E43 39            [11] 2956 	add	hl, sp
   0E44 11 BF 00      [10] 2957 	ld	de, #0x00bf
   0E47 D5            [11] 2958 	push	de
   0E48 C5            [11] 2959 	push	bc
   0E49 E5            [11] 2960 	push	hl
   0E4A CDr52r0A      [17] 2961 	call	_stepIt
   0E4D 21 06 00      [10] 2962 	ld	hl, #6
   0E50 39            [11] 2963 	add	hl, sp
   0E51 F9            [ 6] 2964 	ld	sp, hl
                     0E52  2965 	C$main.c$518$3$219	= .
                           2966 	.globl	C$main.c$518$3$219
                           2967 ;main.c:518: stepIt(&y1, &y1i, MAX_PY);
   0E52 21 0A 00      [10] 2968 	ld	hl, #0x000a
   0E55 39            [11] 2969 	add	hl, sp
   0E56 4D            [ 4] 2970 	ld	c, l
   0E57 44            [ 4] 2971 	ld	b, h
   0E58 21 0C 00      [10] 2972 	ld	hl, #0x000c
   0E5B 39            [11] 2973 	add	hl, sp
   0E5C 11 77 00      [10] 2974 	ld	de, #0x0077
   0E5F D5            [11] 2975 	push	de
   0E60 C5            [11] 2976 	push	bc
   0E61 E5            [11] 2977 	push	hl
   0E62 CDr52r0A      [17] 2978 	call	_stepIt
   0E65 21 06 00      [10] 2979 	ld	hl, #6
   0E68 39            [11] 2980 	add	hl, sp
   0E69 F9            [ 6] 2981 	ld	sp, hl
                     0E6A  2982 	C$main.c$519$3$219	= .
                           2983 	.globl	C$main.c$519$3$219
                           2984 ;main.c:519: stepIt(&y2, &y2i, MAX_PY);
   0E6A 21 10 00      [10] 2985 	ld	hl, #0x0010
   0E6D 39            [11] 2986 	add	hl, sp
   0E6E 4D            [ 4] 2987 	ld	c, l
   0E6F 44            [ 4] 2988 	ld	b, h
   0E70 21 06 00      [10] 2989 	ld	hl, #0x0006
   0E73 39            [11] 2990 	add	hl, sp
   0E74 11 77 00      [10] 2991 	ld	de, #0x0077
   0E77 D5            [11] 2992 	push	de
   0E78 C5            [11] 2993 	push	bc
   0E79 E5            [11] 2994 	push	hl
   0E7A CDr52r0A      [17] 2995 	call	_stepIt
   0E7D 21 06 00      [10] 2996 	ld	hl, #6
   0E80 39            [11] 2997 	add	hl, sp
   0E81 F9            [ 6] 2998 	ld	sp, hl
                     0E82  2999 	C$main.c$521$3$219	= .
                           3000 	.globl	C$main.c$521$3$219
                           3001 ;main.c:521: drawLineSync(x1, y1, x2, y2);
   0E82 DD 4E F4      [19] 3002 	ld	c, -12 (ix)
   0E85 DD 46 F5      [19] 3003 	ld	b, -11 (ix)
   0E88 E1            [10] 3004 	pop	hl
   0E89 E5            [11] 3005 	push	hl
   0E8A C5            [11] 3006 	push	bc
   0E8B E5            [11] 3007 	push	hl
   0E8C DD 6E FA      [19] 3008 	ld	l,-6 (ix)
   0E8F DD 66 FB      [19] 3009 	ld	h,-5 (ix)
   0E92 E5            [11] 3010 	push	hl
   0E93 DD 6E F0      [19] 3011 	ld	l,-16 (ix)
   0E96 DD 66 F1      [19] 3012 	ld	h,-15 (ix)
   0E99 E5            [11] 3013 	push	hl
   0E9A CDrE7r06      [17] 3014 	call	_drawLineSync
   0E9D 21 08 00      [10] 3015 	ld	hl, #8
   0EA0 39            [11] 3016 	add	hl, sp
   0EA1 F9            [ 6] 3017 	ld	sp, hl
                     0EA2  3018 	C$main.c$513$2$218	= .
                           3019 	.globl	C$main.c$513$2$218
                           3020 ;main.c:513: for (i = 0; i < 10; i++)
   0EA2 DD 34 FC      [23] 3021 	inc	-4 (ix)
   0EA5 20 03         [12] 3022 	jr	NZ,00111$
   0EA7 DD 34 FD      [23] 3023 	inc	-3 (ix)
   0EAA                    3024 00111$:
   0EAA DD 7E FC      [19] 3025 	ld	a, -4 (ix)
   0EAD D6 0A         [ 7] 3026 	sub	a, #0x0a
   0EAF DD 7E FD      [19] 3027 	ld	a, -3 (ix)
   0EB2 17            [ 4] 3028 	rla
   0EB3 3F            [ 4] 3029 	ccf
   0EB4 1F            [ 4] 3030 	rra
   0EB5 DE 80         [ 7] 3031 	sbc	a, #0x80
   0EB7 DAr22r0E      [10] 3032 	jp	C, 00102$
   0EBA DD F9         [10] 3033 	ld	sp, ix
   0EBC DD E1         [14] 3034 	pop	ix
                     0EBE  3035 	C$main.c$523$2$218	= .
                           3036 	.globl	C$main.c$523$2$218
                     0EBE  3037 	XG$effect1$0$0	= .
                           3038 	.globl	XG$effect1$0$0
   0EBE C9            [10] 3039 	ret
                     0EBF  3040 	G$runScript$0$0	= .
                           3041 	.globl	G$runScript$0$0
                     0EBF  3042 	C$main.c$574$2$218	= .
                           3043 	.globl	C$main.c$574$2$218
                           3044 ;main.c:574: void runScript(void)
                           3045 ;	---------------------------------
                           3046 ; Function runScript
                           3047 ; ---------------------------------
   0EBF                    3048 _runScript::
                     0EBF  3049 	C$main.c$580$1$221	= .
                           3050 	.globl	C$main.c$580$1$221
                           3051 ;main.c:580: vsync_keycheck();
   0EBF CDr82r00      [17] 3052 	call	_vsync_keycheck
                     0EC2  3053 	C$main.c$582$1$221	= .
                           3054 	.globl	C$main.c$582$1$221
                           3055 ;main.c:582: start_pressed = 0;
   0EC2 21r17r00      [10] 3056 	ld	hl,#_start_pressed + 0
   0EC5 36 00         [10] 3057 	ld	(hl), #0x00
                     0EC7  3058 	C$main.c$583$1$221	= .
                           3059 	.globl	C$main.c$583$1$221
                           3060 ;main.c:583: nextEvent = &script[0];
   0EC7 01r03r00      [10] 3061 	ld	bc, #_script+0
   0ECA                    3062 00116$:
                     0ECA  3063 	C$main.c$584$2$222	= .
                           3064 	.globl	C$main.c$584$2$222
                           3065 ;main.c:584: for (; !start_pressed; frame++)
   0ECA 3Ar17r00      [13] 3066 	ld	a,(#_start_pressed + 0)
   0ECD B7            [ 4] 3067 	or	a, a
   0ECE C2rB4r0F      [10] 3068 	jp	NZ, 00114$
                     0ED1  3069 	C$main.c$586$3$223	= .
                           3070 	.globl	C$main.c$586$3$223
                           3071 ;main.c:586: vsync_keycheck();
   0ED1 C5            [11] 3072 	push	bc
   0ED2 CDr82r00      [17] 3073 	call	_vsync_keycheck
   0ED5 C1            [10] 3074 	pop	bc
                     0ED6  3075 	C$main.c$588$3$223	= .
                           3076 	.globl	C$main.c$588$3$223
                           3077 ;main.c:588: if (nextEvent && (nextEvent->frame < frame))
   0ED6 78            [ 4] 3078 	ld	a, b
   0ED7 B1            [ 4] 3079 	or	a,c
   0ED8 CArA4r0F      [10] 3080 	jp	Z, 00117$
   0EDB 69            [ 4] 3081 	ld	l, c
   0EDC 60            [ 4] 3082 	ld	h, b
   0EDD 5E            [ 7] 3083 	ld	e, (hl)
   0EDE 23            [ 6] 3084 	inc	hl
   0EDF 56            [ 7] 3085 	ld	d, (hl)
   0EE0 21r1Ar00      [10] 3086 	ld	hl, #_runScript_frame_1_221
   0EE3 7B            [ 4] 3087 	ld	a, e
   0EE4 96            [ 7] 3088 	sub	a, (hl)
   0EE5 7A            [ 4] 3089 	ld	a, d
   0EE6 23            [ 6] 3090 	inc	hl
   0EE7 9E            [ 7] 3091 	sbc	a, (hl)
   0EE8 D2rA4r0F      [10] 3092 	jp	NC, 00117$
                     0EEB  3093 	C$main.c$590$4$224	= .
                           3094 	.globl	C$main.c$590$4$224
                           3095 ;main.c:590: if (nextEvent->evtype != EVTYPE_END)
   0EEB 69            [ 4] 3096 	ld	l, c
   0EEC 60            [ 4] 3097 	ld	h, b
   0EED 23            [ 6] 3098 	inc	hl
   0EEE 23            [ 6] 3099 	inc	hl
   0EEF 7E            [ 7] 3100 	ld	a, (hl)
   0EF0 FE 04         [ 7] 3101 	cp	a, #0x04
   0EF2 CAr9Br0F      [10] 3102 	jp	Z,00109$
                     0EF5  3103 	C$main.c$593$5$225	= .
                           3104 	.globl	C$main.c$593$5$225
                           3105 ;main.c:593: switch (nextEvent->evtype)
   0EF5 B7            [ 4] 3106 	or	a, a
   0EF6 28 0F         [12] 3107 	jr	Z,00101$
   0EF8 FE 01         [ 7] 3108 	cp	a, #0x01
   0EFA 28 58         [12] 3109 	jr	Z,00102$
   0EFC FE 02         [ 7] 3110 	cp	a, #0x02
   0EFE 28 5F         [12] 3111 	jr	Z,00103$
   0F00 D6 03         [ 7] 3112 	sub	a, #0x03
   0F02 28 67         [12] 3113 	jr	Z,00104$
   0F04 C3r93r0F      [10] 3114 	jp	00107$
                     0F07  3115 	C$main.c$595$6$226	= .
                           3116 	.globl	C$main.c$595$6$226
                           3117 ;main.c:595: case EVTYPE_DRAWSTRING:
   0F07                    3118 00101$:
                     0F07  3119 	C$main.c$596$6$226	= .
                           3120 	.globl	C$main.c$596$6$226
                           3121 ;main.c:596: pen_x = nextEvent->x;
   0F07 69            [ 4] 3122 	ld	l, c
   0F08 60            [ 4] 3123 	ld	h, b
   0F09 11 05 00      [10] 3124 	ld	de, #0x0005
   0F0C 19            [11] 3125 	add	hl, de
   0F0D 5E            [ 7] 3126 	ld	e, (hl)
   0F0E 23            [ 6] 3127 	inc	hl
   0F0F 56            [ 7] 3128 	ld	d, (hl)
   0F10 21r00r00      [10] 3129 	ld	hl,#_pen_x + 0
   0F13 73            [ 7] 3130 	ld	(hl), e
                     0F14  3131 	C$main.c$597$6$226	= .
                           3132 	.globl	C$main.c$597$6$226
                           3133 ;main.c:597: pen_y = nextEvent->y;
   0F14 69            [ 4] 3134 	ld	l, c
   0F15 60            [ 4] 3135 	ld	h, b
   0F16 11 07 00      [10] 3136 	ld	de, #0x0007
   0F19 19            [11] 3137 	add	hl, de
   0F1A 5E            [ 7] 3138 	ld	e, (hl)
   0F1B 23            [ 6] 3139 	inc	hl
   0F1C 56            [ 7] 3140 	ld	d, (hl)
   0F1D 21r00r00      [10] 3141 	ld	hl,#_pen_y + 0
   0F20 73            [ 7] 3142 	ld	(hl), e
                     0F21  3143 	C$main.c$599$6$226	= .
                           3144 	.globl	C$main.c$599$6$226
                           3145 ;main.c:599: drawing = 1;
   0F21 21r00r00      [10] 3146 	ld	hl,#_drawing + 0
   0F24 36 01         [10] 3147 	ld	(hl), #0x01
                     0F26  3148 	C$main.c$600$6$226	= .
                           3149 	.globl	C$main.c$600$6$226
                           3150 ;main.c:600: fill_mode = 1;
   0F26 21r02r00      [10] 3151 	ld	hl,#_fill_mode + 0
   0F29 36 01         [10] 3152 	ld	(hl), #0x01
                     0F2B  3153 	C$main.c$601$6$226	= .
                           3154 	.globl	C$main.c$601$6$226
                           3155 ;main.c:601: drawString(nextEvent->str, nextEvent->scale);
   0F2B 69            [ 4] 3156 	ld	l, c
   0F2C 60            [ 4] 3157 	ld	h, b
   0F2D 11 09 00      [10] 3158 	ld	de, #0x0009
   0F30 19            [11] 3159 	add	hl, de
   0F31 5E            [ 7] 3160 	ld	e, (hl)
   0F32 23            [ 6] 3161 	inc	hl
   0F33 56            [ 7] 3162 	ld	d, (hl)
   0F34 69            [ 4] 3163 	ld	l, c
   0F35 60            [ 4] 3164 	ld	h, b
   0F36 23            [ 6] 3165 	inc	hl
   0F37 23            [ 6] 3166 	inc	hl
   0F38 23            [ 6] 3167 	inc	hl
   0F39 7E            [ 7] 3168 	ld	a, (hl)
   0F3A 23            [ 6] 3169 	inc	hl
   0F3B 66            [ 7] 3170 	ld	h, (hl)
   0F3C 6F            [ 4] 3171 	ld	l, a
   0F3D C5            [11] 3172 	push	bc
   0F3E 7B            [ 4] 3173 	ld	a, e
   0F3F F5            [11] 3174 	push	af
   0F40 33            [ 6] 3175 	inc	sp
   0F41 E5            [11] 3176 	push	hl
   0F42 CDr00r00      [17] 3177 	call	_drawString
   0F45 F1            [10] 3178 	pop	af
   0F46 33            [ 6] 3179 	inc	sp
   0F47 C1            [10] 3180 	pop	bc
                     0F48  3181 	C$main.c$602$6$226	= .
                           3182 	.globl	C$main.c$602$6$226
                           3183 ;main.c:602: drawing = 0;
   0F48 21r00r00      [10] 3184 	ld	hl,#_drawing + 0
   0F4B 36 00         [10] 3185 	ld	(hl), #0x00
                     0F4D  3186 	C$main.c$603$6$226	= .
                           3187 	.globl	C$main.c$603$6$226
                           3188 ;main.c:603: fill_mode = 0;
   0F4D 21r02r00      [10] 3189 	ld	hl,#_fill_mode + 0
   0F50 36 00         [10] 3190 	ld	(hl), #0x00
                     0F52  3191 	C$main.c$604$6$226	= .
                           3192 	.globl	C$main.c$604$6$226
                           3193 ;main.c:604: break;
   0F52 18 3F         [12] 3194 	jr	00107$
                     0F54  3195 	C$main.c$606$6$226	= .
                           3196 	.globl	C$main.c$606$6$226
                           3197 ;main.c:606: case EVTYPE_CLEAR:
   0F54                    3198 00102$:
                     0F54  3199 	C$main.c$607$6$226	= .
                           3200 	.globl	C$main.c$607$6$226
                           3201 ;main.c:607: clearDisplay(0);
   0F54 C5            [11] 3202 	push	bc
   0F55 AF            [ 4] 3203 	xor	a, a
   0F56 F5            [11] 3204 	push	af
   0F57 33            [ 6] 3205 	inc	sp
   0F58 CDr54r01      [17] 3206 	call	_clearDisplay
   0F5B 33            [ 6] 3207 	inc	sp
   0F5C C1            [10] 3208 	pop	bc
                     0F5D  3209 	C$main.c$608$6$226	= .
                           3210 	.globl	C$main.c$608$6$226
                           3211 ;main.c:608: break;
   0F5D 18 34         [12] 3212 	jr	00107$
                     0F5F  3213 	C$main.c$610$6$226	= .
                           3214 	.globl	C$main.c$610$6$226
                           3215 ;main.c:610: case EVTYPE_CLEAR_FULL:
   0F5F                    3216 00103$:
                     0F5F  3217 	C$main.c$611$6$226	= .
                           3218 	.globl	C$main.c$611$6$226
                           3219 ;main.c:611: clearDisplay(1);
   0F5F C5            [11] 3220 	push	bc
   0F60 3E 01         [ 7] 3221 	ld	a, #0x01
   0F62 F5            [11] 3222 	push	af
   0F63 33            [ 6] 3223 	inc	sp
   0F64 CDr54r01      [17] 3224 	call	_clearDisplay
   0F67 33            [ 6] 3225 	inc	sp
   0F68 C1            [10] 3226 	pop	bc
                     0F69  3227 	C$main.c$612$6$226	= .
                           3228 	.globl	C$main.c$612$6$226
                           3229 ;main.c:612: break;
   0F69 18 28         [12] 3230 	jr	00107$
                     0F6B  3231 	C$main.c$614$6$226	= .
                           3232 	.globl	C$main.c$614$6$226
                           3233 ;main.c:614: case EVTYPE_FN:
   0F6B                    3234 00104$:
                     0F6B  3235 	C$main.c$615$6$226	= .
                           3236 	.globl	C$main.c$615$6$226
                           3237 ;main.c:615: drawing = 1;
   0F6B 21r00r00      [10] 3238 	ld	hl,#_drawing + 0
   0F6E 36 01         [10] 3239 	ld	(hl), #0x01
                     0F70  3240 	C$main.c$616$6$226	= .
                           3241 	.globl	C$main.c$616$6$226
                           3242 ;main.c:616: fill_mode = 1;
   0F70 21r02r00      [10] 3243 	ld	hl,#_fill_mode + 0
   0F73 36 01         [10] 3244 	ld	(hl), #0x01
                     0F75  3245 	C$main.c$617$6$226	= .
                           3246 	.globl	C$main.c$617$6$226
                           3247 ;main.c:617: if (nextEvent->fn)
   0F75 C5            [11] 3248 	push	bc
   0F76 FD E1         [14] 3249 	pop	iy
   0F78 FD 6E 0B      [19] 3250 	ld	l, 11 (iy)
   0F7B FD 66 0C      [19] 3251 	ld	h, 12 (iy)
   0F7E 7C            [ 4] 3252 	ld	a, h
   0F7F B5            [ 4] 3253 	or	a,l
   0F80 28 07         [12] 3254 	jr	Z,00106$
                     0F82  3255 	C$main.c$619$7$227	= .
                           3256 	.globl	C$main.c$619$7$227
                           3257 ;main.c:619: nextEvent->fn(nextEvent);
   0F82 C5            [11] 3258 	push	bc
   0F83 C5            [11] 3259 	push	bc
   0F84 CDr00r00      [17] 3260 	call	___sdcc_call_hl
   0F87 F1            [10] 3261 	pop	af
   0F88 C1            [10] 3262 	pop	bc
   0F89                    3263 00106$:
                     0F89  3264 	C$main.c$621$6$226	= .
                           3265 	.globl	C$main.c$621$6$226
                           3266 ;main.c:621: drawing = 0;
   0F89 21r00r00      [10] 3267 	ld	hl,#_drawing + 0
   0F8C 36 00         [10] 3268 	ld	(hl), #0x00
                     0F8E  3269 	C$main.c$622$6$226	= .
                           3270 	.globl	C$main.c$622$6$226
                           3271 ;main.c:622: fill_mode = 0;
   0F8E 21r02r00      [10] 3272 	ld	hl,#_fill_mode + 0
   0F91 36 00         [10] 3273 	ld	(hl), #0x00
                     0F93  3274 	C$main.c$624$5$225	= .
                           3275 	.globl	C$main.c$624$5$225
                           3276 ;main.c:624: }
   0F93                    3277 00107$:
                     0F93  3278 	C$main.c$625$5$225	= .
                           3279 	.globl	C$main.c$625$5$225
                           3280 ;main.c:625: nextEvent++;
   0F93 21 0D 00      [10] 3281 	ld	hl, #0x000d
   0F96 09            [11] 3282 	add	hl,bc
   0F97 4D            [ 4] 3283 	ld	c, l
   0F98 44            [ 4] 3284 	ld	b, h
   0F99 18 09         [12] 3285 	jr	00117$
   0F9B                    3286 00109$:
                     0F9B  3287 	C$main.c$629$5$228	= .
                           3288 	.globl	C$main.c$629$5$228
                           3289 ;main.c:629: clearDisplay(1);
   0F9B 3E 01         [ 7] 3290 	ld	a, #0x01
   0F9D F5            [11] 3291 	push	af
   0F9E 33            [ 6] 3292 	inc	sp
   0F9F CDr54r01      [17] 3293 	call	_clearDisplay
   0FA2 33            [ 6] 3294 	inc	sp
                     0FA3  3295 	C$main.c$631$5$228	= .
                           3296 	.globl	C$main.c$631$5$228
                           3297 ;main.c:631: return;
   0FA3 C9            [10] 3298 	ret
   0FA4                    3299 00117$:
                     0FA4  3300 	C$main.c$584$2$222	= .
                           3301 	.globl	C$main.c$584$2$222
                           3302 ;main.c:584: for (; !start_pressed; frame++)
   0FA4 FD 21r1Ar00   [14] 3303 	ld	iy, #_runScript_frame_1_221
   0FA8 FD 34 00      [23] 3304 	inc	0 (iy)
   0FAB C2rCAr0E      [10] 3305 	jp	NZ,00116$
   0FAE FD 34 01      [23] 3306 	inc	1 (iy)
   0FB1 C3rCAr0E      [10] 3307 	jp	00116$
   0FB4                    3308 00114$:
                     0FB4  3309 	C$main.c$636$1$221	= .
                           3310 	.globl	C$main.c$636$1$221
                           3311 ;main.c:636: clearDisplay(1);
   0FB4 3E 01         [ 7] 3312 	ld	a, #0x01
   0FB6 F5            [11] 3313 	push	af
   0FB7 33            [ 6] 3314 	inc	sp
   0FB8 CDr54r01      [17] 3315 	call	_clearDisplay
   0FBB 33            [ 6] 3316 	inc	sp
                     0FBC  3317 	C$main.c$637$1$221	= .
                           3318 	.globl	C$main.c$637$1$221
                           3319 ;main.c:637: nextEvent = NULL;
                     0FBC  3320 	C$main.c$638$1$221	= .
                           3321 	.globl	C$main.c$638$1$221
                     0FBC  3322 	XG$runScript$0$0	= .
                           3323 	.globl	XG$runScript$0$0
   0FBC C9            [10] 3324 	ret
                     0FBD  3325 	Fmain$inputDiag_printDevice$0$0	= .
                           3326 	.globl	Fmain$inputDiag_printDevice$0$0
                     0FBD  3327 	C$main.c$640$1$221	= .
                           3328 	.globl	C$main.c$640$1$221
                           3329 ;main.c:640: static void inputDiag_printDevice(const char *title, uint8_t startcol, const inlib_data *dat)
                           3330 ;	---------------------------------
                           3331 ; Function inputDiag_printDevice
                           3332 ; ---------------------------------
   0FBD                    3333 _inputDiag_printDevice:
   0FBD DD E5         [15] 3334 	push	ix
   0FBF DD 21 00 00   [14] 3335 	ld	ix,#0
   0FC3 DD 39         [15] 3336 	add	ix,sp
   0FC5 21 F9 FF      [10] 3337 	ld	hl, #-7
   0FC8 39            [11] 3338 	add	hl, sp
   0FC9 F9            [ 6] 3339 	ld	sp, hl
                     0FCA  3340 	C$main.c$644$1$230	= .
                           3341 	.globl	C$main.c$644$1$230
                           3342 ;main.c:644: SMS_setNextTileatXY(startcol, 8);
   0FCA DD 6E 06      [19] 3343 	ld	l, 6 (ix)
   0FCD 26 00         [ 7] 3344 	ld	h, #0x00
   0FCF 29            [11] 3345 	add	hl, hl
   0FD0 EB            [ 4] 3346 	ex	de,hl
   0FD1 6B            [ 4] 3347 	ld	l, e
   0FD2 7A            [ 4] 3348 	ld	a, d
   0FD3 F6 7A         [ 7] 3349 	or	a, #0x7a
   0FD5 67            [ 4] 3350 	ld	h, a
   0FD6 CF            [11] 3351 	rst	#0x08
                     0FD7  3352 	C$main.c$645$1$230	= .
                           3353 	.globl	C$main.c$645$1$230
                           3354 ;main.c:645: printf(title);
   0FD7 D5            [11] 3355 	push	de
   0FD8 DD 6E 04      [19] 3356 	ld	l,4 (ix)
   0FDB DD 66 05      [19] 3357 	ld	h,5 (ix)
   0FDE E5            [11] 3358 	push	hl
   0FDF CDr00r00      [17] 3359 	call	_printf
   0FE2 F1            [10] 3360 	pop	af
   0FE3 D1            [10] 3361 	pop	de
                     0FE4  3362 	C$main.c$647$1$230	= .
                           3363 	.globl	C$main.c$647$1$230
                           3364 ;main.c:647: SMS_setNextTileatXY(startcol, 10);
   0FE4 7B            [ 4] 3365 	ld	a, e
   0FE5 CB FF         [ 8] 3366 	set	7, a
   0FE7 6F            [ 4] 3367 	ld	l, a
   0FE8 7A            [ 4] 3368 	ld	a, d
   0FE9 F6 7A         [ 7] 3369 	or	a, #0x7a
   0FEB 67            [ 4] 3370 	ld	h, a
   0FEC CF            [11] 3371 	rst	#0x08
                     0FED  3372 	C$main.c$648$1$230	= .
                           3373 	.globl	C$main.c$648$1$230
                           3374 ;main.c:648: switch (dat->type)
   0FED DD 4E 07      [19] 3375 	ld	c,7 (ix)
   0FF0 DD 46 08      [19] 3376 	ld	b,8 (ix)
   0FF3 0A            [ 7] 3377 	ld	a, (bc)
   0FF4 DD 77 FD      [19] 3378 	ld	-3 (ix), a
   0FF7 3E 05         [ 7] 3379 	ld	a, #0x05
   0FF9 DD 96 FD      [19] 3380 	sub	a, -3 (ix)
   0FFC 38 31         [12] 3381 	jr	C,00101$
                     0FFE  3382 	C$main.c$655$1$230	= .
                           3383 	.globl	C$main.c$655$1$230
                           3384 ;main.c:655: SMS_setNextTileatXY(startcol, 11);
   0FFE 7B            [ 4] 3385 	ld	a, e
   0FFF F6 C0         [ 7] 3386 	or	a, #0xc0
   1001 DD 77 FE      [19] 3387 	ld	-2 (ix), a
   1004 7A            [ 4] 3388 	ld	a, d
   1005 F6 7A         [ 7] 3389 	or	a, #0x7a
   1007 DD 77 FF      [19] 3390 	ld	-1 (ix), a
                     100A  3391 	C$main.c$656$1$230	= .
                           3392 	.globl	C$main.c$656$1$230
                           3393 ;main.c:656: printf("Btn: %02x", dat->sms.buttons);
   100A 21 01 00      [10] 3394 	ld	hl, #0x0001
   100D 09            [11] 3395 	add	hl,bc
   100E E3            [19] 3396 	ex	(sp), hl
                     100F  3397 	C$main.c$648$1$230	= .
                           3398 	.globl	C$main.c$648$1$230
                           3399 ;main.c:648: switch (dat->type)
   100F D5            [11] 3400 	push	de
   1010 DD 5E FD      [19] 3401 	ld	e, -3 (ix)
   1013 16 00         [ 7] 3402 	ld	d, #0x00
   1015 21r1Dr10      [10] 3403 	ld	hl, #00115$
   1018 19            [11] 3404 	add	hl, de
   1019 19            [11] 3405 	add	hl, de
   101A 19            [11] 3406 	add	hl, de
   101B D1            [10] 3407 	pop	de
   101C E9            [ 4] 3408 	jp	(hl)
   101D                    3409 00115$:
   101D C3r3Ar10      [10] 3410 	jp	00102$
   1020 C3r5Br10      [10] 3411 	jp	00103$
   1023 C3rA7r10      [10] 3412 	jp	00104$
   1026 C3r22r11      [10] 3413 	jp	00105$
   1029 C3rC5r11      [10] 3414 	jp	00106$
   102C C3r3Fr12      [10] 3415 	jp	00107$
                     102F  3416 	C$main.c$650$2$231	= .
                           3417 	.globl	C$main.c$650$2$231
                           3418 ;main.c:650: default:
   102F                    3419 00101$:
                     102F  3420 	C$main.c$651$2$231	= .
                           3421 	.globl	C$main.c$651$2$231
                           3422 ;main.c:651: printf("Unknown");
   102F 21rB8r12      [10] 3423 	ld	hl, #___str_0
   1032 E5            [11] 3424 	push	hl
   1033 CDr00r00      [17] 3425 	call	_printf
   1036 F1            [10] 3426 	pop	af
                     1037  3427 	C$main.c$652$2$231	= .
                           3428 	.globl	C$main.c$652$2$231
                           3429 ;main.c:652: break;
   1037 C3rB3r12      [10] 3430 	jp	00109$
                     103A  3431 	C$main.c$653$2$231	= .
                           3432 	.globl	C$main.c$653$2$231
                           3433 ;main.c:653: case INLIB_TYPE_SMS:
   103A                    3434 00102$:
                     103A  3435 	C$main.c$654$2$231	= .
                           3436 	.globl	C$main.c$654$2$231
                           3437 ;main.c:654: printf("SMS Controller");
   103A 21rC0r12      [10] 3438 	ld	hl, #___str_1
   103D E5            [11] 3439 	push	hl
   103E CDr00r00      [17] 3440 	call	_printf
   1041 F1            [10] 3441 	pop	af
                     1042  3442 	C$main.c$655$2$231	= .
                           3443 	.globl	C$main.c$655$2$231
                           3444 ;main.c:655: SMS_setNextTileatXY(startcol, 11);
   1042 DD 6E FE      [19] 3445 	ld	l,-2 (ix)
   1045 DD 66 FF      [19] 3446 	ld	h,-1 (ix)
   1048 CF            [11] 3447 	rst	#0x08
                     1049  3448 	C$main.c$656$2$231	= .
                           3449 	.globl	C$main.c$656$2$231
                           3450 ;main.c:656: printf("Btn: %02x", dat->sms.buttons);
   1049 E1            [10] 3451 	pop	hl
   104A E5            [11] 3452 	push	hl
   104B 4E            [ 7] 3453 	ld	c, (hl)
   104C 06 00         [ 7] 3454 	ld	b, #0x00
   104E C5            [11] 3455 	push	bc
   104F 21rCFr12      [10] 3456 	ld	hl, #___str_2
   1052 E5            [11] 3457 	push	hl
   1053 CDr00r00      [17] 3458 	call	_printf
   1056 F1            [10] 3459 	pop	af
   1057 F1            [10] 3460 	pop	af
                     1058  3461 	C$main.c$657$2$231	= .
                           3462 	.globl	C$main.c$657$2$231
                           3463 ;main.c:657: break;
   1058 C3rB3r12      [10] 3464 	jp	00109$
                     105B  3465 	C$main.c$658$2$231	= .
                           3466 	.globl	C$main.c$658$2$231
                           3467 ;main.c:658: case INLIB_TYPE_PADDLE:
   105B                    3468 00103$:
                     105B  3469 	C$main.c$659$2$231	= .
                           3470 	.globl	C$main.c$659$2$231
                           3471 ;main.c:659: printf("SMS Paddle    ");
   105B C5            [11] 3472 	push	bc
   105C D5            [11] 3473 	push	de
   105D 21rD9r12      [10] 3474 	ld	hl, #___str_3
   1060 E5            [11] 3475 	push	hl
   1061 CDr00r00      [17] 3476 	call	_printf
   1064 F1            [10] 3477 	pop	af
   1065 D1            [10] 3478 	pop	de
   1066 DD 6E FE      [19] 3479 	ld	l,-2 (ix)
   1069 DD 66 FF      [19] 3480 	ld	h,-1 (ix)
   106C CF            [11] 3481 	rst	#0x08
   106D C1            [10] 3482 	pop	bc
                     106E  3483 	C$main.c$661$2$231	= .
                           3484 	.globl	C$main.c$661$2$231
                           3485 ;main.c:661: printf("Btn: %02x", dat->paddle.buttons);
   106E E1            [10] 3486 	pop	hl
   106F E5            [11] 3487 	push	hl
   1070 6E            [ 7] 3488 	ld	l, (hl)
   1071 DD 75 FB      [19] 3489 	ld	-5 (ix), l
   1074 DD 36 FC 00   [19] 3490 	ld	-4 (ix), #0x00
   1078 C5            [11] 3491 	push	bc
   1079 D5            [11] 3492 	push	de
   107A DD 6E FB      [19] 3493 	ld	l,-5 (ix)
   107D DD 66 FC      [19] 3494 	ld	h,-4 (ix)
   1080 E5            [11] 3495 	push	hl
   1081 21rCFr12      [10] 3496 	ld	hl, #___str_2
   1084 E5            [11] 3497 	push	hl
   1085 CDr00r00      [17] 3498 	call	_printf
   1088 F1            [10] 3499 	pop	af
   1089 F1            [10] 3500 	pop	af
   108A D1            [10] 3501 	pop	de
   108B C1            [10] 3502 	pop	bc
                     108C  3503 	C$main.c$662$2$231	= .
                           3504 	.globl	C$main.c$662$2$231
                           3505 ;main.c:662: SMS_setNextTileatXY(startcol, 12);
   108C 7A            [ 4] 3506 	ld	a, d
   108D F6 7B         [ 7] 3507 	or	a, #0x7b
   108F 67            [ 4] 3508 	ld	h, a
   1090 C5            [11] 3509 	push	bc
   1091 6B            [ 4] 3510 	ld	l, e
   1092 CF            [11] 3511 	rst	#0x08
                     1093  3512 	C$main.c$663$2$231	= .
                           3513 	.globl	C$main.c$663$2$231
                           3514 ;main.c:663: printf("Val: %02x", dat->paddle.value);
   1093 E1            [10] 3515 	pop	hl
   1094 23            [ 6] 3516 	inc	hl
   1095 23            [ 6] 3517 	inc	hl
   1096 23            [ 6] 3518 	inc	hl
   1097 4E            [ 7] 3519 	ld	c, (hl)
   1098 06 00         [ 7] 3520 	ld	b, #0x00
   109A C5            [11] 3521 	push	bc
   109B 21rE8r12      [10] 3522 	ld	hl, #___str_4
   109E E5            [11] 3523 	push	hl
   109F CDr00r00      [17] 3524 	call	_printf
   10A2 F1            [10] 3525 	pop	af
   10A3 F1            [10] 3526 	pop	af
                     10A4  3527 	C$main.c$664$2$231	= .
                           3528 	.globl	C$main.c$664$2$231
                           3529 ;main.c:664: break;
   10A4 C3rB3r12      [10] 3530 	jp	00109$
                     10A7  3531 	C$main.c$665$2$231	= .
                           3532 	.globl	C$main.c$665$2$231
                           3533 ;main.c:665: case INLIB_TYPE_MD_MOUSE:
   10A7                    3534 00104$:
                     10A7  3535 	C$main.c$666$2$231	= .
                           3536 	.globl	C$main.c$666$2$231
                           3537 ;main.c:666: printf("MD mouse      ");
   10A7 C5            [11] 3538 	push	bc
   10A8 D5            [11] 3539 	push	de
   10A9 21rF2r12      [10] 3540 	ld	hl, #___str_5
   10AC E5            [11] 3541 	push	hl
   10AD CDr00r00      [17] 3542 	call	_printf
   10B0 F1            [10] 3543 	pop	af
   10B1 D1            [10] 3544 	pop	de
   10B2 DD 6E FE      [19] 3545 	ld	l,-2 (ix)
   10B5 DD 66 FF      [19] 3546 	ld	h,-1 (ix)
   10B8 CF            [11] 3547 	rst	#0x08
   10B9 C1            [10] 3548 	pop	bc
                     10BA  3549 	C$main.c$668$2$231	= .
                           3550 	.globl	C$main.c$668$2$231
                           3551 ;main.c:668: printf("Btn: %02x", dat->mdmouse.buttons);
   10BA E1            [10] 3552 	pop	hl
   10BB E5            [11] 3553 	push	hl
   10BC 6E            [ 7] 3554 	ld	l, (hl)
   10BD DD 75 FB      [19] 3555 	ld	-5 (ix), l
   10C0 DD 36 FC 00   [19] 3556 	ld	-4 (ix), #0x00
   10C4 C5            [11] 3557 	push	bc
   10C5 D5            [11] 3558 	push	de
   10C6 DD 6E FB      [19] 3559 	ld	l,-5 (ix)
   10C9 DD 66 FC      [19] 3560 	ld	h,-4 (ix)
   10CC E5            [11] 3561 	push	hl
   10CD 21rCFr12      [10] 3562 	ld	hl, #___str_2
   10D0 E5            [11] 3563 	push	hl
   10D1 CDr00r00      [17] 3564 	call	_printf
   10D4 F1            [10] 3565 	pop	af
   10D5 F1            [10] 3566 	pop	af
   10D6 D1            [10] 3567 	pop	de
   10D7 C1            [10] 3568 	pop	bc
                     10D8  3569 	C$main.c$669$2$231	= .
                           3570 	.globl	C$main.c$669$2$231
                           3571 ;main.c:669: SMS_setNextTileatXY(startcol, 12);
   10D8 6B            [ 4] 3572 	ld	l, e
   10D9 7A            [ 4] 3573 	ld	a, d
   10DA F6 7B         [ 7] 3574 	or	a, #0x7b
   10DC 67            [ 4] 3575 	ld	h, a
   10DD C5            [11] 3576 	push	bc
   10DE CF            [11] 3577 	rst	#0x08
   10DF C1            [10] 3578 	pop	bc
                     10E0  3579 	C$main.c$670$2$231	= .
                           3580 	.globl	C$main.c$670$2$231
                           3581 ;main.c:670: printf("X: %d  ", dat->mdmouse.x);
   10E0 69            [ 4] 3582 	ld	l, c
   10E1 60            [ 4] 3583 	ld	h, b
   10E2 23            [ 6] 3584 	inc	hl
   10E3 23            [ 6] 3585 	inc	hl
   10E4 23            [ 6] 3586 	inc	hl
   10E5 7E            [ 7] 3587 	ld	a, (hl)
   10E6 DD 77 FB      [19] 3588 	ld	-5 (ix), a
   10E9 17            [ 4] 3589 	rla
   10EA 9F            [ 4] 3590 	sbc	a, a
   10EB DD 77 FC      [19] 3591 	ld	-4 (ix), a
   10EE C5            [11] 3592 	push	bc
   10EF D5            [11] 3593 	push	de
   10F0 DD 6E FB      [19] 3594 	ld	l,-5 (ix)
   10F3 DD 66 FC      [19] 3595 	ld	h,-4 (ix)
   10F6 E5            [11] 3596 	push	hl
   10F7 21r01r13      [10] 3597 	ld	hl, #___str_6
   10FA E5            [11] 3598 	push	hl
   10FB CDr00r00      [17] 3599 	call	_printf
   10FE F1            [10] 3600 	pop	af
   10FF F1            [10] 3601 	pop	af
   1100 D1            [10] 3602 	pop	de
   1101 C1            [10] 3603 	pop	bc
                     1102  3604 	C$main.c$671$2$231	= .
                           3605 	.globl	C$main.c$671$2$231
                           3606 ;main.c:671: SMS_setNextTileatXY(startcol, 13);
   1102 7B            [ 4] 3607 	ld	a, e
   1103 CB F7         [ 8] 3608 	set	6, a
   1105 6F            [ 4] 3609 	ld	l, a
   1106 7A            [ 4] 3610 	ld	a, d
   1107 F6 7B         [ 7] 3611 	or	a, #0x7b
   1109 67            [ 4] 3612 	ld	h, a
   110A C5            [11] 3613 	push	bc
   110B CF            [11] 3614 	rst	#0x08
   110C FD E1         [14] 3615 	pop	iy
   110E FD 4E 04      [19] 3616 	ld	c, 4 (iy)
   1111 79            [ 4] 3617 	ld	a, c
   1112 17            [ 4] 3618 	rla
   1113 9F            [ 4] 3619 	sbc	a, a
   1114 47            [ 4] 3620 	ld	b, a
   1115 C5            [11] 3621 	push	bc
   1116 21r09r13      [10] 3622 	ld	hl, #___str_7
   1119 E5            [11] 3623 	push	hl
   111A CDr00r00      [17] 3624 	call	_printf
   111D F1            [10] 3625 	pop	af
   111E F1            [10] 3626 	pop	af
                     111F  3627 	C$main.c$673$2$231	= .
                           3628 	.globl	C$main.c$673$2$231
                           3629 ;main.c:673: break;
   111F C3rB3r12      [10] 3630 	jp	00109$
                     1122  3631 	C$main.c$674$2$231	= .
                           3632 	.globl	C$main.c$674$2$231
                           3633 ;main.c:674: case INLIB_TYPE_GFX_V2:
   1122                    3634 00105$:
                     1122  3635 	C$main.c$675$2$231	= .
                           3636 	.globl	C$main.c$675$2$231
                           3637 ;main.c:675: printf("GFX. BRD. V2  ");
   1122 C5            [11] 3638 	push	bc
   1123 D5            [11] 3639 	push	de
   1124 21r11r13      [10] 3640 	ld	hl, #___str_8
   1127 E5            [11] 3641 	push	hl
   1128 CDr00r00      [17] 3642 	call	_printf
   112B F1            [10] 3643 	pop	af
   112C D1            [10] 3644 	pop	de
   112D DD 6E FE      [19] 3645 	ld	l,-2 (ix)
   1130 DD 66 FF      [19] 3646 	ld	h,-1 (ix)
   1133 CF            [11] 3647 	rst	#0x08
   1134 C1            [10] 3648 	pop	bc
                     1135  3649 	C$main.c$677$2$231	= .
                           3650 	.globl	C$main.c$677$2$231
                           3651 ;main.c:677: printf("Btn: %02x", dat->gfx2.buttons);
   1135 E1            [10] 3652 	pop	hl
   1136 E5            [11] 3653 	push	hl
   1137 6E            [ 7] 3654 	ld	l, (hl)
   1138 DD 75 FB      [19] 3655 	ld	-5 (ix), l
   113B DD 36 FC 00   [19] 3656 	ld	-4 (ix), #0x00
   113F C5            [11] 3657 	push	bc
   1140 D5            [11] 3658 	push	de
   1141 DD 6E FB      [19] 3659 	ld	l,-5 (ix)
   1144 DD 66 FC      [19] 3660 	ld	h,-4 (ix)
   1147 E5            [11] 3661 	push	hl
   1148 21rCFr12      [10] 3662 	ld	hl, #___str_2
   114B E5            [11] 3663 	push	hl
   114C CDr00r00      [17] 3664 	call	_printf
   114F F1            [10] 3665 	pop	af
   1150 F1            [10] 3666 	pop	af
   1151 D1            [10] 3667 	pop	de
   1152 C1            [10] 3668 	pop	bc
                     1153  3669 	C$main.c$678$2$231	= .
                           3670 	.globl	C$main.c$678$2$231
                           3671 ;main.c:678: SMS_setNextTileatXY(startcol, 12);
   1153 6B            [ 4] 3672 	ld	l, e
   1154 7A            [ 4] 3673 	ld	a, d
   1155 F6 7B         [ 7] 3674 	or	a, #0x7b
   1157 67            [ 4] 3675 	ld	h, a
   1158 C5            [11] 3676 	push	bc
   1159 CF            [11] 3677 	rst	#0x08
   115A C1            [10] 3678 	pop	bc
                     115B  3679 	C$main.c$679$2$231	= .
                           3680 	.globl	C$main.c$679$2$231
                           3681 ;main.c:679: printf("X: %d  ", dat->gfx2.x);
   115B 69            [ 4] 3682 	ld	l, c
   115C 60            [ 4] 3683 	ld	h, b
   115D 23            [ 6] 3684 	inc	hl
   115E 23            [ 6] 3685 	inc	hl
   115F 23            [ 6] 3686 	inc	hl
   1160 6E            [ 7] 3687 	ld	l, (hl)
   1161 DD 75 FB      [19] 3688 	ld	-5 (ix), l
   1164 DD 36 FC 00   [19] 3689 	ld	-4 (ix), #0x00
   1168 C5            [11] 3690 	push	bc
   1169 D5            [11] 3691 	push	de
   116A DD 6E FB      [19] 3692 	ld	l,-5 (ix)
   116D DD 66 FC      [19] 3693 	ld	h,-4 (ix)
   1170 E5            [11] 3694 	push	hl
   1171 21r01r13      [10] 3695 	ld	hl, #___str_6
   1174 E5            [11] 3696 	push	hl
   1175 CDr00r00      [17] 3697 	call	_printf
   1178 F1            [10] 3698 	pop	af
   1179 F1            [10] 3699 	pop	af
   117A D1            [10] 3700 	pop	de
   117B C1            [10] 3701 	pop	bc
                     117C  3702 	C$main.c$680$2$231	= .
                           3703 	.globl	C$main.c$680$2$231
                           3704 ;main.c:680: SMS_setNextTileatXY(startcol, 13);
   117C 7B            [ 4] 3705 	ld	a, e
   117D CB F7         [ 8] 3706 	set	6, a
   117F 6F            [ 4] 3707 	ld	l, a
   1180 7A            [ 4] 3708 	ld	a, d
   1181 F6 7B         [ 7] 3709 	or	a, #0x7b
   1183 67            [ 4] 3710 	ld	h, a
   1184 C5            [11] 3711 	push	bc
   1185 CF            [11] 3712 	rst	#0x08
   1186 C1            [10] 3713 	pop	bc
                     1187  3714 	C$main.c$681$2$231	= .
                           3715 	.globl	C$main.c$681$2$231
                           3716 ;main.c:681: printf("Y: %d  ", dat->gfx2.y);
   1187 C5            [11] 3717 	push	bc
   1188 FD E1         [14] 3718 	pop	iy
   118A FD 6E 04      [19] 3719 	ld	l, 4 (iy)
   118D DD 75 FB      [19] 3720 	ld	-5 (ix), l
   1190 DD 36 FC 00   [19] 3721 	ld	-4 (ix), #0x00
   1194 C5            [11] 3722 	push	bc
   1195 D5            [11] 3723 	push	de
   1196 DD 6E FB      [19] 3724 	ld	l,-5 (ix)
   1199 DD 66 FC      [19] 3725 	ld	h,-4 (ix)
   119C E5            [11] 3726 	push	hl
   119D 21r09r13      [10] 3727 	ld	hl, #___str_7
   11A0 E5            [11] 3728 	push	hl
   11A1 CDr00r00      [17] 3729 	call	_printf
   11A4 F1            [10] 3730 	pop	af
   11A5 F1            [10] 3731 	pop	af
   11A6 D1            [10] 3732 	pop	de
   11A7 C1            [10] 3733 	pop	bc
                     11A8  3734 	C$main.c$682$2$231	= .
                           3735 	.globl	C$main.c$682$2$231
                           3736 ;main.c:682: SMS_setNextTileatXY(startcol, 14);
   11A8 7B            [ 4] 3737 	ld	a, e
   11A9 CB FF         [ 8] 3738 	set	7, a
   11AB 6F            [ 4] 3739 	ld	l, a
   11AC 7A            [ 4] 3740 	ld	a, d
   11AD F6 7B         [ 7] 3741 	or	a, #0x7b
   11AF 67            [ 4] 3742 	ld	h, a
   11B0 C5            [11] 3743 	push	bc
   11B1 CF            [11] 3744 	rst	#0x08
                     11B2  3745 	C$main.c$683$2$231	= .
                           3746 	.globl	C$main.c$683$2$231
                           3747 ;main.c:683: printf("P: %d  ", dat->gfx2.pressure);
   11B2 E1            [10] 3748 	pop	hl
   11B3 23            [ 6] 3749 	inc	hl
   11B4 23            [ 6] 3750 	inc	hl
   11B5 4E            [ 7] 3751 	ld	c, (hl)
   11B6 06 00         [ 7] 3752 	ld	b, #0x00
   11B8 C5            [11] 3753 	push	bc
   11B9 21r20r13      [10] 3754 	ld	hl, #___str_9
   11BC E5            [11] 3755 	push	hl
   11BD CDr00r00      [17] 3756 	call	_printf
   11C0 F1            [10] 3757 	pop	af
   11C1 F1            [10] 3758 	pop	af
                     11C2  3759 	C$main.c$684$2$231	= .
                           3760 	.globl	C$main.c$684$2$231
                           3761 ;main.c:684: break;
   11C2 C3rB3r12      [10] 3762 	jp	00109$
                     11C5  3763 	C$main.c$685$2$231	= .
                           3764 	.globl	C$main.c$685$2$231
                           3765 ;main.c:685: case INLIB_TYPE_SPORTSPAD:
   11C5                    3766 00106$:
                     11C5  3767 	C$main.c$686$2$231	= .
                           3768 	.globl	C$main.c$686$2$231
                           3769 ;main.c:686: printf("SPORTSPAD     ");
   11C5 C5            [11] 3770 	push	bc
   11C6 D5            [11] 3771 	push	de
   11C7 21r28r13      [10] 3772 	ld	hl, #___str_10
   11CA E5            [11] 3773 	push	hl
   11CB CDr00r00      [17] 3774 	call	_printf
   11CE F1            [10] 3775 	pop	af
   11CF D1            [10] 3776 	pop	de
   11D0 DD 6E FE      [19] 3777 	ld	l,-2 (ix)
   11D3 DD 66 FF      [19] 3778 	ld	h,-1 (ix)
   11D6 CF            [11] 3779 	rst	#0x08
   11D7 C1            [10] 3780 	pop	bc
                     11D8  3781 	C$main.c$688$2$231	= .
                           3782 	.globl	C$main.c$688$2$231
                           3783 ;main.c:688: printf("Btn: %02x", dat->spad.buttons);
   11D8 E1            [10] 3784 	pop	hl
   11D9 E5            [11] 3785 	push	hl
   11DA 6E            [ 7] 3786 	ld	l, (hl)
   11DB DD 75 FB      [19] 3787 	ld	-5 (ix), l
   11DE DD 36 FC 00   [19] 3788 	ld	-4 (ix), #0x00
   11E2 C5            [11] 3789 	push	bc
   11E3 D5            [11] 3790 	push	de
   11E4 DD 6E FB      [19] 3791 	ld	l,-5 (ix)
   11E7 DD 66 FC      [19] 3792 	ld	h,-4 (ix)
   11EA E5            [11] 3793 	push	hl
   11EB 21rCFr12      [10] 3794 	ld	hl, #___str_2
   11EE E5            [11] 3795 	push	hl
   11EF CDr00r00      [17] 3796 	call	_printf
   11F2 F1            [10] 3797 	pop	af
   11F3 F1            [10] 3798 	pop	af
   11F4 D1            [10] 3799 	pop	de
   11F5 C1            [10] 3800 	pop	bc
                     11F6  3801 	C$main.c$689$2$231	= .
                           3802 	.globl	C$main.c$689$2$231
                           3803 ;main.c:689: SMS_setNextTileatXY(startcol, 12);
   11F6 6B            [ 4] 3804 	ld	l, e
   11F7 7A            [ 4] 3805 	ld	a, d
   11F8 F6 7B         [ 7] 3806 	or	a, #0x7b
   11FA 67            [ 4] 3807 	ld	h, a
   11FB C5            [11] 3808 	push	bc
   11FC CF            [11] 3809 	rst	#0x08
   11FD C1            [10] 3810 	pop	bc
                     11FE  3811 	C$main.c$690$2$231	= .
                           3812 	.globl	C$main.c$690$2$231
                           3813 ;main.c:690: printf("X: %d  ", dat->spad.x);
   11FE 69            [ 4] 3814 	ld	l, c
   11FF 60            [ 4] 3815 	ld	h, b
   1200 23            [ 6] 3816 	inc	hl
   1201 23            [ 6] 3817 	inc	hl
   1202 23            [ 6] 3818 	inc	hl
   1203 7E            [ 7] 3819 	ld	a, (hl)
   1204 DD 77 FB      [19] 3820 	ld	-5 (ix), a
   1207 17            [ 4] 3821 	rla
   1208 9F            [ 4] 3822 	sbc	a, a
   1209 DD 77 FC      [19] 3823 	ld	-4 (ix), a
   120C C5            [11] 3824 	push	bc
   120D D5            [11] 3825 	push	de
   120E DD 6E FB      [19] 3826 	ld	l,-5 (ix)
   1211 DD 66 FC      [19] 3827 	ld	h,-4 (ix)
   1214 E5            [11] 3828 	push	hl
   1215 21r01r13      [10] 3829 	ld	hl, #___str_6
   1218 E5            [11] 3830 	push	hl
   1219 CDr00r00      [17] 3831 	call	_printf
   121C F1            [10] 3832 	pop	af
   121D F1            [10] 3833 	pop	af
   121E D1            [10] 3834 	pop	de
   121F C1            [10] 3835 	pop	bc
                     1220  3836 	C$main.c$691$2$231	= .
                           3837 	.globl	C$main.c$691$2$231
                           3838 ;main.c:691: SMS_setNextTileatXY(startcol, 13);
   1220 7B            [ 4] 3839 	ld	a, e
   1221 CB F7         [ 8] 3840 	set	6, a
   1223 6F            [ 4] 3841 	ld	l, a
   1224 7A            [ 4] 3842 	ld	a, d
   1225 F6 7B         [ 7] 3843 	or	a, #0x7b
   1227 67            [ 4] 3844 	ld	h, a
   1228 C5            [11] 3845 	push	bc
   1229 CF            [11] 3846 	rst	#0x08
   122A FD E1         [14] 3847 	pop	iy
   122C FD 4E 04      [19] 3848 	ld	c, 4 (iy)
   122F 79            [ 4] 3849 	ld	a, c
   1230 17            [ 4] 3850 	rla
   1231 9F            [ 4] 3851 	sbc	a, a
   1232 47            [ 4] 3852 	ld	b, a
   1233 C5            [11] 3853 	push	bc
   1234 21r09r13      [10] 3854 	ld	hl, #___str_7
   1237 E5            [11] 3855 	push	hl
   1238 CDr00r00      [17] 3856 	call	_printf
   123B F1            [10] 3857 	pop	af
   123C F1            [10] 3858 	pop	af
                     123D  3859 	C$main.c$693$2$231	= .
                           3860 	.globl	C$main.c$693$2$231
                           3861 ;main.c:693: break;
   123D 18 74         [12] 3862 	jr	00109$
                     123F  3863 	C$main.c$694$2$231	= .
                           3864 	.globl	C$main.c$694$2$231
                           3865 ;main.c:694: case INLIB_TYPE_LIGHT_PHASER:
   123F                    3866 00107$:
                     123F  3867 	C$main.c$695$2$231	= .
                           3868 	.globl	C$main.c$695$2$231
                           3869 ;main.c:695: printf("LIGHT PHASER  ");
   123F C5            [11] 3870 	push	bc
   1240 D5            [11] 3871 	push	de
   1241 21r37r13      [10] 3872 	ld	hl, #___str_11
   1244 E5            [11] 3873 	push	hl
   1245 CDr00r00      [17] 3874 	call	_printf
   1248 F1            [10] 3875 	pop	af
   1249 D1            [10] 3876 	pop	de
   124A DD 6E FE      [19] 3877 	ld	l,-2 (ix)
   124D DD 66 FF      [19] 3878 	ld	h,-1 (ix)
   1250 CF            [11] 3879 	rst	#0x08
   1251 C1            [10] 3880 	pop	bc
                     1252  3881 	C$main.c$697$2$231	= .
                           3882 	.globl	C$main.c$697$2$231
                           3883 ;main.c:697: printf("Btn: %02x", dat->phaser.buttons);
   1252 E1            [10] 3884 	pop	hl
   1253 E5            [11] 3885 	push	hl
   1254 6E            [ 7] 3886 	ld	l, (hl)
   1255 DD 75 FB      [19] 3887 	ld	-5 (ix), l
   1258 DD 36 FC 00   [19] 3888 	ld	-4 (ix), #0x00
   125C C5            [11] 3889 	push	bc
   125D D5            [11] 3890 	push	de
   125E DD 6E FB      [19] 3891 	ld	l,-5 (ix)
   1261 DD 66 FC      [19] 3892 	ld	h,-4 (ix)
   1264 E5            [11] 3893 	push	hl
   1265 21rCFr12      [10] 3894 	ld	hl, #___str_2
   1268 E5            [11] 3895 	push	hl
   1269 CDr00r00      [17] 3896 	call	_printf
   126C F1            [10] 3897 	pop	af
   126D F1            [10] 3898 	pop	af
   126E D1            [10] 3899 	pop	de
   126F C1            [10] 3900 	pop	bc
                     1270  3901 	C$main.c$698$2$231	= .
                           3902 	.globl	C$main.c$698$2$231
                           3903 ;main.c:698: SMS_setNextTileatXY(startcol, 12);
   1270 6B            [ 4] 3904 	ld	l, e
   1271 7A            [ 4] 3905 	ld	a, d
   1272 F6 7B         [ 7] 3906 	or	a, #0x7b
   1274 67            [ 4] 3907 	ld	h, a
   1275 C5            [11] 3908 	push	bc
   1276 CF            [11] 3909 	rst	#0x08
   1277 C1            [10] 3910 	pop	bc
                     1278  3911 	C$main.c$699$2$231	= .
                           3912 	.globl	C$main.c$699$2$231
                           3913 ;main.c:699: printf("X: %d  ", dat->phaser.x);
   1278 69            [ 4] 3914 	ld	l, c
   1279 60            [ 4] 3915 	ld	h, b
   127A 23            [ 6] 3916 	inc	hl
   127B 23            [ 6] 3917 	inc	hl
   127C 6E            [ 7] 3918 	ld	l, (hl)
   127D DD 75 FB      [19] 3919 	ld	-5 (ix), l
   1280 DD 36 FC 00   [19] 3920 	ld	-4 (ix), #0x00
   1284 C5            [11] 3921 	push	bc
   1285 D5            [11] 3922 	push	de
   1286 DD 6E FB      [19] 3923 	ld	l,-5 (ix)
   1289 DD 66 FC      [19] 3924 	ld	h,-4 (ix)
   128C E5            [11] 3925 	push	hl
   128D 21r01r13      [10] 3926 	ld	hl, #___str_6
   1290 E5            [11] 3927 	push	hl
   1291 CDr00r00      [17] 3928 	call	_printf
   1294 F1            [10] 3929 	pop	af
   1295 F1            [10] 3930 	pop	af
   1296 D1            [10] 3931 	pop	de
   1297 C1            [10] 3932 	pop	bc
                     1298  3933 	C$main.c$700$2$231	= .
                           3934 	.globl	C$main.c$700$2$231
                           3935 ;main.c:700: SMS_setNextTileatXY(startcol, 13);
   1298 7B            [ 4] 3936 	ld	a, e
   1299 CB F7         [ 8] 3937 	set	6, a
   129B 6F            [ 4] 3938 	ld	l, a
   129C 7A            [ 4] 3939 	ld	a, d
   129D F6 7B         [ 7] 3940 	or	a, #0x7b
   129F 67            [ 4] 3941 	ld	h, a
   12A0 C5            [11] 3942 	push	bc
   12A1 CF            [11] 3943 	rst	#0x08
                     12A2  3944 	C$main.c$701$2$231	= .
                           3945 	.globl	C$main.c$701$2$231
                           3946 ;main.c:701: printf("Y: %d  ", dat->phaser.y);
   12A2 E1            [10] 3947 	pop	hl
   12A3 23            [ 6] 3948 	inc	hl
   12A4 23            [ 6] 3949 	inc	hl
   12A5 23            [ 6] 3950 	inc	hl
   12A6 4E            [ 7] 3951 	ld	c, (hl)
   12A7 06 00         [ 7] 3952 	ld	b, #0x00
   12A9 C5            [11] 3953 	push	bc
   12AA 21r09r13      [10] 3954 	ld	hl, #___str_7
   12AD E5            [11] 3955 	push	hl
   12AE CDr00r00      [17] 3956 	call	_printf
   12B1 F1            [10] 3957 	pop	af
   12B2 F1            [10] 3958 	pop	af
                     12B3  3959 	C$main.c$703$1$230	= .
                           3960 	.globl	C$main.c$703$1$230
                           3961 ;main.c:703: }
   12B3                    3962 00109$:
   12B3 DD F9         [10] 3963 	ld	sp, ix
   12B5 DD E1         [14] 3964 	pop	ix
                     12B7  3965 	C$main.c$704$1$230	= .
                           3966 	.globl	C$main.c$704$1$230
                     12B7  3967 	XFmain$inputDiag_printDevice$0$0	= .
                           3968 	.globl	XFmain$inputDiag_printDevice$0$0
   12B7 C9            [10] 3969 	ret
                     12B8  3970 Fmain$__str_0$0$0 == .
   12B8                    3971 ___str_0:
   12B8 55 6E 6B 6E 6F 77  3972 	.ascii "Unknown"
        6E
   12BF 00                 3973 	.db 0x00
                     12C0  3974 Fmain$__str_1$0$0 == .
   12C0                    3975 ___str_1:
   12C0 53 4D 53 20 43 6F  3976 	.ascii "SMS Controller"
        6E 74 72 6F 6C 6C
        65 72
   12CE 00                 3977 	.db 0x00
                     12CF  3978 Fmain$__str_2$0$0 == .
   12CF                    3979 ___str_2:
   12CF 42 74 6E 3A 20 25  3980 	.ascii "Btn: %02x"
        30 32 78
   12D8 00                 3981 	.db 0x00
                     12D9  3982 Fmain$__str_3$0$0 == .
   12D9                    3983 ___str_3:
   12D9 53 4D 53 20 50 61  3984 	.ascii "SMS Paddle    "
        64 64 6C 65 20 20
        20 20
   12E7 00                 3985 	.db 0x00
                     12E8  3986 Fmain$__str_4$0$0 == .
   12E8                    3987 ___str_4:
   12E8 56 61 6C 3A 20 25  3988 	.ascii "Val: %02x"
        30 32 78
   12F1 00                 3989 	.db 0x00
                     12F2  3990 Fmain$__str_5$0$0 == .
   12F2                    3991 ___str_5:
   12F2 4D 44 20 6D 6F 75  3992 	.ascii "MD mouse      "
        73 65 20 20 20 20
        20 20
   1300 00                 3993 	.db 0x00
                     1301  3994 Fmain$__str_6$0$0 == .
   1301                    3995 ___str_6:
   1301 58 3A 20 25 64 20  3996 	.ascii "X: %d  "
        20
   1308 00                 3997 	.db 0x00
                     1309  3998 Fmain$__str_7$0$0 == .
   1309                    3999 ___str_7:
   1309 59 3A 20 25 64 20  4000 	.ascii "Y: %d  "
        20
   1310 00                 4001 	.db 0x00
                     1311  4002 Fmain$__str_8$0$0 == .
   1311                    4003 ___str_8:
   1311 47 46 58 2E 20 42  4004 	.ascii "GFX. BRD. V2  "
        52 44 2E 20 56 32
        20 20
   131F 00                 4005 	.db 0x00
                     1320  4006 Fmain$__str_9$0$0 == .
   1320                    4007 ___str_9:
   1320 50 3A 20 25 64 20  4008 	.ascii "P: %d  "
        20
   1327 00                 4009 	.db 0x00
                     1328  4010 Fmain$__str_10$0$0 == .
   1328                    4011 ___str_10:
   1328 53 50 4F 52 54 53  4012 	.ascii "SPORTSPAD     "
        50 41 44 20 20 20
        20 20
   1336 00                 4013 	.db 0x00
                     1337  4014 Fmain$__str_11$0$0 == .
   1337                    4015 ___str_11:
   1337 4C 49 47 48 54 20  4016 	.ascii "LIGHT PHASER  "
        50 48 41 53 45 52
        20 20
   1345 00                 4017 	.db 0x00
                     1346  4018 	G$inputDiag_inlib$0$0	= .
                           4019 	.globl	G$inputDiag_inlib$0$0
                     1346  4020 	C$main.c$706$1$230	= .
                           4021 	.globl	C$main.c$706$1$230
                           4022 ;main.c:706: void inputDiag_inlib(void)
                           4023 ;	---------------------------------
                           4024 ; Function inputDiag_inlib
                           4025 ; ---------------------------------
   1346                    4026 _inputDiag_inlib::
   1346 DD E5         [15] 4027 	push	ix
   1348 DD 21 00 00   [14] 4028 	ld	ix,#0
   134C DD 39         [15] 4029 	add	ix,sp
   134E F5            [11] 4030 	push	af
                     134F  4031 	C$main.c$708$1$230	= .
                           4032 	.globl	C$main.c$708$1$230
                           4033 ;main.c:708: uint8_t polling = 1;
   134F DD 36 FF 01   [19] 4034 	ld	-1 (ix), #0x01
                     1353  4035 	C$main.c$711$1$233	= .
                           4036 	.globl	C$main.c$711$1$233
                           4037 ;main.c:711: SMS_displayOff();
   1353 21 40 01      [10] 4038 	ld	hl, #0x0140
   1356 CDr00r00      [17] 4039 	call	_SMS_VDPturnOffFeature
                     1359  4040 	C$main.c$712$1$233	= .
                           4041 	.globl	C$main.c$712$1$233
                           4042 ;main.c:712: SMS_autoSetUpTextRenderer();
   1359 CDr00r00      [17] 4043 	call	_SMS_autoSetUpTextRenderer
                     135C  4044 	C$main.c$713$1$233	= .
                           4045 	.globl	C$main.c$713$1$233
                           4046 ;main.c:713: SMS_displayOn();
   135C 21 40 01      [10] 4047 	ld	hl, #0x0140
   135F CDr00r00      [17] 4048 	call	_SMS_VDPturnOnFeature
                     1362  4049 	C$main.c$714$1$233	= .
                           4050 	.globl	C$main.c$714$1$233
                           4051 ;main.c:714: SMS_waitForVBlank();
   1362 CDr00r00      [17] 4052 	call	_SMS_waitForVBlank
                     1365  4053 	C$main.c$715$1$233	= .
                           4054 	.globl	C$main.c$715$1$233
                           4055 ;main.c:715: SMS_waitForVBlank();
   1365 CDr00r00      [17] 4056 	call	_SMS_waitForVBlank
                     1368  4057 	C$main.c$716$1$233	= .
                           4058 	.globl	C$main.c$716$1$233
                           4059 ;main.c:716: SMS_waitForVBlank();
   1368 CDr00r00      [17] 4060 	call	_SMS_waitForVBlank
                     136B  4061 	C$main.c$717$1$233	= .
                           4062 	.globl	C$main.c$717$1$233
                           4063 ;main.c:717: SMS_setNextTileatXY(1, 1);
   136B 21 42 78      [10] 4064 	ld	hl, #0x7842
   136E CF            [11] 4065 	rst	#0x08
                     136F  4066 	C$main.c$718$1$233	= .
                           4067 	.globl	C$main.c$718$1$233
                           4068 ;main.c:718: printf("Input device diagnostic ");
   136F 21r44r15      [10] 4069 	ld	hl, #___str_12
   1372 E5            [11] 4070 	push	hl
   1373 CDr00r00      [17] 4071 	call	_printf
   1376 F1            [10] 4072 	pop	af
                     1377  4073 	C$main.c$719$1$233	= .
                           4074 	.globl	C$main.c$719$1$233
                           4075 ;main.c:719: SMS_setNextTileatXY(1, 3);
   1377 21 C2 78      [10] 4076 	ld	hl, #0x78c2
   137A CF            [11] 4077 	rst	#0x08
                     137B  4078 	C$main.c$720$1$233	= .
                           4079 	.globl	C$main.c$720$1$233
                           4080 ;main.c:720: printf("SMS-A-SKETCH V", "1.0");
   137B 21r6Cr15      [10] 4081 	ld	hl, #___str_14
   137E E5            [11] 4082 	push	hl
   137F 21r5Dr15      [10] 4083 	ld	hl, #___str_13
   1382 E5            [11] 4084 	push	hl
   1383 CDr00r00      [17] 4085 	call	_printf
   1386 F1            [10] 4086 	pop	af
   1387 F1            [10] 4087 	pop	af
                     1388  4088 	C$main.c$721$1$233	= .
                           4089 	.globl	C$main.c$721$1$233
                           4090 ;main.c:721: SMS_waitForVBlank();
   1388 CDr00r00      [17] 4091 	call	_SMS_waitForVBlank
                     138B  4092 	C$main.c$723$1$233	= .
                           4093 	.globl	C$main.c$723$1$233
                           4094 ;main.c:723: inlib_init();
   138B CDr00r00      [17] 4095 	call	_inlib_init
                     138E  4096 	C$main.c$725$1$233	= .
                           4097 	.globl	C$main.c$725$1$233
                           4098 ;main.c:725: SMS_resetPauseRequest();
   138E CDr00r00      [17] 4099 	call	_SMS_resetPauseRequest
                     1391  4100 	C$main.c$727$3$241	= .
                           4101 	.globl	C$main.c$727$3$241
                           4102 ;main.c:727: do
   1391 DD 36 FE 00   [19] 4103 	ld	-2 (ix), #0x00
   1395                    4104 00154$:
                     1395  4105 	C$main.c$729$2$234	= .
                           4106 	.globl	C$main.c$729$2$234
                           4107 ;main.c:729: SMS_waitForVBlank();
   1395 CDr00r00      [17] 4108 	call	_SMS_waitForVBlank
                     1398  4109 	C$main.c$730$2$234	= .
                           4110 	.globl	C$main.c$730$2$234
                           4111 ;main.c:730: inlib_poll();
   1398 CDr00r00      [17] 4112 	call	_inlib_poll
                     139B  4113 	C$main.c$732$2$234	= .
                           4114 	.globl	C$main.c$732$2$234
                           4115 ;main.c:732: inputDiag_printDevice("Port 1", 1, &inlib_port1);
   139B 21r00r00      [10] 4116 	ld	hl, #_inlib_port1
   139E E5            [11] 4117 	push	hl
   139F 3E 01         [ 7] 4118 	ld	a, #0x01
   13A1 F5            [11] 4119 	push	af
   13A2 33            [ 6] 4120 	inc	sp
   13A3 21r70r15      [10] 4121 	ld	hl, #___str_15
   13A6 E5            [11] 4122 	push	hl
   13A7 CDrBDr0F      [17] 4123 	call	_inputDiag_printDevice
   13AA F1            [10] 4124 	pop	af
                     13AB  4125 	C$main.c$733$2$234	= .
                           4126 	.globl	C$main.c$733$2$234
                           4127 ;main.c:733: inputDiag_printDevice("Port 2", 16, &inlib_port2);
   13AB 33            [ 6] 4128 	inc	sp
   13AC 21r00r00      [10] 4129 	ld	hl,#_inlib_port2
   13AF E3            [19] 4130 	ex	(sp),hl
   13B0 3E 10         [ 7] 4131 	ld	a, #0x10
   13B2 F5            [11] 4132 	push	af
   13B3 33            [ 6] 4133 	inc	sp
   13B4 21r77r15      [10] 4134 	ld	hl, #___str_16
   13B7 E5            [11] 4135 	push	hl
   13B8 CDrBDr0F      [17] 4136 	call	_inputDiag_printDevice
   13BB F1            [10] 4137 	pop	af
   13BC F1            [10] 4138 	pop	af
   13BD 33            [ 6] 4139 	inc	sp
                     13BE  4140 	C$main.c$735$2$234	= .
                           4141 	.globl	C$main.c$735$2$234
                           4142 ;main.c:735: SMS_setNextTileatXY(1, 5);
   13BE 21 42 79      [10] 4143 	ld	hl, #0x7942
   13C1 CF            [11] 4144 	rst	#0x08
                     13C2  4145 	C$main.c$736$2$234	= .
                           4146 	.globl	C$main.c$736$2$234
                           4147 ;main.c:736: printf("%02x", a);
   13C2 DD 4E FE      [19] 4148 	ld	c, -2 (ix)
   13C5 06 00         [ 7] 4149 	ld	b, #0x00
   13C7 C5            [11] 4150 	push	bc
   13C8 21r7Er15      [10] 4151 	ld	hl, #___str_17
   13CB E5            [11] 4152 	push	hl
   13CC CDr00r00      [17] 4153 	call	_printf
   13CF F1            [10] 4154 	pop	af
   13D0 F1            [10] 4155 	pop	af
                     13D1  4156 	C$main.c$737$2$234	= .
                           4157 	.globl	C$main.c$737$2$234
                           4158 ;main.c:737: a++;
   13D1 DD 34 FE      [23] 4159 	inc	-2 (ix)
                     13D4  4160 	C$main.c$739$2$234	= .
                           4161 	.globl	C$main.c$739$2$234
                           4162 ;main.c:739: if (inlib_port1.type == INLIB_TYPE_PADDLE)
   13D4 3Ar00r00      [13] 4163 	ld	a, (#_inlib_port1 + 0)
   13D7 FE 01         [ 7] 4164 	cp	a, #0x01
   13D9 20 26         [12] 4165 	jr	NZ,00116$
                     13DB  4166 	C$main.c$741$3$235	= .
                           4167 	.globl	C$main.c$741$3$235
                           4168 ;main.c:741: if (inlib_port2.type != INLIB_TYPE_PADDLE)
   13DB 3Ar00r00      [13] 4169 	ld	a, (#_inlib_port2 + 0)
   13DE 3D            [ 4] 4170 	dec	a
   13DF 28 12         [12] 4171 	jr	Z,00102$
                     13E1  4172 	C$main.c$743$4$236	= .
                           4173 	.globl	C$main.c$743$4$236
                           4174 ;main.c:743: SMS_setNextTileatXY(1, 20);
   13E1 21 02 7D      [10] 4175 	ld	hl, #0x7d02
   13E4 CF            [11] 4176 	rst	#0x08
                     13E5  4177 	C$main.c$744$4$236	= .
                           4178 	.globl	C$main.c$744$4$236
                           4179 ;main.c:744: printf("TWO PADDLES REQUIRED.  ");
   13E5 21r83r15      [10] 4180 	ld	hl, #___str_18
   13E8 E5            [11] 4181 	push	hl
   13E9 CDr00r00      [17] 4182 	call	_printf
   13EC F1            [10] 4183 	pop	af
                     13ED  4184 	C$main.c$745$4$236	= .
                           4185 	.globl	C$main.c$745$4$236
                           4186 ;main.c:745: inlib_init();
   13ED CDr00r00      [17] 4187 	call	_inlib_init
                     13F0  4188 	C$main.c$746$4$236	= .
                           4189 	.globl	C$main.c$746$4$236
                           4190 ;main.c:746: continue;
   13F0 C3r38r15      [10] 4191 	jp	00155$
   13F3                    4192 00102$:
                     13F3  4193 	C$main.c$749$3$235	= .
                           4194 	.globl	C$main.c$749$3$235
                           4195 ;main.c:749: SMS_setNextTileatXY(1, 17);
   13F3 21 42 7C      [10] 4196 	ld	hl, #0x7c42
   13F6 CF            [11] 4197 	rst	#0x08
                     13F7  4198 	C$main.c$750$3$235	= .
                           4199 	.globl	C$main.c$750$3$235
                           4200 ;main.c:750: printf("PADDLE MODE ENABLED    ");
   13F7 21r9Br15      [10] 4201 	ld	hl, #___str_19
   13FA E5            [11] 4202 	push	hl
   13FB CDr00r00      [17] 4203 	call	_printf
   13FE F1            [10] 4204 	pop	af
   13FF 18 54         [12] 4205 	jr	00117$
   1401                    4206 00116$:
                     1401  4207 	C$main.c$752$2$234	= .
                           4208 	.globl	C$main.c$752$2$234
                           4209 ;main.c:752: else if (inlib_port1.type == INLIB_TYPE_MD_MOUSE)
   1401 FE 02         [ 7] 4210 	cp	a, #0x02
   1403 20 0E         [12] 4211 	jr	NZ,00113$
                     1405  4212 	C$main.c$754$3$237	= .
                           4213 	.globl	C$main.c$754$3$237
                           4214 ;main.c:754: SMS_setNextTileatXY(1, 17);
   1405 21 42 7C      [10] 4215 	ld	hl, #0x7c42
   1408 CF            [11] 4216 	rst	#0x08
                     1409  4217 	C$main.c$755$3$237	= .
                           4218 	.globl	C$main.c$755$3$237
                           4219 ;main.c:755: printf("MOUSE MODE ENABLED     ");
   1409 21rB3r15      [10] 4220 	ld	hl, #___str_20
   140C E5            [11] 4221 	push	hl
   140D CDr00r00      [17] 4222 	call	_printf
   1410 F1            [10] 4223 	pop	af
   1411 18 42         [12] 4224 	jr	00117$
   1413                    4225 00113$:
                     1413  4226 	C$main.c$757$2$234	= .
                           4227 	.globl	C$main.c$757$2$234
                           4228 ;main.c:757: else if (inlib_port1.type == INLIB_TYPE_GFX_V2)
   1413 FE 03         [ 7] 4229 	cp	a, #0x03
   1415 20 0E         [12] 4230 	jr	NZ,00110$
                     1417  4231 	C$main.c$759$3$238	= .
                           4232 	.globl	C$main.c$759$3$238
                           4233 ;main.c:759: SMS_setNextTileatXY(1, 17);
   1417 21 42 7C      [10] 4234 	ld	hl, #0x7c42
   141A CF            [11] 4235 	rst	#0x08
                     141B  4236 	C$main.c$760$3$238	= .
                           4237 	.globl	C$main.c$760$3$238
                           4238 ;main.c:760: printf("GFX. BRD. V2 ENABLED   ");
   141B 21rCBr15      [10] 4239 	ld	hl, #___str_21
   141E E5            [11] 4240 	push	hl
   141F CDr00r00      [17] 4241 	call	_printf
   1422 F1            [10] 4242 	pop	af
   1423 18 30         [12] 4243 	jr	00117$
   1425                    4244 00110$:
                     1425  4245 	C$main.c$762$2$234	= .
                           4246 	.globl	C$main.c$762$2$234
                           4247 ;main.c:762: else if (inlib_port1.type == INLIB_TYPE_SPORTSPAD)
   1425 FE 04         [ 7] 4248 	cp	a, #0x04
   1427 20 0E         [12] 4249 	jr	NZ,00107$
                     1429  4250 	C$main.c$764$3$239	= .
                           4251 	.globl	C$main.c$764$3$239
                           4252 ;main.c:764: SMS_setNextTileatXY(1, 17);
   1429 21 42 7C      [10] 4253 	ld	hl, #0x7c42
   142C CF            [11] 4254 	rst	#0x08
                     142D  4255 	C$main.c$765$3$239	= .
                           4256 	.globl	C$main.c$765$3$239
                           4257 ;main.c:765: printf("SPORTSPAD MODE ENABLED ");
   142D 21rE3r15      [10] 4258 	ld	hl, #___str_22
   1430 E5            [11] 4259 	push	hl
   1431 CDr00r00      [17] 4260 	call	_printf
   1434 F1            [10] 4261 	pop	af
   1435 18 1E         [12] 4262 	jr	00117$
   1437                    4263 00107$:
                     1437  4264 	C$main.c$767$2$234	= .
                           4265 	.globl	C$main.c$767$2$234
                           4266 ;main.c:767: else if (inlib_port1.type == INLIB_TYPE_LIGHT_PHASER)
   1437 D6 05         [ 7] 4267 	sub	a, #0x05
   1439 20 0E         [12] 4268 	jr	NZ,00104$
                     143B  4269 	C$main.c$769$3$240	= .
                           4270 	.globl	C$main.c$769$3$240
                           4271 ;main.c:769: SMS_setNextTileatXY(1, 17);
   143B 21 42 7C      [10] 4272 	ld	hl, #0x7c42
   143E CF            [11] 4273 	rst	#0x08
                     143F  4274 	C$main.c$770$3$240	= .
                           4275 	.globl	C$main.c$770$3$240
                           4276 ;main.c:770: printf("LIGHT PHASER MODE      ");
   143F 21rFBr15      [10] 4277 	ld	hl, #___str_23
   1442 E5            [11] 4278 	push	hl
   1443 CDr00r00      [17] 4279 	call	_printf
   1446 F1            [10] 4280 	pop	af
   1447 18 0C         [12] 4281 	jr	00117$
   1449                    4282 00104$:
                     1449  4283 	C$main.c$774$3$241	= .
                           4284 	.globl	C$main.c$774$3$241
                           4285 ;main.c:774: SMS_setNextTileatXY(1, 17);
   1449 21 42 7C      [10] 4286 	ld	hl, #0x7c42
   144C CF            [11] 4287 	rst	#0x08
                     144D  4288 	C$main.c$775$3$241	= .
                           4289 	.globl	C$main.c$775$3$241
                           4290 ;main.c:775: printf("CONTROLLER MODE ENABLED");
   144D 21r13r16      [10] 4291 	ld	hl, #___str_24
   1450 E5            [11] 4292 	push	hl
   1451 CDr00r00      [17] 4293 	call	_printf
   1454 F1            [10] 4294 	pop	af
   1455                    4295 00117$:
                     1455  4296 	C$main.c$778$2$234	= .
                           4297 	.globl	C$main.c$778$2$234
                           4298 ;main.c:778: SMS_setNextTileatXY(1, 23);
   1455 21 C2 7D      [10] 4299 	ld	hl, #0x7dc2
   1458 CF            [11] 4300 	rst	#0x08
                     1459  4301 	C$main.c$779$2$234	= .
                           4302 	.globl	C$main.c$779$2$234
                           4303 ;main.c:779: printf("PRESS TO CONTINUE");
   1459 21r2Br16      [10] 4304 	ld	hl, #___str_25
   145C E5            [11] 4305 	push	hl
   145D CDr00r00      [17] 4306 	call	_printf
   1460 F1            [10] 4307 	pop	af
                     1461  4308 	C$main.c$739$1$233	= .
                           4309 	.globl	C$main.c$739$1$233
                           4310 ;main.c:739: if (inlib_port1.type == INLIB_TYPE_PADDLE)
   1461 21r00r00      [10] 4311 	ld	hl, #_inlib_port1 + 0
   1464 4E            [ 7] 4312 	ld	c, (hl)
                     1465  4313 	C$main.c$781$2$234	= .
                           4314 	.globl	C$main.c$781$2$234
                           4315 ;main.c:781: switch (inlib_port1.type)
   1465 3E 05         [ 7] 4316 	ld	a, #0x05
   1467 91            [ 4] 4317 	sub	a, c
   1468 38 58         [12] 4318 	jr	C,00138$
                     146A  4319 	C$main.c$784$1$233	= .
                           4320 	.globl	C$main.c$784$1$233
                           4321 ;main.c:784: if (inlib_port1.mdmouse.buttons)
   146A 21r01r00      [10] 4322 	ld	hl, #_inlib_port1 + 1
   146D 46            [ 7] 4323 	ld	b, (hl)
                     146E  4324 	C$main.c$781$2$234	= .
                           4325 	.globl	C$main.c$781$2$234
                           4326 ;main.c:781: switch (inlib_port1.type)
   146E 59            [ 4] 4327 	ld	e, c
   146F 16 00         [ 7] 4328 	ld	d, #0x00
   1471 21r77r14      [10] 4329 	ld	hl, #00255$
   1474 19            [11] 4330 	add	hl, de
   1475 19            [11] 4331 	add	hl, de
                     1476  4332 	C$main.c$783$3$242	= .
                           4333 	.globl	C$main.c$783$3$242
                           4334 ;main.c:783: case INLIB_TYPE_MD_MOUSE:
   1476 E9            [ 4] 4335 	jp	(hl)
   1477                    4336 00255$:
   1477 18 14         [12] 4337 	jr	00121$
   1479 18 21         [12] 4338 	jr	00126$
   147B 18 06         [12] 4339 	jr	00118$
   147D 18 27         [12] 4340 	jr	00129$
   147F 18 2F         [12] 4341 	jr	00132$
   1481 18 37         [12] 4342 	jr	00135$
   1483                    4343 00118$:
                     1483  4344 	C$main.c$784$3$242	= .
                           4345 	.globl	C$main.c$784$3$242
                           4346 ;main.c:784: if (inlib_port1.mdmouse.buttons)
   1483 78            [ 4] 4347 	ld	a, b
   1484 B7            [ 4] 4348 	or	a, a
   1485 28 3B         [12] 4349 	jr	Z,00138$
                     1487  4350 	C$main.c$786$4$243	= .
                           4351 	.globl	C$main.c$786$4$243
                           4352 ;main.c:786: polling = 0;
   1487 DD 36 FF 00   [19] 4353 	ld	-1 (ix), #0x00
                     148B  4354 	C$main.c$788$3$242	= .
                           4355 	.globl	C$main.c$788$3$242
                           4356 ;main.c:788: break;
   148B 18 35         [12] 4357 	jr	00138$
                     148D  4358 	C$main.c$789$3$242	= .
                           4359 	.globl	C$main.c$789$3$242
                           4360 ;main.c:789: case INLIB_TYPE_SMS:
   148D                    4361 00121$:
                     148D  4362 	C$main.c$790$3$242	= .
                           4363 	.globl	C$main.c$790$3$242
                           4364 ;main.c:790: if (inlib_port1.sms.buttons)
   148D 78            [ 4] 4365 	ld	a, b
   148E B7            [ 4] 4366 	or	a, a
   148F 28 31         [12] 4367 	jr	Z,00138$
                     1491  4368 	C$main.c$792$4$244	= .
                           4369 	.globl	C$main.c$792$4$244
                           4370 ;main.c:792: if (inlib_port1.sms.buttons != SMS_BTN_1)
   1491 78            [ 4] 4371 	ld	a, b
   1492 D6 10         [ 7] 4372 	sub	a, #0x10
   1494 20 2C         [12] 4373 	jr	NZ,00138$
                     1496  4374 	C$main.c$796$4$244	= .
                           4375 	.globl	C$main.c$796$4$244
                           4376 ;main.c:796: polling = 0;
   1496 DD 36 FF 00   [19] 4377 	ld	-1 (ix), #0x00
                     149A  4378 	C$main.c$798$3$242	= .
                           4379 	.globl	C$main.c$798$3$242
                           4380 ;main.c:798: break;
   149A 18 26         [12] 4381 	jr	00138$
                     149C  4382 	C$main.c$799$3$242	= .
                           4383 	.globl	C$main.c$799$3$242
                           4384 ;main.c:799: case INLIB_TYPE_PADDLE:
   149C                    4385 00126$:
                     149C  4386 	C$main.c$800$3$242	= .
                           4387 	.globl	C$main.c$800$3$242
                           4388 ;main.c:800: if (inlib_port1.paddle.buttons)
   149C 78            [ 4] 4389 	ld	a, b
   149D B7            [ 4] 4390 	or	a, a
   149E 28 22         [12] 4391 	jr	Z,00138$
                     14A0  4392 	C$main.c$802$4$246	= .
                           4393 	.globl	C$main.c$802$4$246
                           4394 ;main.c:802: polling = 0;
   14A0 DD 36 FF 00   [19] 4395 	ld	-1 (ix), #0x00
                     14A4  4396 	C$main.c$804$3$242	= .
                           4397 	.globl	C$main.c$804$3$242
                           4398 ;main.c:804: break;
   14A4 18 1C         [12] 4399 	jr	00138$
                     14A6  4400 	C$main.c$805$3$242	= .
                           4401 	.globl	C$main.c$805$3$242
                           4402 ;main.c:805: case INLIB_TYPE_GFX_V2:
   14A6                    4403 00129$:
                     14A6  4404 	C$main.c$806$3$242	= .
                           4405 	.globl	C$main.c$806$3$242
                           4406 ;main.c:806: if (inlib_port1.gfx2.buttons)
   14A6 78            [ 4] 4407 	ld	a, b
   14A7 B7            [ 4] 4408 	or	a, a
   14A8 28 18         [12] 4409 	jr	Z,00138$
                     14AA  4410 	C$main.c$808$4$247	= .
                           4411 	.globl	C$main.c$808$4$247
                           4412 ;main.c:808: polling = 0;
   14AA DD 36 FF 00   [19] 4413 	ld	-1 (ix), #0x00
                     14AE  4414 	C$main.c$810$3$242	= .
                           4415 	.globl	C$main.c$810$3$242
                           4416 ;main.c:810: break;
   14AE 18 12         [12] 4417 	jr	00138$
                     14B0  4418 	C$main.c$811$3$242	= .
                           4419 	.globl	C$main.c$811$3$242
                           4420 ;main.c:811: case INLIB_TYPE_SPORTSPAD:
   14B0                    4421 00132$:
                     14B0  4422 	C$main.c$812$3$242	= .
                           4423 	.globl	C$main.c$812$3$242
                           4424 ;main.c:812: if (inlib_port1.spad.buttons)
   14B0 78            [ 4] 4425 	ld	a, b
   14B1 B7            [ 4] 4426 	or	a, a
   14B2 28 0E         [12] 4427 	jr	Z,00138$
                     14B4  4428 	C$main.c$814$4$248	= .
                           4429 	.globl	C$main.c$814$4$248
                           4430 ;main.c:814: polling = 0;
   14B4 DD 36 FF 00   [19] 4431 	ld	-1 (ix), #0x00
                     14B8  4432 	C$main.c$816$3$242	= .
                           4433 	.globl	C$main.c$816$3$242
                           4434 ;main.c:816: break;
   14B8 18 08         [12] 4435 	jr	00138$
                     14BA  4436 	C$main.c$817$3$242	= .
                           4437 	.globl	C$main.c$817$3$242
                           4438 ;main.c:817: case INLIB_TYPE_LIGHT_PHASER:
   14BA                    4439 00135$:
                     14BA  4440 	C$main.c$818$3$242	= .
                           4441 	.globl	C$main.c$818$3$242
                           4442 ;main.c:818: if (inlib_port1.phaser.buttons)
   14BA 78            [ 4] 4443 	ld	a, b
   14BB B7            [ 4] 4444 	or	a, a
   14BC 28 04         [12] 4445 	jr	Z,00138$
                     14BE  4446 	C$main.c$820$4$249	= .
                           4447 	.globl	C$main.c$820$4$249
                           4448 ;main.c:820: polling = 0;
   14BE DD 36 FF 00   [19] 4449 	ld	-1 (ix), #0x00
                     14C2  4450 	C$main.c$823$2$234	= .
                           4451 	.globl	C$main.c$823$2$234
                           4452 ;main.c:823: }
   14C2                    4453 00138$:
                     14C2  4454 	C$main.c$825$2$234	= .
                           4455 	.globl	C$main.c$825$2$234
                           4456 ;main.c:825: if (inlib_port1.type == INLIB_TYPE_SMS)
   14C2 79            [ 4] 4457 	ld	a, c
   14C3 B7            [ 4] 4458 	or	a, a
   14C4 20 24         [12] 4459 	jr	NZ,00140$
                     14C6  4460 	C$main.c$827$3$250	= .
                           4461 	.globl	C$main.c$827$3$250
                           4462 ;main.c:827: SMS_setNextTileatXY(1, 19);
   14C6 21 C2 7C      [10] 4463 	ld	hl, #0x7cc2
   14C9 CF            [11] 4464 	rst	#0x08
                     14CA  4465 	C$main.c$828$3$250	= .
                           4466 	.globl	C$main.c$828$3$250
                           4467 ;main.c:828: printf("Press PAUSE for SPORTSPAD");
   14CA 21r3Dr16      [10] 4468 	ld	hl, #___str_26
   14CD E5            [11] 4469 	push	hl
   14CE CDr00r00      [17] 4470 	call	_printf
   14D1 F1            [10] 4471 	pop	af
                     14D2  4472 	C$main.c$829$3$250	= .
                           4473 	.globl	C$main.c$829$3$250
                           4474 ;main.c:829: SMS_setNextTileatXY(1, 20);
   14D2 21 02 7D      [10] 4475 	ld	hl, #0x7d02
   14D5 CF            [11] 4476 	rst	#0x08
                     14D6  4477 	C$main.c$830$3$250	= .
                           4478 	.globl	C$main.c$830$3$250
                           4479 ;main.c:830: printf("And Graphics Board v2");
   14D6 21r57r16      [10] 4480 	ld	hl, #___str_27
   14D9 E5            [11] 4481 	push	hl
   14DA CDr00r00      [17] 4482 	call	_printf
   14DD F1            [10] 4483 	pop	af
                     14DE  4484 	C$main.c$831$3$250	= .
                           4485 	.globl	C$main.c$831$3$250
                           4486 ;main.c:831: SMS_setNextTileatXY(1, 21);
   14DE 21 42 7D      [10] 4487 	ld	hl, #0x7d42
   14E1 CF            [11] 4488 	rst	#0x08
                     14E2  4489 	C$main.c$832$3$250	= .
                           4490 	.globl	C$main.c$832$3$250
                           4491 ;main.c:832: printf("Or light phaser");
   14E2 21r6Dr16      [10] 4492 	ld	hl, #___str_28
   14E5 E5            [11] 4493 	push	hl
   14E6 CDr00r00      [17] 4494 	call	_printf
   14E9 F1            [10] 4495 	pop	af
   14EA                    4496 00140$:
                     14EA  4497 	C$main.c$835$2$234	= .
                           4498 	.globl	C$main.c$835$2$234
                           4499 ;main.c:835: if (SMS_queryPauseRequested())
   14EA CDr00r00      [17] 4500 	call	_SMS_queryPauseRequested
   14ED CB 45         [ 8] 4501 	bit	0, l
   14EF 28 47         [12] 4502 	jr	Z,00155$
                     14F1  4503 	C$main.c$837$3$251	= .
                           4504 	.globl	C$main.c$837$3$251
                           4505 ;main.c:837: SMS_resetPauseRequest();
   14F1 CDr00r00      [17] 4506 	call	_SMS_resetPauseRequest
                     14F4  4507 	C$main.c$839$3$251	= .
                           4508 	.globl	C$main.c$839$3$251
                           4509 ;main.c:839: if (inlib_port1.type == INLIB_TYPE_SMS)
   14F4 3Ar00r00      [13] 4510 	ld	a, (#_inlib_port1 + 0)
   14F7 B7            [ 4] 4511 	or	a, a
   14F8 20 0D         [12] 4512 	jr	NZ,00150$
                     14FA  4513 	C$main.c$841$4$252	= .
                           4514 	.globl	C$main.c$841$4$252
                           4515 ;main.c:841: inlib_port1.type = INLIB_TYPE_GFX_V2;
   14FA 21r00r00      [10] 4516 	ld	hl, #_inlib_port1
   14FD 36 03         [10] 4517 	ld	(hl), #0x03
                     14FF  4518 	C$main.c$842$4$252	= .
                           4519 	.globl	C$main.c$842$4$252
                           4520 ;main.c:842: inlib_poll();
   14FF CDr00r00      [17] 4521 	call	_inlib_poll
                     1502  4522 	C$main.c$843$4$252	= .
                           4523 	.globl	C$main.c$843$4$252
                           4524 ;main.c:843: inlib_poll();
   1502 CDr00r00      [17] 4525 	call	_inlib_poll
   1505 18 31         [12] 4526 	jr	00155$
   1507                    4527 00150$:
                     1507  4528 	C$main.c$845$3$251	= .
                           4529 	.globl	C$main.c$845$3$251
                           4530 ;main.c:845: else if (inlib_port1.type == INLIB_TYPE_GFX_V2)
   1507 FE 03         [ 7] 4531 	cp	a, #0x03
   1509 20 0D         [12] 4532 	jr	NZ,00147$
                     150B  4533 	C$main.c$847$4$253	= .
                           4534 	.globl	C$main.c$847$4$253
                           4535 ;main.c:847: inlib_port1.type = INLIB_TYPE_SPORTSPAD;
   150B 21r00r00      [10] 4536 	ld	hl, #_inlib_port1
   150E 36 04         [10] 4537 	ld	(hl), #0x04
                     1510  4538 	C$main.c$848$4$253	= .
                           4539 	.globl	C$main.c$848$4$253
                           4540 ;main.c:848: inlib_poll();
   1510 CDr00r00      [17] 4541 	call	_inlib_poll
                     1513  4542 	C$main.c$849$4$253	= .
                           4543 	.globl	C$main.c$849$4$253
                           4544 ;main.c:849: inlib_poll();
   1513 CDr00r00      [17] 4545 	call	_inlib_poll
   1516 18 20         [12] 4546 	jr	00155$
   1518                    4547 00147$:
                     1518  4548 	C$main.c$851$3$251	= .
                           4549 	.globl	C$main.c$851$3$251
                           4550 ;main.c:851: else if (inlib_port1.type == INLIB_TYPE_SPORTSPAD)
   1518 FE 04         [ 7] 4551 	cp	a, #0x04
   151A 20 0D         [12] 4552 	jr	NZ,00144$
                     151C  4553 	C$main.c$853$4$254	= .
                           4554 	.globl	C$main.c$853$4$254
                           4555 ;main.c:853: inlib_port1.type = INLIB_TYPE_LIGHT_PHASER;
   151C 21r00r00      [10] 4556 	ld	hl, #_inlib_port1
   151F 36 05         [10] 4557 	ld	(hl), #0x05
                     1521  4558 	C$main.c$854$4$254	= .
                           4559 	.globl	C$main.c$854$4$254
                           4560 ;main.c:854: inlib_poll();
   1521 CDr00r00      [17] 4561 	call	_inlib_poll
                     1524  4562 	C$main.c$855$4$254	= .
                           4563 	.globl	C$main.c$855$4$254
                           4564 ;main.c:855: inlib_poll();
   1524 CDr00r00      [17] 4565 	call	_inlib_poll
   1527 18 0F         [12] 4566 	jr	00155$
   1529                    4567 00144$:
                     1529  4568 	C$main.c$857$3$251	= .
                           4569 	.globl	C$main.c$857$3$251
                           4570 ;main.c:857: else if (inlib_port1.type == INLIB_TYPE_LIGHT_PHASER)
   1529 D6 05         [ 7] 4571 	sub	a, #0x05
   152B 20 0B         [12] 4572 	jr	NZ,00155$
                     152D  4573 	C$main.c$859$4$255	= .
                           4574 	.globl	C$main.c$859$4$255
                           4575 ;main.c:859: inlib_port1.type = INLIB_TYPE_SMS;
   152D 21r00r00      [10] 4576 	ld	hl, #_inlib_port1
   1530 36 00         [10] 4577 	ld	(hl), #0x00
                     1532  4578 	C$main.c$860$4$255	= .
                           4579 	.globl	C$main.c$860$4$255
                           4580 ;main.c:860: inlib_poll();
   1532 CDr00r00      [17] 4581 	call	_inlib_poll
                     1535  4582 	C$main.c$861$4$255	= .
                           4583 	.globl	C$main.c$861$4$255
                           4584 ;main.c:861: inlib_poll();
   1535 CDr00r00      [17] 4585 	call	_inlib_poll
   1538                    4586 00155$:
                     1538  4587 	C$main.c$865$1$233	= .
                           4588 	.globl	C$main.c$865$1$233
                           4589 ;main.c:865: } while (polling);
   1538 DD 7E FF      [19] 4590 	ld	a, -1 (ix)
   153B B7            [ 4] 4591 	or	a, a
   153C C2r95r13      [10] 4592 	jp	NZ, 00154$
   153F DD F9         [10] 4593 	ld	sp, ix
   1541 DD E1         [14] 4594 	pop	ix
                     1543  4595 	C$main.c$866$1$233	= .
                           4596 	.globl	C$main.c$866$1$233
                     1543  4597 	XG$inputDiag_inlib$0$0	= .
                           4598 	.globl	XG$inputDiag_inlib$0$0
   1543 C9            [10] 4599 	ret
                     1544  4600 Fmain$__str_12$0$0 == .
   1544                    4601 ___str_12:
   1544 49 6E 70 75 74 20  4602 	.ascii "Input device diagnostic "
        64 65 76 69 63 65
        20 64 69 61 67 6E
        6F 73 74 69 63 20
   155C 00                 4603 	.db 0x00
                     155D  4604 Fmain$__str_13$0$0 == .
   155D                    4605 ___str_13:
   155D 53 4D 53 2D 41 2D  4606 	.ascii "SMS-A-SKETCH V"
        53 4B 45 54 43 48
        20 56
   156B 00                 4607 	.db 0x00
                     156C  4608 Fmain$__str_14$0$0 == .
   156C                    4609 ___str_14:
   156C 31 2E 30           4610 	.ascii "1.0"
   156F 00                 4611 	.db 0x00
                     1570  4612 Fmain$__str_15$0$0 == .
   1570                    4613 ___str_15:
   1570 50 6F 72 74 20 31  4614 	.ascii "Port 1"
   1576 00                 4615 	.db 0x00
                     1577  4616 Fmain$__str_16$0$0 == .
   1577                    4617 ___str_16:
   1577 50 6F 72 74 20 32  4618 	.ascii "Port 2"
   157D 00                 4619 	.db 0x00
                     157E  4620 Fmain$__str_17$0$0 == .
   157E                    4621 ___str_17:
   157E 25 30 32 78        4622 	.ascii "%02x"
   1582 00                 4623 	.db 0x00
                     1583  4624 Fmain$__str_18$0$0 == .
   1583                    4625 ___str_18:
   1583 54 57 4F 20 50 41  4626 	.ascii "TWO PADDLES REQUIRED.  "
        44 44 4C 45 53 20
        52 45 51 55 49 52
        45 44 2E 20 20
   159A 00                 4627 	.db 0x00
                     159B  4628 Fmain$__str_19$0$0 == .
   159B                    4629 ___str_19:
   159B 50 41 44 44 4C 45  4630 	.ascii "PADDLE MODE ENABLED    "
        20 4D 4F 44 45 20
        45 4E 41 42 4C 45
        44 20 20 20 20
   15B2 00                 4631 	.db 0x00
                     15B3  4632 Fmain$__str_20$0$0 == .
   15B3                    4633 ___str_20:
   15B3 4D 4F 55 53 45 20  4634 	.ascii "MOUSE MODE ENABLED     "
        4D 4F 44 45 20 45
        4E 41 42 4C 45 44
        20 20 20 20 20
   15CA 00                 4635 	.db 0x00
                     15CB  4636 Fmain$__str_21$0$0 == .
   15CB                    4637 ___str_21:
   15CB 47 46 58 2E 20 42  4638 	.ascii "GFX. BRD. V2 ENABLED   "
        52 44 2E 20 56 32
        20 45 4E 41 42 4C
        45 44 20 20 20
   15E2 00                 4639 	.db 0x00
                     15E3  4640 Fmain$__str_22$0$0 == .
   15E3                    4641 ___str_22:
   15E3 53 50 4F 52 54 53  4642 	.ascii "SPORTSPAD MODE ENABLED "
        50 41 44 20 4D 4F
        44 45 20 45 4E 41
        42 4C 45 44 20
   15FA 00                 4643 	.db 0x00
                     15FB  4644 Fmain$__str_23$0$0 == .
   15FB                    4645 ___str_23:
   15FB 4C 49 47 48 54 20  4646 	.ascii "LIGHT PHASER MODE      "
        50 48 41 53 45 52
        20 4D 4F 44 45 20
        20 20 20 20 20
   1612 00                 4647 	.db 0x00
                     1613  4648 Fmain$__str_24$0$0 == .
   1613                    4649 ___str_24:
   1613 43 4F 4E 54 52 4F  4650 	.ascii "CONTROLLER MODE ENABLED"
        4C 4C 45 52 20 4D
        4F 44 45 20 45 4E
        41 42 4C 45 44
   162A 00                 4651 	.db 0x00
                     162B  4652 Fmain$__str_25$0$0 == .
   162B                    4653 ___str_25:
   162B 50 52 45 53 53 20  4654 	.ascii "PRESS TO CONTINUE"
        54 4F 20 43 4F 4E
        54 49 4E 55 45
   163C 00                 4655 	.db 0x00
                     163D  4656 Fmain$__str_26$0$0 == .
   163D                    4657 ___str_26:
   163D 50 72 65 73 73 20  4658 	.ascii "Press PAUSE for SPORTSPAD"
        50 41 55 53 45 20
        66 6F 72 20 53 50
        4F 52 54 53 50 41
        44
   1656 00                 4659 	.db 0x00
                     1657  4660 Fmain$__str_27$0$0 == .
   1657                    4661 ___str_27:
   1657 41 6E 64 20 47 72  4662 	.ascii "And Graphics Board v2"
        61 70 68 69 63 73
        20 42 6F 61 72 64
        20 76 32
   166C 00                 4663 	.db 0x00
                     166D  4664 Fmain$__str_28$0$0 == .
   166D                    4665 ___str_28:
   166D 4F 72 20 6C 69 67  4666 	.ascii "Or light phaser"
        68 74 20 70 68 61
        73 65 72
   167C 00                 4667 	.db 0x00
                     167D  4668 	G$interruptibleFrameDelay$0$0	= .
                           4669 	.globl	G$interruptibleFrameDelay$0$0
                     167D  4670 	C$main.c$868$1$233	= .
                           4671 	.globl	C$main.c$868$1$233
                           4672 ;main.c:868: void interruptibleFrameDelay(uint16_t frames)
                           4673 ;	---------------------------------
                           4674 ; Function interruptibleFrameDelay
                           4675 ; ---------------------------------
   167D                    4676 _interruptibleFrameDelay::
   167D DD E5         [15] 4677 	push	ix
   167F DD 21 00 00   [14] 4678 	ld	ix,#0
   1683 DD 39         [15] 4679 	add	ix,sp
                     1685  4680 	C$main.c$870$2$258	= .
                           4681 	.globl	C$main.c$870$2$258
                           4682 ;main.c:870: while (frames--)
   1685 DD 4E 04      [19] 4683 	ld	c,4 (ix)
   1688 DD 46 05      [19] 4684 	ld	b,5 (ix)
   168B                    4685 00103$:
   168B 59            [ 4] 4686 	ld	e, c
   168C 50            [ 4] 4687 	ld	d, b
   168D 0B            [ 6] 4688 	dec	bc
   168E 7A            [ 4] 4689 	ld	a, d
   168F B3            [ 4] 4690 	or	a,e
   1690 28 12         [12] 4691 	jr	Z,00106$
                     1692  4692 	C$main.c$872$2$258	= .
                           4693 	.globl	C$main.c$872$2$258
                           4694 ;main.c:872: SMS_waitForVBlank();
   1692 C5            [11] 4695 	push	bc
   1693 CDr00r00      [17] 4696 	call	_SMS_waitForVBlank
   1696 C1            [10] 4697 	pop	bc
                     1697  4698 	C$main.c$874$2$258	= .
                           4699 	.globl	C$main.c$874$2$258
                           4700 ;main.c:874: if (inlib_port1.sms.buttons)
   1697 3Ar01r00      [13] 4701 	ld	a, (#(_inlib_port1 + 0x0001) + 0)
   169A B7            [ 4] 4702 	or	a, a
   169B 28 EE         [12] 4703 	jr	Z,00103$
                     169D  4704 	C$main.c$876$3$259	= .
                           4705 	.globl	C$main.c$876$3$259
                           4706 ;main.c:876: start_pressed = 1;
   169D 21r17r00      [10] 4707 	ld	hl,#_start_pressed + 0
   16A0 36 01         [10] 4708 	ld	(hl), #0x01
   16A2 18 E7         [12] 4709 	jr	00103$
   16A4                    4710 00106$:
   16A4 DD E1         [14] 4711 	pop	ix
                     16A6  4712 	C$main.c$879$1$257	= .
                           4713 	.globl	C$main.c$879$1$257
                     16A6  4714 	XG$interruptibleFrameDelay$0$0	= .
                           4715 	.globl	XG$interruptibleFrameDelay$0$0
   16A6 C9            [10] 4716 	ret
                     16A7  4717 	G$main$0$0	= .
                           4718 	.globl	G$main$0$0
                     16A7  4719 	C$main.c$881$1$257	= .
                           4720 	.globl	C$main.c$881$1$257
                           4721 ;main.c:881: void main(void)
                           4722 ;	---------------------------------
                           4723 ; Function main
                           4724 ; ---------------------------------
   16A7                    4725 _main::
   16A7 DD E5         [15] 4726 	push	ix
   16A9 DD 21 00 00   [14] 4727 	ld	ix,#0
   16AD DD 39         [15] 4728 	add	ix,sp
   16AF 21 F3 FF      [10] 4729 	ld	hl, #-13
   16B2 39            [11] 4730 	add	hl, sp
   16B3 F9            [ 6] 4731 	ld	sp, hl
                     16B4  4732 	C$main.c$884$1$257	= .
                           4733 	.globl	C$main.c$884$1$257
                           4734 ;main.c:884: int px = (DRAWAREA_TILES_W / 2) * 8;
   16B4 01 60 00      [10] 4735 	ld	bc, #0x0060
                     16B7  4736 	C$main.c$885$1$257	= .
                           4737 	.globl	C$main.c$885$1$257
                           4738 ;main.c:885: int py = (DRAWAREA_TILES_H / 2) * 8;
   16B7 DD 36 FB 38   [19] 4739 	ld	-5 (ix), #0x38
   16BB DD 36 FC 00   [19] 4740 	ld	-4 (ix), #0x00
                     16BF  4741 	C$main.c$886$1$257	= .
                           4742 	.globl	C$main.c$886$1$257
                           4743 ;main.c:886: int last_px = px;
   16BF DD 36 F7 60   [19] 4744 	ld	-9 (ix), #0x60
   16C3 DD 36 F8 00   [19] 4745 	ld	-8 (ix), #0x00
                     16C7  4746 	C$main.c$887$1$257	= .
                           4747 	.globl	C$main.c$887$1$257
                           4748 ;main.c:887: int last_py = py;
   16C7 DD 36 F9 38   [19] 4749 	ld	-7 (ix), #0x38
   16CB DD 36 FA 00   [19] 4750 	ld	-6 (ix), #0x00
                     16CF  4751 	C$main.c$889$1$261	= .
                           4752 	.globl	C$main.c$889$1$261
                           4753 ;main.c:889: SMS_init();
   16CF C5            [11] 4754 	push	bc
   16D0 CDr00r00      [17] 4755 	call	_SMS_init
   16D3 21 40 01      [10] 4756 	ld	hl, #0x0140
   16D6 CDr00r00      [17] 4757 	call	_SMS_VDPturnOffFeature
   16D9 21 00 08      [10] 4758 	ld	hl, #0x0800
   16DC E5            [11] 4759 	push	hl
   16DD 21r00r00      [10] 4760 	ld	hl, #_main_tiles
   16E0 E5            [11] 4761 	push	hl
   16E1 AF            [ 4] 4762 	xor	a, a
   16E2 F5            [11] 4763 	push	af
   16E3 33            [ 6] 4764 	inc	sp
   16E4 21r00r00      [10] 4765 	ld	hl, #_main_pal
   16E7 E5            [11] 4766 	push	hl
   16E8 CDr00r00      [17] 4767 	call	_util_smsClear
   16EB 21 07 00      [10] 4768 	ld	hl, #7
   16EE 39            [11] 4769 	add	hl, sp
   16EF F9            [ 6] 4770 	ld	sp, hl
   16F0 CDr46r13      [17] 4771 	call	_inputDiag_inlib
   16F3 21 40 01      [10] 4772 	ld	hl, #0x0140
   16F6 CDr00r00      [17] 4773 	call	_SMS_VDPturnOffFeature
   16F9 21 00 08      [10] 4774 	ld	hl, #0x0800
   16FC E5            [11] 4775 	push	hl
   16FD 21r00r00      [10] 4776 	ld	hl, #_main_tiles
   1700 E5            [11] 4777 	push	hl
   1701 AF            [ 4] 4778 	xor	a, a
   1702 F5            [11] 4779 	push	af
   1703 33            [ 6] 4780 	inc	sp
   1704 21r00r00      [10] 4781 	ld	hl, #_main_pal
   1707 E5            [11] 4782 	push	hl
   1708 CDr00r00      [17] 4783 	call	_util_smsClear
   170B 21 07 00      [10] 4784 	ld	hl, #7
   170E 39            [11] 4785 	add	hl, sp
   170F F9            [ 6] 4786 	ld	sp, hl
   1710 2E 01         [ 7] 4787 	ld	l, #0x01
   1712 CDr00r00      [17] 4788 	call	_SMS_useFirstHalfTilesforSprites
   1715 21r00r00      [10] 4789 	ld	hl, #_main_pal
   1718 CDr00r00      [17] 4790 	call	_SMS_loadSpritePalette
   171B 21 00 01      [10] 4791 	ld	hl, #0x0100
   171E E5            [11] 4792 	push	hl
   171F 21 40 00      [10] 4793 	ld	hl, #0x0040
   1722 E5            [11] 4794 	push	hl
   1723 21r00r00      [10] 4795 	ld	hl, #_sprites_tiles
   1726 E5            [11] 4796 	push	hl
   1727 CDr00r00      [17] 4797 	call	_SMS_loadTiles
   172A 21 06 00      [10] 4798 	ld	hl, #6
   172D 39            [11] 4799 	add	hl, sp
   172E F9            [ 6] 4800 	ld	sp, hl
   172F C1            [10] 4801 	pop	bc
                     1730  4802 	C$main.c$926$1$261	= .
                           4803 	.globl	C$main.c$926$1$261
                           4804 ;main.c:926: __endasm;
   1730 F5            [11] 4805 	push	af
   1731 3E 02         [ 7] 4806 	ld	a, #2
   1733 32 FF FF      [13] 4807 	ld	(0xFFFF), a
   1736 F1            [10] 4808 	pop	af
                     1737  4809 	C$main.c$927$1$261	= .
                           4810 	.globl	C$main.c$927$1$261
                           4811 ;main.c:927: SMS_mapROMBank(2);
   1737 21 FF FF      [10] 4812 	ld	hl,#_ROM_bank_to_be_mapped_on_slot2 + 0
   173A 36 02         [10] 4813 	ld	(hl), #0x02
                     173C  4814 	C$main.c$929$1$261	= .
                           4815 	.globl	C$main.c$929$1$261
                           4816 ;main.c:929: setupSprite(POINTER_SID, 0, 0, POINTER_TID);
   173C C5            [11] 4817 	push	bc
   173D 21 00 40      [10] 4818 	ld	hl, #0x4000
   1740 E5            [11] 4819 	push	hl
   1741 26 00         [ 7] 4820 	ld	h, #0x00
   1743 E5            [11] 4821 	push	hl
   1744 CDr00r00      [17] 4822 	call	_setupSprite
   1747 F1            [10] 4823 	pop	af
   1748 21 20 41      [10] 4824 	ld	hl, #0x4120
   174B E3            [19] 4825 	ex	(sp),hl
   174C 21 03 20      [10] 4826 	ld	hl, #0x2003
   174F E5            [11] 4827 	push	hl
   1750 CDr00r00      [17] 4828 	call	_setupSprite
   1753 F1            [10] 4829 	pop	af
   1754 21 20 42      [10] 4830 	ld	hl, #0x4220
   1757 E3            [19] 4831 	ex	(sp),hl
   1758 21 04 D8      [10] 4832 	ld	hl, #0xd804
   175B E5            [11] 4833 	push	hl
   175C CDr00r00      [17] 4834 	call	_setupSprite
   175F F1            [10] 4835 	pop	af
   1760 21 90 43      [10] 4836 	ld	hl, #0x4390
   1763 E3            [19] 4837 	ex	(sp),hl
   1764 21 05 20      [10] 4838 	ld	hl, #0x2005
   1767 E5            [11] 4839 	push	hl
   1768 CDr00r00      [17] 4840 	call	_setupSprite
   176B F1            [10] 4841 	pop	af
   176C 21 90 44      [10] 4842 	ld	hl, #0x4490
   176F E3            [19] 4843 	ex	(sp),hl
   1770 21 06 D8      [10] 4844 	ld	hl, #0xd806
   1773 E5            [11] 4845 	push	hl
   1774 CDr00r00      [17] 4846 	call	_setupSprite
   1777 F1            [10] 4847 	pop	af
   1778 21 A7 45      [10] 4848 	ld	hl, #0x45a7
   177B E3            [19] 4849 	ex	(sp),hl
   177C 21 01 17      [10] 4850 	ld	hl, #0x1701
   177F E5            [11] 4851 	push	hl
   1780 CDr00r00      [17] 4852 	call	_setupSprite
   1783 F1            [10] 4853 	pop	af
   1784 21 A7 45      [10] 4854 	ld	hl, #0x45a7
   1787 E3            [19] 4855 	ex	(sp),hl
   1788 21 02 E7      [10] 4856 	ld	hl, #0xe702
   178B E5            [11] 4857 	push	hl
   178C CDr00r00      [17] 4858 	call	_setupSprite
   178F F1            [10] 4859 	pop	af
   1790 F1            [10] 4860 	pop	af
   1791 CDr00r00      [17] 4861 	call	_SMS_waitForVBlank
   1794 CDr00r00      [17] 4862 	call	_SMS_copySpritestoSAT
   1797 C1            [10] 4863 	pop	bc
                     1798  4864 	C$main.c$945$1$261	= .
                           4865 	.globl	C$main.c$945$1$261
                           4866 ;main.c:945: drawbuf = &(SAVESTRUCT->drawbuf[0]);
   1798 11r00r00      [10] 4867 	ld	de, #_g_savedata
   179B 21 05 00      [10] 4868 	ld	hl, #0x0005
   179E 19            [11] 4869 	add	hl, de
   179F 22r15r00      [16] 4870 	ld	(_drawbuf), hl
                     17A2  4871 	C$main.c$947$1$261	= .
                           4872 	.globl	C$main.c$947$1$261
                           4873 ;main.c:947: setupTilemap();
   17A2 C5            [11] 4874 	push	bc
   17A3 CDr6Cr03      [17] 4875 	call	_setupTilemap
   17A6 AF            [ 4] 4876 	xor	a, a
   17A7 F5            [11] 4877 	push	af
   17A8 33            [ 6] 4878 	inc	sp
   17A9 21 38 00      [10] 4879 	ld	hl, #0x0038
   17AC E5            [11] 4880 	push	hl
   17AD 2E 60         [ 7] 4881 	ld	l, #0x60
   17AF E5            [11] 4882 	push	hl
   17B0 2E 38         [ 7] 4883 	ld	l, #0x38
   17B2 E5            [11] 4884 	push	hl
   17B3 2E 60         [ 7] 4885 	ld	l, #0x60
   17B5 E5            [11] 4886 	push	hl
   17B6 CDr40r09      [17] 4887 	call	_updateDisplay
   17B9 21 09 00      [10] 4888 	ld	hl, #9
   17BC 39            [11] 4889 	add	hl, sp
   17BD F9            [ 6] 4890 	ld	sp, hl
   17BE CDr04r01      [17] 4891 	call	_syncDisplay
   17C1 21 40 01      [10] 4892 	ld	hl, #0x0140
   17C4 CDr00r00      [17] 4893 	call	_SMS_VDPturnOnFeature
   17C7 21r00r00      [10] 4894 	ld	hl, #_promenade_psgc
   17CA E5            [11] 4895 	push	hl
   17CB CDr00r00      [17] 4896 	call	_PSGPlayNoRepeat
   17CE F1            [10] 4897 	pop	af
   17CF CDrBFr0E      [17] 4898 	call	_runScript
   17D2 CDr00r00      [17] 4899 	call	_savedata_init
   17D5 C1            [10] 4900 	pop	bc
                     17D6  4901 	C$main.c$959$1$261	= .
                           4902 	.globl	C$main.c$959$1$261
                           4903 ;main.c:959: if (!savestruct_valid(SAVESTRUCT))
   17D6 11r00r00      [10] 4904 	ld	de, #_g_savedata
   17D9 C5            [11] 4905 	push	bc
   17DA D5            [11] 4906 	push	de
   17DB CDr00r00      [17] 4907 	call	_savestruct_valid
   17DE F1            [10] 4908 	pop	af
   17DF C1            [10] 4909 	pop	bc
   17E0 7D            [ 4] 4910 	ld	a, l
   17E1 B7            [ 4] 4911 	or	a, a
   17E2 20 0D         [12] 4912 	jr	NZ,00102$
                     17E4  4913 	C$main.c$961$2$262	= .
                           4914 	.globl	C$main.c$961$2$262
                           4915 ;main.c:961: savestruct_reset(SAVESTRUCT);
   17E4 11r00r00      [10] 4916 	ld	de, #_g_savedata
   17E7 C5            [11] 4917 	push	bc
   17E8 D5            [11] 4918 	push	de
   17E9 CDr00r00      [17] 4919 	call	_savestruct_reset
   17EC F1            [10] 4920 	pop	af
   17ED CDr00r00      [17] 4921 	call	_savedata_commit
   17F0 C1            [10] 4922 	pop	bc
   17F1                    4923 00102$:
                     17F1  4924 	C$main.c$965$1$261	= .
                           4925 	.globl	C$main.c$965$1$261
                           4926 ;main.c:965: PSGStop();
   17F1 C5            [11] 4927 	push	bc
   17F2 CDr00r00      [17] 4928 	call	_PSGStop
   17F5 CDr04r01      [17] 4929 	call	_syncDisplay
   17F8 C1            [10] 4930 	pop	bc
   17F9                    4931 00207$:
                     17F9  4932 	C$main.c$972$3$264	= .
                           4933 	.globl	C$main.c$972$3$264
                           4934 ;main.c:972: SMS_waitForVBlank();
   17F9 C5            [11] 4935 	push	bc
   17FA CDr00r00      [17] 4936 	call	_SMS_waitForVBlank
   17FD CDr00r00      [17] 4937 	call	_SMS_copySpritestoSAT
   1800 CDr00r00      [17] 4938 	call	_PSGFrame
   1803 CDr00r00      [17] 4939 	call	_PSGSFXFrame
   1806 CDr00r00      [17] 4940 	call	_inlib_poll
   1809 C1            [10] 4941 	pop	bc
                     180A  4942 	C$main.c$978$3$264	= .
                           4943 	.globl	C$main.c$978$3$264
                           4944 ;main.c:978: switch (inlib_port1.type)
   180A 3Ar00r00      [13] 4945 	ld	a, (#_inlib_port1+0)
   180D DD 77 FF      [19] 4946 	ld	-1 (ix), a
   1810 3E 05         [ 7] 4947 	ld	a, #0x05
   1812 DD 96 FF      [19] 4948 	sub	a, -1 (ix)
   1815 DAr9Cr1D      [10] 4949 	jp	C, 00203$
   1818 DD 5E FF      [19] 4950 	ld	e, -1 (ix)
   181B 16 00         [ 7] 4951 	ld	d, #0x00
   181D 21r24r18      [10] 4952 	ld	hl, #00399$
   1820 19            [11] 4953 	add	hl, de
   1821 19            [11] 4954 	add	hl, de
   1822 19            [11] 4955 	add	hl, de
   1823 E9            [ 4] 4956 	jp	(hl)
   1824                    4957 00399$:
   1824 C3r36r18      [10] 4958 	jp	00103$
   1827 C3r47r19      [10] 4959 	jp	00127$
   182A C3r1Cr1A      [10] 4960 	jp	00137$
   182D C3rE9r1C      [10] 4961 	jp	00191$
   1830 C3r02r1B      [10] 4962 	jp	00153$
   1833 C3rDFr1B      [10] 4963 	jp	00167$
                     1836  4964 	C$main.c$980$4$265	= .
                           4965 	.globl	C$main.c$980$4$265
                           4966 ;main.c:980: case INLIB_TYPE_SMS:
   1836                    4967 00103$:
                     1836  4968 	C$main.c$981$4$265	= .
                           4969 	.globl	C$main.c$981$4$265
                           4970 ;main.c:981: keys = SMS_getKeysPressed();
   1836 C5            [11] 4971 	push	bc
   1837 CDr00r00      [17] 4972 	call	_SMS_getKeysPressed
   183A C1            [10] 4973 	pop	bc
   183B DD 75 F5      [19] 4974 	ld	-11 (ix), l
   183E DD 74 F6      [19] 4975 	ld	-10 (ix), h
                     1841  4976 	C$main.c$982$4$265	= .
                           4977 	.globl	C$main.c$982$4$265
                           4978 ;main.c:982: now = SMS_getKeysStatus();
   1841 C5            [11] 4979 	push	bc
   1842 CDr00r00      [17] 4980 	call	_SMS_getKeysStatus
   1845 C1            [10] 4981 	pop	bc
   1846 33            [ 6] 4982 	inc	sp
   1847 33            [ 6] 4983 	inc	sp
   1848 E5            [11] 4984 	push	hl
                     1849  4985 	C$main.c$984$4$265	= .
                           4986 	.globl	C$main.c$984$4$265
                           4987 ;main.c:984: if (now & PORT_A_KEY_UP)
   1849 DD CB F3 46   [20] 4988 	bit	0, -13 (ix)
   184D 28 1C         [12] 4989 	jr	Z,00107$
                     184F  4990 	C$main.c$986$5$266	= .
                           4991 	.globl	C$main.c$986$5$266
                           4992 ;main.c:986: if (py > 0)
   184F AF            [ 4] 4993 	xor	a, a
   1850 DD BE FB      [19] 4994 	cp	a, -5 (ix)
   1853 DD 9E FC      [19] 4995 	sbc	a, -4 (ix)
   1856 E2r5Br18      [10] 4996 	jp	PO, 00401$
   1859 EE 80         [ 7] 4997 	xor	a, #0x80
   185B                    4998 00401$:
   185B F2r6Br18      [10] 4999 	jp	P, 00107$
                     185E  5000 	C$main.c$988$6$267	= .
                           5001 	.globl	C$main.c$988$6$267
                           5002 ;main.c:988: py--;
   185E DD 6E FB      [19] 5003 	ld	l,-5 (ix)
   1861 DD 66 FC      [19] 5004 	ld	h,-4 (ix)
   1864 2B            [ 6] 5005 	dec	hl
   1865 DD 75 FB      [19] 5006 	ld	-5 (ix), l
   1868 DD 74 FC      [19] 5007 	ld	-4 (ix), h
   186B                    5008 00107$:
                     186B  5009 	C$main.c$991$4$265	= .
                           5010 	.globl	C$main.c$991$4$265
                           5011 ;main.c:991: if (now & PORT_A_KEY_DOWN)
   186B DD CB F3 4E   [20] 5012 	bit	1, -13 (ix)
   186F 28 17         [12] 5013 	jr	Z,00111$
                     1871  5014 	C$main.c$993$5$268	= .
                           5015 	.globl	C$main.c$993$5$268
                           5016 ;main.c:993: if (py < MAX_PY)
   1871 DD 7E FB      [19] 5017 	ld	a, -5 (ix)
   1874 D6 77         [ 7] 5018 	sub	a, #0x77
   1876 DD 7E FC      [19] 5019 	ld	a, -4 (ix)
   1879 17            [ 4] 5020 	rla
   187A 3F            [ 4] 5021 	ccf
   187B 1F            [ 4] 5022 	rra
   187C DE 80         [ 7] 5023 	sbc	a, #0x80
   187E 30 08         [12] 5024 	jr	NC,00111$
                     1880  5025 	C$main.c$995$6$269	= .
                           5026 	.globl	C$main.c$995$6$269
                           5027 ;main.c:995: py++;
   1880 DD 34 FB      [23] 5028 	inc	-5 (ix)
   1883 20 03         [12] 5029 	jr	NZ,00403$
   1885 DD 34 FC      [23] 5030 	inc	-4 (ix)
   1888                    5031 00403$:
   1888                    5032 00111$:
                     1888  5033 	C$main.c$998$4$265	= .
                           5034 	.globl	C$main.c$998$4$265
                           5035 ;main.c:998: if (now & PORT_A_KEY_LEFT)
   1888 DD CB F3 56   [20] 5036 	bit	2, -13 (ix)
   188C 28 0C         [12] 5037 	jr	Z,00115$
                     188E  5038 	C$main.c$1000$5$270	= .
                           5039 	.globl	C$main.c$1000$5$270
                           5040 ;main.c:1000: if (px > 0)
   188E AF            [ 4] 5041 	xor	a, a
   188F B9            [ 4] 5042 	cp	a, c
   1890 98            [ 4] 5043 	sbc	a, b
   1891 E2r96r18      [10] 5044 	jp	PO, 00405$
   1894 EE 80         [ 7] 5045 	xor	a, #0x80
   1896                    5046 00405$:
   1896 F2r9Ar18      [10] 5047 	jp	P, 00115$
                     1899  5048 	C$main.c$1002$6$271	= .
                           5049 	.globl	C$main.c$1002$6$271
                           5050 ;main.c:1002: px--;
   1899 0B            [ 6] 5051 	dec	bc
   189A                    5052 00115$:
                     189A  5053 	C$main.c$1005$4$265	= .
                           5054 	.globl	C$main.c$1005$4$265
                           5055 ;main.c:1005: if (now & PORT_A_KEY_RIGHT)
   189A DD CB F3 5E   [20] 5056 	bit	3, -13 (ix)
   189E 28 0C         [12] 5057 	jr	Z,00119$
                     18A0  5058 	C$main.c$1007$5$272	= .
                           5059 	.globl	C$main.c$1007$5$272
                           5060 ;main.c:1007: if (px < MAX_PX)
   18A0 79            [ 4] 5061 	ld	a, c
   18A1 D6 BF         [ 7] 5062 	sub	a, #0xbf
   18A3 78            [ 4] 5063 	ld	a, b
   18A4 17            [ 4] 5064 	rla
   18A5 3F            [ 4] 5065 	ccf
   18A6 1F            [ 4] 5066 	rra
   18A7 DE 80         [ 7] 5067 	sbc	a, #0x80
   18A9 30 01         [12] 5068 	jr	NC,00119$
                     18AB  5069 	C$main.c$1009$6$273	= .
                           5070 	.globl	C$main.c$1009$6$273
                           5071 ;main.c:1009: px++;
   18AB 03            [ 6] 5072 	inc	bc
   18AC                    5073 00119$:
                     18AC  5074 	C$main.c$1013$4$265	= .
                           5075 	.globl	C$main.c$1013$4$265
                           5076 ;main.c:1013: if ((last_px != px) || (last_py != py))
   18AC DD 7E F7      [19] 5077 	ld	a, -9 (ix)
   18AF 91            [ 4] 5078 	sub	a, c
   18B0 20 16         [12] 5079 	jr	NZ,00120$
   18B2 DD 7E F8      [19] 5080 	ld	a, -8 (ix)
   18B5 90            [ 4] 5081 	sub	a, b
   18B6 20 10         [12] 5082 	jr	NZ,00120$
   18B8 DD 7E FB      [19] 5083 	ld	a, -5 (ix)
   18BB DD 96 F9      [19] 5084 	sub	a, -7 (ix)
   18BE 20 08         [12] 5085 	jr	NZ,00409$
   18C0 DD 7E FC      [19] 5086 	ld	a, -4 (ix)
   18C3 DD 96 FA      [19] 5087 	sub	a, -6 (ix)
   18C6 28 35         [12] 5088 	jr	Z,00121$
   18C8                    5089 00409$:
   18C8                    5090 00120$:
                     18C8  5091 	C$main.c$1015$5$274	= .
                           5092 	.globl	C$main.c$1015$5$274
                           5093 ;main.c:1015: updateDisplay(px, py, last_px, last_py, 0);
   18C8 C5            [11] 5094 	push	bc
   18C9 AF            [ 4] 5095 	xor	a, a
   18CA F5            [11] 5096 	push	af
   18CB 33            [ 6] 5097 	inc	sp
   18CC DD 6E F9      [19] 5098 	ld	l,-7 (ix)
   18CF DD 66 FA      [19] 5099 	ld	h,-6 (ix)
   18D2 E5            [11] 5100 	push	hl
   18D3 DD 6E F7      [19] 5101 	ld	l,-9 (ix)
   18D6 DD 66 F8      [19] 5102 	ld	h,-8 (ix)
   18D9 E5            [11] 5103 	push	hl
   18DA DD 6E FB      [19] 5104 	ld	l,-5 (ix)
   18DD DD 66 FC      [19] 5105 	ld	h,-4 (ix)
   18E0 E5            [11] 5106 	push	hl
   18E1 C5            [11] 5107 	push	bc
   18E2 CDr40r09      [17] 5108 	call	_updateDisplay
   18E5 21 09 00      [10] 5109 	ld	hl, #9
   18E8 39            [11] 5110 	add	hl, sp
   18E9 F9            [ 6] 5111 	ld	sp, hl
   18EA C1            [10] 5112 	pop	bc
                     18EB  5113 	C$main.c$1017$5$274	= .
                           5114 	.globl	C$main.c$1017$5$274
                           5115 ;main.c:1017: last_px = px;
   18EB DD 71 F7      [19] 5116 	ld	-9 (ix), c
   18EE DD 70 F8      [19] 5117 	ld	-8 (ix), b
                     18F1  5118 	C$main.c$1018$5$274	= .
                           5119 	.globl	C$main.c$1018$5$274
                           5120 ;main.c:1018: last_py = py;
   18F1 DD 7E FB      [19] 5121 	ld	a, -5 (ix)
   18F4 DD 77 F9      [19] 5122 	ld	-7 (ix), a
   18F7 DD 7E FC      [19] 5123 	ld	a, -4 (ix)
   18FA DD 77 FA      [19] 5124 	ld	-6 (ix), a
   18FD                    5125 00121$:
                     18FD  5126 	C$main.c$1021$4$265	= .
                           5127 	.globl	C$main.c$1021$4$265
                           5128 ;main.c:1021: if (keys & PORT_A_KEY_1)
   18FD DD CB F5 66   [20] 5129 	bit	4, -11 (ix)
   1901 28 32         [12] 5130 	jr	Z,00124$
                     1903  5131 	C$main.c$1023$5$275	= .
                           5132 	.globl	C$main.c$1023$5$275
                           5133 ;main.c:1023: drawing = !drawing;
   1903 FD 21r00r00   [14] 5134 	ld	iy, #_drawing
   1907 FD 7E 00      [19] 5135 	ld	a, 0 (iy)
   190A D6 01         [ 7] 5136 	sub	a,#0x01
   190C 3E 00         [ 7] 5137 	ld	a, #0x00
   190E 17            [ 4] 5138 	rla
   190F FD 77 00      [19] 5139 	ld	0 (iy), a
                     1912  5140 	C$main.c$1024$5$275	= .
                           5141 	.globl	C$main.c$1024$5$275
                           5142 ;main.c:1024: updateDisplay(px, py, last_px, last_py, 0);
   1912 C5            [11] 5143 	push	bc
   1913 AF            [ 4] 5144 	xor	a, a
   1914 F5            [11] 5145 	push	af
   1915 33            [ 6] 5146 	inc	sp
   1916 DD 6E F9      [19] 5147 	ld	l,-7 (ix)
   1919 DD 66 FA      [19] 5148 	ld	h,-6 (ix)
   191C E5            [11] 5149 	push	hl
   191D DD 6E F7      [19] 5150 	ld	l,-9 (ix)
   1920 DD 66 F8      [19] 5151 	ld	h,-8 (ix)
   1923 E5            [11] 5152 	push	hl
   1924 DD 6E FB      [19] 5153 	ld	l,-5 (ix)
   1927 DD 66 FC      [19] 5154 	ld	h,-4 (ix)
   192A E5            [11] 5155 	push	hl
   192B C5            [11] 5156 	push	bc
   192C CDr40r09      [17] 5157 	call	_updateDisplay
   192F 21 09 00      [10] 5158 	ld	hl, #9
   1932 39            [11] 5159 	add	hl, sp
   1933 F9            [ 6] 5160 	ld	sp, hl
   1934 C1            [10] 5161 	pop	bc
   1935                    5162 00124$:
                     1935  5163 	C$main.c$1027$4$265	= .
                           5164 	.globl	C$main.c$1027$4$265
                           5165 ;main.c:1027: if (keys & PORT_A_KEY_2)
   1935 DD CB F5 6E   [20] 5166 	bit	5, -11 (ix)
   1939 CAr9Cr1D      [10] 5167 	jp	Z,00203$
                     193C  5168 	C$main.c$1029$5$276	= .
                           5169 	.globl	C$main.c$1029$5$276
                           5170 ;main.c:1029: savedata_commit();
   193C C5            [11] 5171 	push	bc
   193D CDr00r00      [17] 5172 	call	_savedata_commit
   1940 CDr04r01      [17] 5173 	call	_syncDisplay
   1943 C1            [10] 5174 	pop	bc
                     1944  5175 	C$main.c$1032$4$265	= .
                           5176 	.globl	C$main.c$1032$4$265
                           5177 ;main.c:1032: break;
   1944 C3r9Cr1D      [10] 5178 	jp	00203$
                     1947  5179 	C$main.c$1034$4$265	= .
                           5180 	.globl	C$main.c$1034$4$265
                           5181 ;main.c:1034: case INLIB_TYPE_PADDLE:
   1947                    5182 00127$:
                     1947  5183 	C$main.c$1036$4$265	= .
                           5184 	.globl	C$main.c$1036$4$265
                           5185 ;main.c:1036: px = inlib_port1.paddle.value;
   1947 21r03r00      [10] 5186 	ld	hl, #_inlib_port1 + 3
   194A 4E            [ 7] 5187 	ld	c, (hl)
   194B 06 00         [ 7] 5188 	ld	b, #0x00
                     194D  5189 	C$main.c$1037$4$265	= .
                           5190 	.globl	C$main.c$1037$4$265
                           5191 ;main.c:1037: py = 255 - inlib_port2.paddle.value;
   194D 21r03r00      [10] 5192 	ld	hl, #(_inlib_port2 + 0x0003) + 0
   1950 5E            [ 7] 5193 	ld	e, (hl)
   1951 16 00         [ 7] 5194 	ld	d, #0x00
   1953 3E FF         [ 7] 5195 	ld	a, #0xff
   1955 93            [ 4] 5196 	sub	a, e
   1956 DD 77 FB      [19] 5197 	ld	-5 (ix), a
   1959 3E 00         [ 7] 5198 	ld	a, #0x00
   195B 9A            [ 4] 5199 	sbc	a, d
   195C DD 77 FC      [19] 5200 	ld	-4 (ix), a
                     195F  5201 	C$main.c$1039$4$265	= .
                           5202 	.globl	C$main.c$1039$4$265
                           5203 ;main.c:1039: if (px > MAX_PX)
   195F 3E BF         [ 7] 5204 	ld	a, #0xbf
   1961 B9            [ 4] 5205 	cp	a, c
   1962 3E 00         [ 7] 5206 	ld	a, #0x00
   1964 98            [ 4] 5207 	sbc	a, b
   1965 E2r6Ar19      [10] 5208 	jp	PO, 00412$
   1968 EE 80         [ 7] 5209 	xor	a, #0x80
   196A                    5210 00412$:
   196A F2r70r19      [10] 5211 	jp	P, 00129$
                     196D  5212 	C$main.c$1041$5$277	= .
                           5213 	.globl	C$main.c$1041$5$277
                           5214 ;main.c:1041: px = MAX_PX;
   196D 01 BF 00      [10] 5215 	ld	bc, #0x00bf
   1970                    5216 00129$:
                     1970  5217 	C$main.c$1043$4$265	= .
                           5218 	.globl	C$main.c$1043$4$265
                           5219 ;main.c:1043: if (py > MAX_PY)
   1970 3E 77         [ 7] 5220 	ld	a, #0x77
   1972 DD BE FB      [19] 5221 	cp	a, -5 (ix)
   1975 3E 00         [ 7] 5222 	ld	a, #0x00
   1977 DD 9E FC      [19] 5223 	sbc	a, -4 (ix)
   197A E2r7Fr19      [10] 5224 	jp	PO, 00413$
   197D EE 80         [ 7] 5225 	xor	a, #0x80
   197F                    5226 00413$:
   197F F2r8Ar19      [10] 5227 	jp	P, 00131$
                     1982  5228 	C$main.c$1045$5$278	= .
                           5229 	.globl	C$main.c$1045$5$278
                           5230 ;main.c:1045: py = MAX_PY;
   1982 DD 36 FB 77   [19] 5231 	ld	-5 (ix), #0x77
   1986 DD 36 FC 00   [19] 5232 	ld	-4 (ix), #0x00
   198A                    5233 00131$:
                     198A  5234 	C$main.c$1048$4$265	= .
                           5235 	.globl	C$main.c$1048$4$265
                           5236 ;main.c:1048: if ((last_px != px) || (last_py != py))
   198A DD 7E F7      [19] 5237 	ld	a, -9 (ix)
   198D 91            [ 4] 5238 	sub	a, c
   198E 20 16         [12] 5239 	jr	NZ,00132$
   1990 DD 7E F8      [19] 5240 	ld	a, -8 (ix)
   1993 90            [ 4] 5241 	sub	a, b
   1994 20 10         [12] 5242 	jr	NZ,00132$
   1996 DD 7E FB      [19] 5243 	ld	a, -5 (ix)
   1999 DD 96 F9      [19] 5244 	sub	a, -7 (ix)
   199C 20 08         [12] 5245 	jr	NZ,00416$
   199E DD 7E FC      [19] 5246 	ld	a, -4 (ix)
   19A1 DD 96 FA      [19] 5247 	sub	a, -6 (ix)
   19A4 28 3A         [12] 5248 	jr	Z,00133$
   19A6                    5249 00416$:
   19A6                    5250 00132$:
                     19A6  5251 	C$main.c$1050$5$279	= .
                           5252 	.globl	C$main.c$1050$5$279
                           5253 ;main.c:1050: fill_mode = 1;
   19A6 21r02r00      [10] 5254 	ld	hl,#_fill_mode + 0
   19A9 36 01         [10] 5255 	ld	(hl), #0x01
                     19AB  5256 	C$main.c$1051$5$279	= .
                           5257 	.globl	C$main.c$1051$5$279
                           5258 ;main.c:1051: updateDisplay(px, py, last_px, last_py, 0);
   19AB C5            [11] 5259 	push	bc
   19AC AF            [ 4] 5260 	xor	a, a
   19AD F5            [11] 5261 	push	af
   19AE 33            [ 6] 5262 	inc	sp
   19AF DD 6E F9      [19] 5263 	ld	l,-7 (ix)
   19B2 DD 66 FA      [19] 5264 	ld	h,-6 (ix)
   19B5 E5            [11] 5265 	push	hl
   19B6 DD 6E F7      [19] 5266 	ld	l,-9 (ix)
   19B9 DD 66 F8      [19] 5267 	ld	h,-8 (ix)
   19BC E5            [11] 5268 	push	hl
   19BD DD 6E FB      [19] 5269 	ld	l,-5 (ix)
   19C0 DD 66 FC      [19] 5270 	ld	h,-4 (ix)
   19C3 E5            [11] 5271 	push	hl
   19C4 C5            [11] 5272 	push	bc
   19C5 CDr40r09      [17] 5273 	call	_updateDisplay
   19C8 21 09 00      [10] 5274 	ld	hl, #9
   19CB 39            [11] 5275 	add	hl, sp
   19CC F9            [ 6] 5276 	ld	sp, hl
   19CD C1            [10] 5277 	pop	bc
                     19CE  5278 	C$main.c$1053$5$279	= .
                           5279 	.globl	C$main.c$1053$5$279
                           5280 ;main.c:1053: last_px = px;
   19CE DD 71 F7      [19] 5281 	ld	-9 (ix), c
   19D1 DD 70 F8      [19] 5282 	ld	-8 (ix), b
                     19D4  5283 	C$main.c$1054$5$279	= .
                           5284 	.globl	C$main.c$1054$5$279
                           5285 ;main.c:1054: last_py = py;
   19D4 DD 7E FB      [19] 5286 	ld	a, -5 (ix)
   19D7 DD 77 F9      [19] 5287 	ld	-7 (ix), a
   19DA DD 7E FC      [19] 5288 	ld	a, -4 (ix)
   19DD DD 77 FA      [19] 5289 	ld	-6 (ix), a
   19E0                    5290 00133$:
                     19E0  5291 	C$main.c$1057$4$265	= .
                           5292 	.globl	C$main.c$1057$4$265
                           5293 ;main.c:1057: if (inlib_port1.paddle.pressed & PADDLE_BUTTON)
   19E0 3Ar02r00      [13] 5294 	ld	a, (#_inlib_port1 + 2)
   19E3 0F            [ 4] 5295 	rrca
   19E4 D2r9Cr1D      [10] 5296 	jp	NC,00203$
                     19E7  5297 	C$main.c$1059$5$280	= .
                           5298 	.globl	C$main.c$1059$5$280
                           5299 ;main.c:1059: drawing = !drawing;
   19E7 FD 21r00r00   [14] 5300 	ld	iy, #_drawing
   19EB FD 7E 00      [19] 5301 	ld	a, 0 (iy)
   19EE D6 01         [ 7] 5302 	sub	a,#0x01
   19F0 3E 00         [ 7] 5303 	ld	a, #0x00
   19F2 17            [ 4] 5304 	rla
   19F3 FD 77 00      [19] 5305 	ld	0 (iy), a
                     19F6  5306 	C$main.c$1060$5$280	= .
                           5307 	.globl	C$main.c$1060$5$280
                           5308 ;main.c:1060: updateDisplay(px, py, last_px, last_py, 0);
   19F6 C5            [11] 5309 	push	bc
   19F7 AF            [ 4] 5310 	xor	a, a
   19F8 F5            [11] 5311 	push	af
   19F9 33            [ 6] 5312 	inc	sp
   19FA DD 6E F9      [19] 5313 	ld	l,-7 (ix)
   19FD DD 66 FA      [19] 5314 	ld	h,-6 (ix)
   1A00 E5            [11] 5315 	push	hl
   1A01 DD 6E F7      [19] 5316 	ld	l,-9 (ix)
   1A04 DD 66 F8      [19] 5317 	ld	h,-8 (ix)
   1A07 E5            [11] 5318 	push	hl
   1A08 DD 6E FB      [19] 5319 	ld	l,-5 (ix)
   1A0B DD 66 FC      [19] 5320 	ld	h,-4 (ix)
   1A0E E5            [11] 5321 	push	hl
   1A0F C5            [11] 5322 	push	bc
   1A10 CDr40r09      [17] 5323 	call	_updateDisplay
   1A13 21 09 00      [10] 5324 	ld	hl, #9
   1A16 39            [11] 5325 	add	hl, sp
   1A17 F9            [ 6] 5326 	ld	sp, hl
   1A18 C1            [10] 5327 	pop	bc
                     1A19  5328 	C$main.c$1062$4$265	= .
                           5329 	.globl	C$main.c$1062$4$265
                           5330 ;main.c:1062: break;
   1A19 C3r9Cr1D      [10] 5331 	jp	00203$
                     1A1C  5332 	C$main.c$1064$4$265	= .
                           5333 	.globl	C$main.c$1064$4$265
                           5334 ;main.c:1064: case INLIB_TYPE_MD_MOUSE:
   1A1C                    5335 00137$:
                     1A1C  5336 	C$main.c$1066$4$265	= .
                           5337 	.globl	C$main.c$1066$4$265
                           5338 ;main.c:1066: px += inlib_port1.mdmouse.x;
   1A1C 3Ar03r00      [13] 5339 	ld	a, (#_inlib_port1 + 3)
   1A1F 6F            [ 4] 5340 	ld	l, a
   1A20 17            [ 4] 5341 	rla
   1A21 9F            [ 4] 5342 	sbc	a, a
   1A22 67            [ 4] 5343 	ld	h, a
   1A23 09            [11] 5344 	add	hl,bc
   1A24 4D            [ 4] 5345 	ld	c, l
   1A25 44            [ 4] 5346 	ld	b, h
                     1A26  5347 	C$main.c$1067$4$265	= .
                           5348 	.globl	C$main.c$1067$4$265
                           5349 ;main.c:1067: py += -inlib_port1.mdmouse.y;
   1A26 3Ar04r00      [13] 5350 	ld	a, (#_inlib_port1 + 4)
   1A29 5F            [ 4] 5351 	ld	e, a
   1A2A 17            [ 4] 5352 	rla
   1A2B 9F            [ 4] 5353 	sbc	a, a
   1A2C 57            [ 4] 5354 	ld	d, a
   1A2D AF            [ 4] 5355 	xor	a, a
   1A2E 93            [ 4] 5356 	sub	a, e
   1A2F 5F            [ 4] 5357 	ld	e, a
   1A30 3E 00         [ 7] 5358 	ld	a, #0x00
   1A32 9A            [ 4] 5359 	sbc	a, d
   1A33 57            [ 4] 5360 	ld	d, a
   1A34 DD 7E FB      [19] 5361 	ld	a, -5 (ix)
   1A37 83            [ 4] 5362 	add	a, e
   1A38 DD 77 FB      [19] 5363 	ld	-5 (ix), a
   1A3B DD 7E FC      [19] 5364 	ld	a, -4 (ix)
   1A3E 8A            [ 4] 5365 	adc	a, d
   1A3F DD 77 FC      [19] 5366 	ld	-4 (ix), a
                     1A42  5367 	C$main.c$1069$4$265	= .
                           5368 	.globl	C$main.c$1069$4$265
                           5369 ;main.c:1069: if (px > MAX_PX)
   1A42 3E BF         [ 7] 5370 	ld	a, #0xbf
   1A44 B9            [ 4] 5371 	cp	a, c
   1A45 3E 00         [ 7] 5372 	ld	a, #0x00
   1A47 98            [ 4] 5373 	sbc	a, b
   1A48 E2r4Dr1A      [10] 5374 	jp	PO, 00418$
   1A4B EE 80         [ 7] 5375 	xor	a, #0x80
   1A4D                    5376 00418$:
   1A4D F2r53r1A      [10] 5377 	jp	P, 00139$
                     1A50  5378 	C$main.c$1071$5$281	= .
                           5379 	.globl	C$main.c$1071$5$281
                           5380 ;main.c:1071: px = MAX_PX;
   1A50 01 BF 00      [10] 5381 	ld	bc, #0x00bf
   1A53                    5382 00139$:
                     1A53  5383 	C$main.c$1073$4$265	= .
                           5384 	.globl	C$main.c$1073$4$265
                           5385 ;main.c:1073: if (py > MAX_PY)
   1A53 3E 77         [ 7] 5386 	ld	a, #0x77
   1A55 DD BE FB      [19] 5387 	cp	a, -5 (ix)
   1A58 3E 00         [ 7] 5388 	ld	a, #0x00
   1A5A DD 9E FC      [19] 5389 	sbc	a, -4 (ix)
   1A5D E2r62r1A      [10] 5390 	jp	PO, 00419$
   1A60 EE 80         [ 7] 5391 	xor	a, #0x80
   1A62                    5392 00419$:
   1A62 F2r6Dr1A      [10] 5393 	jp	P, 00141$
                     1A65  5394 	C$main.c$1075$5$282	= .
                           5395 	.globl	C$main.c$1075$5$282
                           5396 ;main.c:1075: py = MAX_PY;
   1A65 DD 36 FB 77   [19] 5397 	ld	-5 (ix), #0x77
   1A69 DD 36 FC 00   [19] 5398 	ld	-4 (ix), #0x00
   1A6D                    5399 00141$:
                     1A6D  5400 	C$main.c$1077$4$265	= .
                           5401 	.globl	C$main.c$1077$4$265
                           5402 ;main.c:1077: if (px < 0)
   1A6D CB 78         [ 8] 5403 	bit	7, b
   1A6F 28 03         [12] 5404 	jr	Z,00143$
                     1A71  5405 	C$main.c$1079$5$283	= .
                           5406 	.globl	C$main.c$1079$5$283
                           5407 ;main.c:1079: px = 0;
   1A71 01 00 00      [10] 5408 	ld	bc, #0x0000
   1A74                    5409 00143$:
                     1A74  5410 	C$main.c$1081$4$265	= .
                           5411 	.globl	C$main.c$1081$4$265
                           5412 ;main.c:1081: if (py < 0)
   1A74 DD CB FC 7E   [20] 5413 	bit	7, -4 (ix)
   1A78 28 08         [12] 5414 	jr	Z,00145$
                     1A7A  5415 	C$main.c$1083$5$284	= .
                           5416 	.globl	C$main.c$1083$5$284
                           5417 ;main.c:1083: py = 0;
   1A7A DD 36 FB 00   [19] 5418 	ld	-5 (ix), #0x00
   1A7E DD 36 FC 00   [19] 5419 	ld	-4 (ix), #0x00
   1A82                    5420 00145$:
                     1A82  5421 	C$main.c$1086$4$265	= .
                           5422 	.globl	C$main.c$1086$4$265
                           5423 ;main.c:1086: if ((last_px != px) || (last_py != py))
   1A82 DD 7E F7      [19] 5424 	ld	a, -9 (ix)
   1A85 91            [ 4] 5425 	sub	a, c
   1A86 20 16         [12] 5426 	jr	NZ,00146$
   1A88 DD 7E F8      [19] 5427 	ld	a, -8 (ix)
   1A8B 90            [ 4] 5428 	sub	a, b
   1A8C 20 10         [12] 5429 	jr	NZ,00146$
   1A8E DD 7E FB      [19] 5430 	ld	a, -5 (ix)
   1A91 DD 96 F9      [19] 5431 	sub	a, -7 (ix)
   1A94 20 08         [12] 5432 	jr	NZ,00422$
   1A96 DD 7E FC      [19] 5433 	ld	a, -4 (ix)
   1A99 DD 96 FA      [19] 5434 	sub	a, -6 (ix)
   1A9C 28 3A         [12] 5435 	jr	Z,00147$
   1A9E                    5436 00422$:
   1A9E                    5437 00146$:
                     1A9E  5438 	C$main.c$1088$5$285	= .
                           5439 	.globl	C$main.c$1088$5$285
                           5440 ;main.c:1088: fill_mode = 1;
   1A9E 21r02r00      [10] 5441 	ld	hl,#_fill_mode + 0
   1AA1 36 01         [10] 5442 	ld	(hl), #0x01
                     1AA3  5443 	C$main.c$1089$5$285	= .
                           5444 	.globl	C$main.c$1089$5$285
                           5445 ;main.c:1089: updateDisplay(px, py, last_px, last_py, 0);
   1AA3 C5            [11] 5446 	push	bc
   1AA4 AF            [ 4] 5447 	xor	a, a
   1AA5 F5            [11] 5448 	push	af
   1AA6 33            [ 6] 5449 	inc	sp
   1AA7 DD 6E F9      [19] 5450 	ld	l,-7 (ix)
   1AAA DD 66 FA      [19] 5451 	ld	h,-6 (ix)
   1AAD E5            [11] 5452 	push	hl
   1AAE DD 6E F7      [19] 5453 	ld	l,-9 (ix)
   1AB1 DD 66 F8      [19] 5454 	ld	h,-8 (ix)
   1AB4 E5            [11] 5455 	push	hl
   1AB5 DD 6E FB      [19] 5456 	ld	l,-5 (ix)
   1AB8 DD 66 FC      [19] 5457 	ld	h,-4 (ix)
   1ABB E5            [11] 5458 	push	hl
   1ABC C5            [11] 5459 	push	bc
   1ABD CDr40r09      [17] 5460 	call	_updateDisplay
   1AC0 21 09 00      [10] 5461 	ld	hl, #9
   1AC3 39            [11] 5462 	add	hl, sp
   1AC4 F9            [ 6] 5463 	ld	sp, hl
   1AC5 C1            [10] 5464 	pop	bc
                     1AC6  5465 	C$main.c$1091$5$285	= .
                           5466 	.globl	C$main.c$1091$5$285
                           5467 ;main.c:1091: last_px = px;
   1AC6 DD 71 F7      [19] 5468 	ld	-9 (ix), c
   1AC9 DD 70 F8      [19] 5469 	ld	-8 (ix), b
                     1ACC  5470 	C$main.c$1092$5$285	= .
                           5471 	.globl	C$main.c$1092$5$285
                           5472 ;main.c:1092: last_py = py;
   1ACC DD 7E FB      [19] 5473 	ld	a, -5 (ix)
   1ACF DD 77 F9      [19] 5474 	ld	-7 (ix), a
   1AD2 DD 7E FC      [19] 5475 	ld	a, -4 (ix)
   1AD5 DD 77 FA      [19] 5476 	ld	-6 (ix), a
   1AD8                    5477 00147$:
                     1AD8  5478 	C$main.c$1095$4$265	= .
                           5479 	.globl	C$main.c$1095$4$265
                           5480 ;main.c:1095: drawing = inlib_port1.mdmouse.buttons & MDMOUSE_BTN_LEFT;
   1AD8 21r01r00      [10] 5481 	ld	hl, #(_inlib_port1 + 0x0001) + 0
   1ADB 5E            [ 7] 5482 	ld	e, (hl)
   1ADC 7B            [ 4] 5483 	ld	a, e
   1ADD E6 01         [ 7] 5484 	and	a, #0x01
   1ADF 32r00r00      [13] 5485 	ld	(#_drawing + 0),a
                     1AE2  5486 	C$main.c$1097$4$265	= .
                           5487 	.globl	C$main.c$1097$4$265
                           5488 ;main.c:1097: if (inlib_port1.mdmouse.buttons & MDMOUSE_BTN_MID)
   1AE2 CB 53         [ 8] 5489 	bit	2, e
   1AE4 28 09         [12] 5490 	jr	Z,00150$
                     1AE6  5491 	C$main.c$1099$5$286	= .
                           5492 	.globl	C$main.c$1099$5$286
                           5493 ;main.c:1099: clearDisplay(0);
   1AE6 C5            [11] 5494 	push	bc
   1AE7 AF            [ 4] 5495 	xor	a, a
   1AE8 F5            [11] 5496 	push	af
   1AE9 33            [ 6] 5497 	inc	sp
   1AEA CDr54r01      [17] 5498 	call	_clearDisplay
   1AED 33            [ 6] 5499 	inc	sp
   1AEE C1            [10] 5500 	pop	bc
   1AEF                    5501 00150$:
                     1AEF  5502 	C$main.c$1102$4$265	= .
                           5503 	.globl	C$main.c$1102$4$265
                           5504 ;main.c:1102: if (inlib_port1.mdmouse.buttons & MDMOUSE_BTN_START)
   1AEF 3Ar01r00      [13] 5505 	ld	a, (#(_inlib_port1 + 0x0001) + 0)
   1AF2 CB 5F         [ 8] 5506 	bit	3, a
   1AF4 CAr9Cr1D      [10] 5507 	jp	Z,00203$
                     1AF7  5508 	C$main.c$1104$5$287	= .
                           5509 	.globl	C$main.c$1104$5$287
                           5510 ;main.c:1104: savedata_commit();
   1AF7 C5            [11] 5511 	push	bc
   1AF8 CDr00r00      [17] 5512 	call	_savedata_commit
   1AFB CDr04r01      [17] 5513 	call	_syncDisplay
   1AFE C1            [10] 5514 	pop	bc
                     1AFF  5515 	C$main.c$1108$4$265	= .
                           5516 	.globl	C$main.c$1108$4$265
                           5517 ;main.c:1108: break;
   1AFF C3r9Cr1D      [10] 5518 	jp	00203$
                     1B02  5519 	C$main.c$1110$4$265	= .
                           5520 	.globl	C$main.c$1110$4$265
                           5521 ;main.c:1110: case INLIB_TYPE_SPORTSPAD:
   1B02                    5522 00153$:
                     1B02  5523 	C$main.c$1112$4$265	= .
                           5524 	.globl	C$main.c$1112$4$265
                           5525 ;main.c:1112: px += -inlib_port1.spad.x;
   1B02 3Ar03r00      [13] 5526 	ld	a, (#_inlib_port1 + 3)
   1B05 5F            [ 4] 5527 	ld	e, a
   1B06 17            [ 4] 5528 	rla
   1B07 9F            [ 4] 5529 	sbc	a, a
   1B08 57            [ 4] 5530 	ld	d, a
   1B09 AF            [ 4] 5531 	xor	a, a
   1B0A 93            [ 4] 5532 	sub	a, e
   1B0B 6F            [ 4] 5533 	ld	l, a
   1B0C 3E 00         [ 7] 5534 	ld	a, #0x00
   1B0E 9A            [ 4] 5535 	sbc	a, d
   1B0F 67            [ 4] 5536 	ld	h, a
   1B10 09            [11] 5537 	add	hl,bc
   1B11 4D            [ 4] 5538 	ld	c, l
   1B12 44            [ 4] 5539 	ld	b, h
                     1B13  5540 	C$main.c$1113$4$265	= .
                           5541 	.globl	C$main.c$1113$4$265
                           5542 ;main.c:1113: py += -inlib_port1.spad.y;
   1B13 3Ar04r00      [13] 5543 	ld	a, (#_inlib_port1 + 4)
   1B16 5F            [ 4] 5544 	ld	e, a
   1B17 17            [ 4] 5545 	rla
   1B18 9F            [ 4] 5546 	sbc	a, a
   1B19 57            [ 4] 5547 	ld	d, a
   1B1A AF            [ 4] 5548 	xor	a, a
   1B1B 93            [ 4] 5549 	sub	a, e
   1B1C 5F            [ 4] 5550 	ld	e, a
   1B1D 3E 00         [ 7] 5551 	ld	a, #0x00
   1B1F 9A            [ 4] 5552 	sbc	a, d
   1B20 57            [ 4] 5553 	ld	d, a
   1B21 DD 7E FB      [19] 5554 	ld	a, -5 (ix)
   1B24 83            [ 4] 5555 	add	a, e
   1B25 DD 77 FB      [19] 5556 	ld	-5 (ix), a
   1B28 DD 7E FC      [19] 5557 	ld	a, -4 (ix)
   1B2B 8A            [ 4] 5558 	adc	a, d
   1B2C DD 77 FC      [19] 5559 	ld	-4 (ix), a
                     1B2F  5560 	C$main.c$1115$4$265	= .
                           5561 	.globl	C$main.c$1115$4$265
                           5562 ;main.c:1115: if (px > MAX_PX)
   1B2F 3E BF         [ 7] 5563 	ld	a, #0xbf
   1B31 B9            [ 4] 5564 	cp	a, c
   1B32 3E 00         [ 7] 5565 	ld	a, #0x00
   1B34 98            [ 4] 5566 	sbc	a, b
   1B35 E2r3Ar1B      [10] 5567 	jp	PO, 00425$
   1B38 EE 80         [ 7] 5568 	xor	a, #0x80
   1B3A                    5569 00425$:
   1B3A F2r40r1B      [10] 5570 	jp	P, 00155$
                     1B3D  5571 	C$main.c$1117$5$288	= .
                           5572 	.globl	C$main.c$1117$5$288
                           5573 ;main.c:1117: px = MAX_PX;
   1B3D 01 BF 00      [10] 5574 	ld	bc, #0x00bf
   1B40                    5575 00155$:
                     1B40  5576 	C$main.c$1119$4$265	= .
                           5577 	.globl	C$main.c$1119$4$265
                           5578 ;main.c:1119: if (py > MAX_PY)
   1B40 3E 77         [ 7] 5579 	ld	a, #0x77
   1B42 DD BE FB      [19] 5580 	cp	a, -5 (ix)
   1B45 3E 00         [ 7] 5581 	ld	a, #0x00
   1B47 DD 9E FC      [19] 5582 	sbc	a, -4 (ix)
   1B4A E2r4Fr1B      [10] 5583 	jp	PO, 00426$
   1B4D EE 80         [ 7] 5584 	xor	a, #0x80
   1B4F                    5585 00426$:
   1B4F F2r5Ar1B      [10] 5586 	jp	P, 00157$
                     1B52  5587 	C$main.c$1121$5$289	= .
                           5588 	.globl	C$main.c$1121$5$289
                           5589 ;main.c:1121: py = MAX_PY;
   1B52 DD 36 FB 77   [19] 5590 	ld	-5 (ix), #0x77
   1B56 DD 36 FC 00   [19] 5591 	ld	-4 (ix), #0x00
   1B5A                    5592 00157$:
                     1B5A  5593 	C$main.c$1123$4$265	= .
                           5594 	.globl	C$main.c$1123$4$265
                           5595 ;main.c:1123: if (px < 0)
   1B5A CB 78         [ 8] 5596 	bit	7, b
   1B5C 28 03         [12] 5597 	jr	Z,00159$
                     1B5E  5598 	C$main.c$1125$5$290	= .
                           5599 	.globl	C$main.c$1125$5$290
                           5600 ;main.c:1125: px = 0;
   1B5E 01 00 00      [10] 5601 	ld	bc, #0x0000
   1B61                    5602 00159$:
                     1B61  5603 	C$main.c$1127$4$265	= .
                           5604 	.globl	C$main.c$1127$4$265
                           5605 ;main.c:1127: if (py < 0)
   1B61 DD CB FC 7E   [20] 5606 	bit	7, -4 (ix)
   1B65 28 08         [12] 5607 	jr	Z,00161$
                     1B67  5608 	C$main.c$1129$5$291	= .
                           5609 	.globl	C$main.c$1129$5$291
                           5610 ;main.c:1129: py = 0;
   1B67 DD 36 FB 00   [19] 5611 	ld	-5 (ix), #0x00
   1B6B DD 36 FC 00   [19] 5612 	ld	-4 (ix), #0x00
   1B6F                    5613 00161$:
                     1B6F  5614 	C$main.c$1132$4$265	= .
                           5615 	.globl	C$main.c$1132$4$265
                           5616 ;main.c:1132: if ((last_px != px) || (last_py != py))
   1B6F DD 7E F7      [19] 5617 	ld	a, -9 (ix)
   1B72 91            [ 4] 5618 	sub	a, c
   1B73 20 16         [12] 5619 	jr	NZ,00162$
   1B75 DD 7E F8      [19] 5620 	ld	a, -8 (ix)
   1B78 90            [ 4] 5621 	sub	a, b
   1B79 20 10         [12] 5622 	jr	NZ,00162$
   1B7B DD 7E FB      [19] 5623 	ld	a, -5 (ix)
   1B7E DD 96 F9      [19] 5624 	sub	a, -7 (ix)
   1B81 20 08         [12] 5625 	jr	NZ,00429$
   1B83 DD 7E FC      [19] 5626 	ld	a, -4 (ix)
   1B86 DD 96 FA      [19] 5627 	sub	a, -6 (ix)
   1B89 28 3A         [12] 5628 	jr	Z,00163$
   1B8B                    5629 00429$:
   1B8B                    5630 00162$:
                     1B8B  5631 	C$main.c$1134$5$292	= .
                           5632 	.globl	C$main.c$1134$5$292
                           5633 ;main.c:1134: fill_mode = 1;
   1B8B 21r02r00      [10] 5634 	ld	hl,#_fill_mode + 0
   1B8E 36 01         [10] 5635 	ld	(hl), #0x01
                     1B90  5636 	C$main.c$1135$5$292	= .
                           5637 	.globl	C$main.c$1135$5$292
                           5638 ;main.c:1135: updateDisplay(px, py, last_px, last_py, 0);
   1B90 C5            [11] 5639 	push	bc
   1B91 AF            [ 4] 5640 	xor	a, a
   1B92 F5            [11] 5641 	push	af
   1B93 33            [ 6] 5642 	inc	sp
   1B94 DD 6E F9      [19] 5643 	ld	l,-7 (ix)
   1B97 DD 66 FA      [19] 5644 	ld	h,-6 (ix)
   1B9A E5            [11] 5645 	push	hl
   1B9B DD 6E F7      [19] 5646 	ld	l,-9 (ix)
   1B9E DD 66 F8      [19] 5647 	ld	h,-8 (ix)
   1BA1 E5            [11] 5648 	push	hl
   1BA2 DD 6E FB      [19] 5649 	ld	l,-5 (ix)
   1BA5 DD 66 FC      [19] 5650 	ld	h,-4 (ix)
   1BA8 E5            [11] 5651 	push	hl
   1BA9 C5            [11] 5652 	push	bc
   1BAA CDr40r09      [17] 5653 	call	_updateDisplay
   1BAD 21 09 00      [10] 5654 	ld	hl, #9
   1BB0 39            [11] 5655 	add	hl, sp
   1BB1 F9            [ 6] 5656 	ld	sp, hl
   1BB2 C1            [10] 5657 	pop	bc
                     1BB3  5658 	C$main.c$1137$5$292	= .
                           5659 	.globl	C$main.c$1137$5$292
                           5660 ;main.c:1137: last_px = px;
   1BB3 DD 71 F7      [19] 5661 	ld	-9 (ix), c
   1BB6 DD 70 F8      [19] 5662 	ld	-8 (ix), b
                     1BB9  5663 	C$main.c$1138$5$292	= .
                           5664 	.globl	C$main.c$1138$5$292
                           5665 ;main.c:1138: last_py = py;
   1BB9 DD 7E FB      [19] 5666 	ld	a, -5 (ix)
   1BBC DD 77 F9      [19] 5667 	ld	-7 (ix), a
   1BBF DD 7E FC      [19] 5668 	ld	a, -4 (ix)
   1BC2 DD 77 FA      [19] 5669 	ld	-6 (ix), a
   1BC5                    5670 00163$:
                     1BC5  5671 	C$main.c$1141$4$265	= .
                           5672 	.globl	C$main.c$1141$4$265
                           5673 ;main.c:1141: drawing = inlib_port1.spad.buttons & SPORTSPAD_BTN_1;
   1BC5 21r01r00      [10] 5674 	ld	hl, #(_inlib_port1 + 0x0001) + 0
   1BC8 5E            [ 7] 5675 	ld	e, (hl)
   1BC9 7B            [ 4] 5676 	ld	a, e
   1BCA E6 01         [ 7] 5677 	and	a, #0x01
   1BCC 32r00r00      [13] 5678 	ld	(#_drawing + 0),a
                     1BCF  5679 	C$main.c$1143$4$265	= .
                           5680 	.globl	C$main.c$1143$4$265
                           5681 ;main.c:1143: if (inlib_port1.spad.buttons & SPORTSPAD_BTN_2)
   1BCF CB 4B         [ 8] 5682 	bit	1, e
   1BD1 CAr9Cr1D      [10] 5683 	jp	Z,00203$
                     1BD4  5684 	C$main.c$1145$5$293	= .
                           5685 	.globl	C$main.c$1145$5$293
                           5686 ;main.c:1145: savedata_commit();
   1BD4 C5            [11] 5687 	push	bc
   1BD5 CDr00r00      [17] 5688 	call	_savedata_commit
   1BD8 CDr04r01      [17] 5689 	call	_syncDisplay
   1BDB C1            [10] 5690 	pop	bc
                     1BDC  5691 	C$main.c$1149$4$265	= .
                           5692 	.globl	C$main.c$1149$4$265
                           5693 ;main.c:1149: break;
   1BDC C3r9Cr1D      [10] 5694 	jp	00203$
                     1BDF  5695 	C$main.c$1151$4$265	= .
                           5696 	.globl	C$main.c$1151$4$265
                           5697 ;main.c:1151: case INLIB_TYPE_LIGHT_PHASER:
   1BDF                    5698 00167$:
                     1BDF  5699 	C$main.c$1152$4$265	= .
                           5700 	.globl	C$main.c$1152$4$265
                           5701 ;main.c:1152: drawing = inlib_port1.phaser.buttons;
   1BDF 3Ar01r00      [13] 5702 	ld	a,(#_inlib_port1 + 1)
   1BE2 FD 21r00r00   [14] 5703 	ld	iy, #_drawing
   1BE6 FD 77 00      [19] 5704 	ld	0 (iy), a
                     1BE9  5705 	C$main.c$1154$4$265	= .
                           5706 	.globl	C$main.c$1154$4$265
                           5707 ;main.c:1154: if (drawing)
   1BE9 FD 7E 00      [19] 5708 	ld	a, 0 (iy)
   1BEC B7            [ 4] 5709 	or	a, a
   1BED CArD6r1C      [10] 5710 	jp	Z, 00189$
                     1BF0  5711 	C$main.c$1156$5$294	= .
                           5712 	.globl	C$main.c$1156$5$294
                           5713 ;main.c:1156: if (inlib_port1.phaser.x < 64)
   1BF0 3Ar02r00      [13] 5714 	ld	a, (#_inlib_port1 + 2)
   1BF3 FE 40         [ 7] 5715 	cp	a, #0x40
   1BF5 30 05         [12] 5716 	jr	NC,00169$
                     1BF7  5717 	C$main.c$1158$6$295	= .
                           5718 	.globl	C$main.c$1158$6$295
                           5719 ;main.c:1158: px = 0;
   1BF7 01 00 00      [10] 5720 	ld	bc, #0x0000
   1BFA 18 09         [12] 5721 	jr	00170$
   1BFC                    5722 00169$:
                     1BFC  5723 	C$main.c$1162$6$296	= .
                           5724 	.globl	C$main.c$1162$6$296
                           5725 ;main.c:1162: px = inlib_port1.phaser.x - 64;
   1BFC 06 00         [ 7] 5726 	ld	b, #0x00
   1BFE C6 C0         [ 7] 5727 	add	a, #0xc0
   1C00 4F            [ 4] 5728 	ld	c, a
   1C01 78            [ 4] 5729 	ld	a, b
   1C02 CE FF         [ 7] 5730 	adc	a, #0xff
   1C04 47            [ 4] 5731 	ld	b, a
   1C05                    5732 00170$:
                     1C05  5733 	C$main.c$1164$5$294	= .
                           5734 	.globl	C$main.c$1164$5$294
                           5735 ;main.c:1164: if (inlib_port1.phaser.y < 32)
   1C05 3Ar03r00      [13] 5736 	ld	a, (#_inlib_port1 + 3)
   1C08 FE 20         [ 7] 5737 	cp	a, #0x20
   1C0A 30 0A         [12] 5738 	jr	NC,00172$
                     1C0C  5739 	C$main.c$1166$6$297	= .
                           5740 	.globl	C$main.c$1166$6$297
                           5741 ;main.c:1166: py = 0;
   1C0C DD 36 FB 00   [19] 5742 	ld	-5 (ix), #0x00
   1C10 DD 36 FC 00   [19] 5743 	ld	-4 (ix), #0x00
   1C14 18 17         [12] 5744 	jr	00173$
   1C16                    5745 00172$:
                     1C16  5746 	C$main.c$1170$6$298	= .
                           5747 	.globl	C$main.c$1170$6$298
                           5748 ;main.c:1170: py = inlib_port1.phaser.y - 32;
   1C16 DD 77 FD      [19] 5749 	ld	-3 (ix), a
   1C19 DD 36 FE 00   [19] 5750 	ld	-2 (ix), #0x00
   1C1D DD 7E FD      [19] 5751 	ld	a, -3 (ix)
   1C20 C6 E0         [ 7] 5752 	add	a, #0xe0
   1C22 DD 77 FB      [19] 5753 	ld	-5 (ix), a
   1C25 DD 7E FE      [19] 5754 	ld	a, -2 (ix)
   1C28 CE FF         [ 7] 5755 	adc	a, #0xff
   1C2A DD 77 FC      [19] 5756 	ld	-4 (ix), a
   1C2D                    5757 00173$:
                     1C2D  5758 	C$main.c$1173$5$294	= .
                           5759 	.globl	C$main.c$1173$5$294
                           5760 ;main.c:1173: if (px > MAX_PX)
   1C2D 3E BF         [ 7] 5761 	ld	a, #0xbf
   1C2F B9            [ 4] 5762 	cp	a, c
   1C30 3E 00         [ 7] 5763 	ld	a, #0x00
   1C32 98            [ 4] 5764 	sbc	a, b
   1C33 E2r38r1C      [10] 5765 	jp	PO, 00431$
   1C36 EE 80         [ 7] 5766 	xor	a, #0x80
   1C38                    5767 00431$:
   1C38 F2r3Er1C      [10] 5768 	jp	P, 00175$
                     1C3B  5769 	C$main.c$1175$6$299	= .
                           5770 	.globl	C$main.c$1175$6$299
                           5771 ;main.c:1175: px = MAX_PX;
   1C3B 01 BF 00      [10] 5772 	ld	bc, #0x00bf
   1C3E                    5773 00175$:
                     1C3E  5774 	C$main.c$1177$5$294	= .
                           5775 	.globl	C$main.c$1177$5$294
                           5776 ;main.c:1177: if (py > MAX_PY)
   1C3E 3E 77         [ 7] 5777 	ld	a, #0x77
   1C40 DD BE FB      [19] 5778 	cp	a, -5 (ix)
   1C43 3E 00         [ 7] 5779 	ld	a, #0x00
   1C45 DD 9E FC      [19] 5780 	sbc	a, -4 (ix)
   1C48 E2r4Dr1C      [10] 5781 	jp	PO, 00432$
   1C4B EE 80         [ 7] 5782 	xor	a, #0x80
   1C4D                    5783 00432$:
   1C4D F2r58r1C      [10] 5784 	jp	P, 00177$
                     1C50  5785 	C$main.c$1179$6$300	= .
                           5786 	.globl	C$main.c$1179$6$300
                           5787 ;main.c:1179: py = MAX_PY;
   1C50 DD 36 FB 77   [19] 5788 	ld	-5 (ix), #0x77
   1C54 DD 36 FC 00   [19] 5789 	ld	-4 (ix), #0x00
   1C58                    5790 00177$:
                     1C58  5791 	C$main.c$1181$5$294	= .
                           5792 	.globl	C$main.c$1181$5$294
                           5793 ;main.c:1181: if (px < 0)
   1C58 CB 78         [ 8] 5794 	bit	7, b
   1C5A 28 03         [12] 5795 	jr	Z,00179$
                     1C5C  5796 	C$main.c$1183$6$301	= .
                           5797 	.globl	C$main.c$1183$6$301
                           5798 ;main.c:1183: px = 0;
   1C5C 01 00 00      [10] 5799 	ld	bc, #0x0000
   1C5F                    5800 00179$:
                     1C5F  5801 	C$main.c$1185$5$294	= .
                           5802 	.globl	C$main.c$1185$5$294
                           5803 ;main.c:1185: if (py < 0)
   1C5F DD CB FC 7E   [20] 5804 	bit	7, -4 (ix)
   1C63 28 08         [12] 5805 	jr	Z,00181$
                     1C65  5806 	C$main.c$1187$6$302	= .
                           5807 	.globl	C$main.c$1187$6$302
                           5808 ;main.c:1187: py = 0;
   1C65 DD 36 FB 00   [19] 5809 	ld	-5 (ix), #0x00
   1C69 DD 36 FC 00   [19] 5810 	ld	-4 (ix), #0x00
   1C6D                    5811 00181$:
                     1C6D  5812 	C$main.c$1190$5$294	= .
                           5813 	.globl	C$main.c$1190$5$294
                           5814 ;main.c:1190: if ((last_px != px) || (last_py != py))
   1C6D DD 7E F7      [19] 5815 	ld	a, -9 (ix)
   1C70 91            [ 4] 5816 	sub	a, c
   1C71 20 16         [12] 5817 	jr	NZ,00185$
   1C73 DD 7E F8      [19] 5818 	ld	a, -8 (ix)
   1C76 90            [ 4] 5819 	sub	a, b
   1C77 20 10         [12] 5820 	jr	NZ,00185$
   1C79 DD 7E FB      [19] 5821 	ld	a, -5 (ix)
   1C7C DD 96 F9      [19] 5822 	sub	a, -7 (ix)
   1C7F 20 08         [12] 5823 	jr	NZ,00435$
   1C81 DD 7E FC      [19] 5824 	ld	a, -4 (ix)
   1C84 DD 96 FA      [19] 5825 	sub	a, -6 (ix)
   1C87 28 38         [12] 5826 	jr	Z,00186$
   1C89                    5827 00435$:
   1C89                    5828 00185$:
                     1C89  5829 	C$main.c$1192$6$303	= .
                           5830 	.globl	C$main.c$1192$6$303
                           5831 ;main.c:1192: fill_mode = 1;
   1C89 21r02r00      [10] 5832 	ld	hl,#_fill_mode + 0
   1C8C 36 01         [10] 5833 	ld	(hl), #0x01
                     1C8E  5834 	C$main.c$1194$6$303	= .
                           5835 	.globl	C$main.c$1194$6$303
                           5836 ;main.c:1194: if (last_px && last_py)
   1C8E DD 7E F8      [19] 5837 	ld	a, -8 (ix)
   1C91 DD B6 F7      [19] 5838 	or	a,-9 (ix)
   1C94 28 2B         [12] 5839 	jr	Z,00186$
   1C96 DD 7E FA      [19] 5840 	ld	a, -6 (ix)
   1C99 DD B6 F9      [19] 5841 	or	a,-7 (ix)
   1C9C 28 23         [12] 5842 	jr	Z,00186$
                     1C9E  5843 	C$main.c$1196$7$304	= .
                           5844 	.globl	C$main.c$1196$7$304
                           5845 ;main.c:1196: updateDisplay(px, py, last_px, last_py, 0);
   1C9E C5            [11] 5846 	push	bc
   1C9F AF            [ 4] 5847 	xor	a, a
   1CA0 F5            [11] 5848 	push	af
   1CA1 33            [ 6] 5849 	inc	sp
   1CA2 DD 6E F9      [19] 5850 	ld	l,-7 (ix)
   1CA5 DD 66 FA      [19] 5851 	ld	h,-6 (ix)
   1CA8 E5            [11] 5852 	push	hl
   1CA9 DD 6E F7      [19] 5853 	ld	l,-9 (ix)
   1CAC DD 66 F8      [19] 5854 	ld	h,-8 (ix)
   1CAF E5            [11] 5855 	push	hl
   1CB0 DD 6E FB      [19] 5856 	ld	l,-5 (ix)
   1CB3 DD 66 FC      [19] 5857 	ld	h,-4 (ix)
   1CB6 E5            [11] 5858 	push	hl
   1CB7 C5            [11] 5859 	push	bc
   1CB8 CDr40r09      [17] 5860 	call	_updateDisplay
   1CBB 21 09 00      [10] 5861 	ld	hl, #9
   1CBE 39            [11] 5862 	add	hl, sp
   1CBF F9            [ 6] 5863 	ld	sp, hl
   1CC0 C1            [10] 5864 	pop	bc
   1CC1                    5865 00186$:
                     1CC1  5866 	C$main.c$1200$5$294	= .
                           5867 	.globl	C$main.c$1200$5$294
                           5868 ;main.c:1200: last_px = px;
   1CC1 DD 71 F7      [19] 5869 	ld	-9 (ix), c
   1CC4 DD 70 F8      [19] 5870 	ld	-8 (ix), b
                     1CC7  5871 	C$main.c$1201$5$294	= .
                           5872 	.globl	C$main.c$1201$5$294
                           5873 ;main.c:1201: last_py = py;
   1CC7 DD 7E FB      [19] 5874 	ld	a, -5 (ix)
   1CCA DD 77 F9      [19] 5875 	ld	-7 (ix), a
   1CCD DD 7E FC      [19] 5876 	ld	a, -4 (ix)
   1CD0 DD 77 FA      [19] 5877 	ld	-6 (ix), a
   1CD3 C3r9Cr1D      [10] 5878 	jp	00203$
   1CD6                    5879 00189$:
                     1CD6  5880 	C$main.c$1205$5$305	= .
                           5881 	.globl	C$main.c$1205$5$305
                           5882 ;main.c:1205: last_px = last_py = 0;
   1CD6 DD 36 F9 00   [19] 5883 	ld	-7 (ix), #0x00
   1CDA DD 36 FA 00   [19] 5884 	ld	-6 (ix), #0x00
   1CDE DD 36 F7 00   [19] 5885 	ld	-9 (ix), #0x00
   1CE2 DD 36 F8 00   [19] 5886 	ld	-8 (ix), #0x00
                     1CE6  5887 	C$main.c$1208$4$265	= .
                           5888 	.globl	C$main.c$1208$4$265
                           5889 ;main.c:1208: break;
   1CE6 C3r9Cr1D      [10] 5890 	jp	00203$
                     1CE9  5891 	C$main.c$1210$4$265	= .
                           5892 	.globl	C$main.c$1210$4$265
                           5893 ;main.c:1210: case INLIB_TYPE_GFX_V2:
   1CE9                    5894 00191$:
                     1CE9  5895 	C$main.c$1213$4$265	= .
                           5896 	.globl	C$main.c$1213$4$265
                           5897 ;main.c:1213: px = inlib_port1.gfx2.x;
   1CE9 21r03r00      [10] 5898 	ld	hl, #_inlib_port1 + 3
   1CEC 4E            [ 7] 5899 	ld	c, (hl)
   1CED 06 00         [ 7] 5900 	ld	b, #0x00
                     1CEF  5901 	C$main.c$1216$4$265	= .
                           5902 	.globl	C$main.c$1216$4$265
                           5903 ;main.c:1216: py = inlib_port1.gfx2.y - 50;
   1CEF 21r04r00      [10] 5904 	ld	hl, #_inlib_port1 + 4
   1CF2 16 00         [ 7] 5905 	ld	d, #0x00
   1CF4 7E            [ 7] 5906 	ld	a, (hl)
   1CF5 C6 CE         [ 7] 5907 	add	a, #0xce
   1CF7 DD 77 FB      [19] 5908 	ld	-5 (ix), a
   1CFA 7A            [ 4] 5909 	ld	a, d
   1CFB CE FF         [ 7] 5910 	adc	a, #0xff
   1CFD DD 77 FC      [19] 5911 	ld	-4 (ix), a
                     1D00  5912 	C$main.c$1218$4$265	= .
                           5913 	.globl	C$main.c$1218$4$265
                           5914 ;main.c:1218: if (px > MAX_PX)
   1D00 3E BF         [ 7] 5915 	ld	a, #0xbf
   1D02 B9            [ 4] 5916 	cp	a, c
   1D03 3E 00         [ 7] 5917 	ld	a, #0x00
   1D05 98            [ 4] 5918 	sbc	a, b
   1D06 E2r0Br1D      [10] 5919 	jp	PO, 00436$
   1D09 EE 80         [ 7] 5920 	xor	a, #0x80
   1D0B                    5921 00436$:
   1D0B F2r11r1D      [10] 5922 	jp	P, 00193$
                     1D0E  5923 	C$main.c$1220$5$306	= .
                           5924 	.globl	C$main.c$1220$5$306
                           5925 ;main.c:1220: px = MAX_PX;
   1D0E 01 BF 00      [10] 5926 	ld	bc, #0x00bf
   1D11                    5927 00193$:
                     1D11  5928 	C$main.c$1222$4$265	= .
                           5929 	.globl	C$main.c$1222$4$265
                           5930 ;main.c:1222: if (py > MAX_PY)
   1D11 3E 77         [ 7] 5931 	ld	a, #0x77
   1D13 DD BE FB      [19] 5932 	cp	a, -5 (ix)
   1D16 3E 00         [ 7] 5933 	ld	a, #0x00
   1D18 DD 9E FC      [19] 5934 	sbc	a, -4 (ix)
   1D1B E2r20r1D      [10] 5935 	jp	PO, 00437$
   1D1E EE 80         [ 7] 5936 	xor	a, #0x80
   1D20                    5937 00437$:
   1D20 F2r2Br1D      [10] 5938 	jp	P, 00195$
                     1D23  5939 	C$main.c$1224$5$307	= .
                           5940 	.globl	C$main.c$1224$5$307
                           5941 ;main.c:1224: py = MAX_PY;
   1D23 DD 36 FB 77   [19] 5942 	ld	-5 (ix), #0x77
   1D27 DD 36 FC 00   [19] 5943 	ld	-4 (ix), #0x00
   1D2B                    5944 00195$:
                     1D2B  5945 	C$main.c$1226$4$265	= .
                           5946 	.globl	C$main.c$1226$4$265
                           5947 ;main.c:1226: if (px < 0)
   1D2B CB 78         [ 8] 5948 	bit	7, b
   1D2D 28 03         [12] 5949 	jr	Z,00197$
                     1D2F  5950 	C$main.c$1228$5$308	= .
                           5951 	.globl	C$main.c$1228$5$308
                           5952 ;main.c:1228: px = 0;
   1D2F 01 00 00      [10] 5953 	ld	bc, #0x0000
   1D32                    5954 00197$:
                     1D32  5955 	C$main.c$1230$4$265	= .
                           5956 	.globl	C$main.c$1230$4$265
                           5957 ;main.c:1230: if (py < 0)
   1D32 DD CB FC 7E   [20] 5958 	bit	7, -4 (ix)
   1D36 28 08         [12] 5959 	jr	Z,00199$
                     1D38  5960 	C$main.c$1232$5$309	= .
                           5961 	.globl	C$main.c$1232$5$309
                           5962 ;main.c:1232: py = 0;
   1D38 DD 36 FB 00   [19] 5963 	ld	-5 (ix), #0x00
   1D3C DD 36 FC 00   [19] 5964 	ld	-4 (ix), #0x00
   1D40                    5965 00199$:
                     1D40  5966 	C$main.c$1235$4$265	= .
                           5967 	.globl	C$main.c$1235$4$265
                           5968 ;main.c:1235: if ((last_px != px) || (last_py != py))
   1D40 DD 7E F7      [19] 5969 	ld	a, -9 (ix)
   1D43 91            [ 4] 5970 	sub	a, c
   1D44 20 16         [12] 5971 	jr	NZ,00200$
   1D46 DD 7E F8      [19] 5972 	ld	a, -8 (ix)
   1D49 90            [ 4] 5973 	sub	a, b
   1D4A 20 10         [12] 5974 	jr	NZ,00200$
   1D4C DD 7E FB      [19] 5975 	ld	a, -5 (ix)
   1D4F DD 96 F9      [19] 5976 	sub	a, -7 (ix)
   1D52 20 08         [12] 5977 	jr	NZ,00440$
   1D54 DD 7E FC      [19] 5978 	ld	a, -4 (ix)
   1D57 DD 96 FA      [19] 5979 	sub	a, -6 (ix)
   1D5A 28 3A         [12] 5980 	jr	Z,00201$
   1D5C                    5981 00440$:
   1D5C                    5982 00200$:
                     1D5C  5983 	C$main.c$1237$5$310	= .
                           5984 	.globl	C$main.c$1237$5$310
                           5985 ;main.c:1237: fill_mode = 1;
   1D5C 21r02r00      [10] 5986 	ld	hl,#_fill_mode + 0
   1D5F 36 01         [10] 5987 	ld	(hl), #0x01
                     1D61  5988 	C$main.c$1238$5$310	= .
                           5989 	.globl	C$main.c$1238$5$310
                           5990 ;main.c:1238: updateDisplay(px, py, last_px, last_py, 0);
   1D61 C5            [11] 5991 	push	bc
   1D62 AF            [ 4] 5992 	xor	a, a
   1D63 F5            [11] 5993 	push	af
   1D64 33            [ 6] 5994 	inc	sp
   1D65 DD 6E F9      [19] 5995 	ld	l,-7 (ix)
   1D68 DD 66 FA      [19] 5996 	ld	h,-6 (ix)
   1D6B E5            [11] 5997 	push	hl
   1D6C DD 6E F7      [19] 5998 	ld	l,-9 (ix)
   1D6F DD 66 F8      [19] 5999 	ld	h,-8 (ix)
   1D72 E5            [11] 6000 	push	hl
   1D73 DD 6E FB      [19] 6001 	ld	l,-5 (ix)
   1D76 DD 66 FC      [19] 6002 	ld	h,-4 (ix)
   1D79 E5            [11] 6003 	push	hl
   1D7A C5            [11] 6004 	push	bc
   1D7B CDr40r09      [17] 6005 	call	_updateDisplay
   1D7E 21 09 00      [10] 6006 	ld	hl, #9
   1D81 39            [11] 6007 	add	hl, sp
   1D82 F9            [ 6] 6008 	ld	sp, hl
   1D83 C1            [10] 6009 	pop	bc
                     1D84  6010 	C$main.c$1240$5$310	= .
                           6011 	.globl	C$main.c$1240$5$310
                           6012 ;main.c:1240: last_px = px;
   1D84 DD 71 F7      [19] 6013 	ld	-9 (ix), c
   1D87 DD 70 F8      [19] 6014 	ld	-8 (ix), b
                     1D8A  6015 	C$main.c$1241$5$310	= .
                           6016 	.globl	C$main.c$1241$5$310
                           6017 ;main.c:1241: last_py = py;
   1D8A DD 7E FB      [19] 6018 	ld	a, -5 (ix)
   1D8D DD 77 F9      [19] 6019 	ld	-7 (ix), a
   1D90 DD 7E FC      [19] 6020 	ld	a, -4 (ix)
   1D93 DD 77 FA      [19] 6021 	ld	-6 (ix), a
   1D96                    6022 00201$:
                     1D96  6023 	C$main.c$1244$4$265	= .
                           6024 	.globl	C$main.c$1244$4$265
                           6025 ;main.c:1244: drawing = inlib_port1.gfx2.buttons;
   1D96 3Ar01r00      [13] 6026 	ld	a,(#_inlib_port1 + 1)
   1D99 32r00r00      [13] 6027 	ld	(#_drawing + 0),a
                     1D9C  6028 	C$main.c$1246$3$264	= .
                           6029 	.globl	C$main.c$1246$3$264
                           6030 ;main.c:1246: }
   1D9C                    6031 00203$:
                     1D9C  6032 	C$main.c$1248$3$264	= .
                           6033 	.globl	C$main.c$1248$3$264
                           6034 ;main.c:1248: if (SMS_queryPauseRequested())
   1D9C C5            [11] 6035 	push	bc
   1D9D CDr00r00      [17] 6036 	call	_SMS_queryPauseRequested
   1DA0 C1            [10] 6037 	pop	bc
   1DA1 CB 45         [ 8] 6038 	bit	0, l
   1DA3 CArF9r17      [10] 6039 	jp	Z, 00207$
                     1DA6  6040 	C$main.c$1250$4$311	= .
                           6041 	.globl	C$main.c$1250$4$311
                           6042 ;main.c:1250: SMS_resetPauseRequest();
   1DA6 C5            [11] 6043 	push	bc
   1DA7 CDr00r00      [17] 6044 	call	_SMS_resetPauseRequest
   1DAA AF            [ 4] 6045 	xor	a, a
   1DAB F5            [11] 6046 	push	af
   1DAC 33            [ 6] 6047 	inc	sp
   1DAD CDr54r01      [17] 6048 	call	_clearDisplay
   1DB0 33            [ 6] 6049 	inc	sp
   1DB1 C1            [10] 6050 	pop	bc
                     1DB2  6051 	C$main.c$1254$2$263	= .
                           6052 	.globl	C$main.c$1254$2$263
                     1DB2  6053 	XG$main$0$0	= .
                           6054 	.globl	XG$main$0$0
   1DB2 C3rF9r17      [10] 6055 	jp	00207$
                           6056 	.area _CODE
                     1DB5  6057 Fmain$__str_29$0$0 == .
   1DB5                    6058 __str_29:
   1DB5 53 74 65 76 65 50  6059 	.ascii "StevePro Studios"
        72 6F 20 53 74 75
        64 69 6F 73
   1DC5 00                 6060 	.db 0x00
                     1DC6  6061 Fmain$__str_30$0$0 == .
   1DC6                    6062 __str_30:
   1DC6 48 65 6C 6C 6F 20  6063 	.ascii "Hello World"
        57 6F 72 6C 64
   1DD1 00                 6064 	.db 0x00
                     1DD2  6065 Fmain$__str_31$0$0 == .
   1DD2                    6066 __str_31:
   1DD2 53 69 6D 70 6C 65  6067 	.ascii "Simple Sega Master System demo to run on real hardware"
        20 53 65 67 61 20
        4D 61 73 74 65 72
        20 53 79 73 74 65
        6D 20 64 65 6D 6F
        20 74 6F 20 72 75
        6E 20 6F 6E 20 72
        65 61 6C 20 68 61
        72 64 77 61 72 65
   1E08 00                 6068 	.db 0x00
                     1E09  6069 Fmain$__str_32$0$0 == .
   1E09                    6070 ___str_32:
   1E09 72 61 70 68 6E 65  6071 	.ascii "raphnet presents"
        74 20 70 72 65 73
        65 6E 74 73
   1E19 00                 6072 	.db 0x00
                     1E1A  6073 Fmain$__str_33$0$0 == .
   1E1A                    6074 ___str_33:
   1E1A 73 6D 73 20 61 20  6075 	.ascii "sms a sketch"
        73 6B 65 74 63 68
   1E26 00                 6076 	.db 0x00
                     1E27  6077 Fmain$__str_34$0$0 == .
   1E27                    6078 ___str_34:
   1E27 66 6F 72 20 74 68  6079 	.ascii "for the smspower.org"
        65 20 73 6D 73 70
        6F 77 65 72 2E 6F
        72 67
   1E3B 00                 6080 	.db 0x00
                     1E3C  6081 Fmain$__str_35$0$0 == .
   1E3C                    6082 ___str_35:
   1E3C 32 30 32 31 20 63  6083 	.ascii "2021 coding competition"
        6F 64 69 6E 67 20
        63 6F 6D 70 65 74
        69 74 69 6F 6E
   1E53 00                 6084 	.db 0x00
                     1E54  6085 Fmain$__str_36$0$0 == .
   1E54                    6086 ___str_36:
   1E54 4D 75 73 69 63 20  6087 	.ascii "Music arranged from:"
        61 72 72 61 6E 67
        65 64 20 66 72 6F
        6D 3A
   1E68 00                 6088 	.db 0x00
                     1E69  6089 Fmain$__str_37$0$0 == .
   1E69                    6090 ___str_37:
   1E69 3C 50 69 63 74 75  6091 	.ascii "<Pictures at an exhibition>"
        72 65 73 20 61 74
        20 61 6E 20 65 78
        68 69 62 69 74 69
        6F 6E 3E
   1E84 00                 6092 	.db 0x00
                     1E85  6093 Fmain$__str_38$0$0 == .
   1E85                    6094 ___str_38:
   1E85 62 79 20 4D 75 73  6095 	.ascii "by Mussorgsky"
        73 6F 72 67 73 6B
        79
   1E92 00                 6096 	.db 0x00
                     1E93  6097 Fmain$__str_39$0$0 == .
   1E93                    6098 ___str_39:
   1E93 54 6F 6F 6C 73 20  6099 	.ascii "Tools used:"
        75 73 65 64 3A
   1E9E 00                 6100 	.db 0x00
                     1E9F  6101 Fmain$__str_40$0$0 == .
   1E9F                    6102 ___str_40:
   1E9F 64 65 76 6B 69 74  6103 	.ascii "devkitSMS (SMSlib, PSGlib),"
        53 4D 53 20 28 53
        4D 53 6C 69 62 2C
        20 50 53 47 6C 69
        62 29 2C
   1EBA 00                 6104 	.db 0x00
                     1EBB  6105 Fmain$__str_41$0$0 == .
   1EBB                    6106 ___str_41:
   1EBB 73 64 63 63 2C 20  6107 	.ascii "sdcc, DefleMask, gimp..."
        44 65 66 6C 65 4D
        61 73 6B 2C 20 67
        69 6D 70 2E 2E 2E
   1ED3 00                 6108 	.db 0x00
                     1ED4  6109 Fmain$__str_42$0$0 == .
   1ED4                    6110 ___str_42:
   1ED4 54 68 61 6E 6B 73  6111 	.ascii "Thanks!"
        21
   1EDB 00                 6112 	.db 0x00
                     1EDC  6113 Fmain$__str_43$0$0 == .
   1EDC                    6114 ___str_43:
   1EDC 57 68 61 74 20 64  6115 	.ascii "What do you see?"
        6F 20 79 6F 75 20
        73 65 65 3F
   1EEC 00                 6116 	.db 0x00
                     1EED  6117 Fmain$__str_44$0$0 == .
   1EED                    6118 ___str_44:
   1EED 49 20 63 61 6E 6E  6119 	.ascii "I cannot draw very well so I cheated with"
        6F 74 20 64 72 61
        77 20 76 65 72 79
        20 77 65 6C 6C 20
        73 6F 20 49 20 63
        68 65 61 74 65 64
        20 77 69 74 68
   1F16 00                 6120 	.db 0x00
                     1F17  6121 Fmain$__str_45$0$0 == .
   1F17                    6122 ___str_45:
   1F17 61 20 6D 69 78 20  6123 	.ascii "a mix of trigonometric functions..."
        6F 66 20 74 72 69
        67 6F 6E 6F 6D 65
        74 72 69 63 20 66
        75 6E 63 74 69 6F
        6E 73 2E 2E 2E
   1F3A 00                 6124 	.db 0x00
                     1F3B  6125 Fmain$__str_46$0$0 == .
   1F3B                    6126 ___str_46:
   1F3B 59 6F 75 72 20 74  6127 	.ascii "Your turn!"
        75 72 6E 21
   1F45 00                 6128 	.db 0x00
                           6129 	.area _INITIALIZER
                     0000  6130 Fmain$__xinit_drawing$0$0 == .
   0000                    6131 __xinit__drawing:
   0000 00                 6132 	.db #0x00	; 0
                     0001  6133 Fmain$__xinit_paddle_mode$0$0 == .
   0001                    6134 __xinit__paddle_mode:
   0001 00                 6135 	.db #0x00	; 0
                     0002  6136 Fmain$__xinit_fill_mode$0$0 == .
   0002                    6137 __xinit__fill_mode:
   0002 00                 6138 	.db #0x00	; 0
                     0003  6139 Fmain$__xinit_script$0$0 == .
   0003                    6140 __xinit__script:
   0003 00 00              6141 	.dw #0x0000
   0005 00                 6142 	.db #0x00	; 0
   0006r09r1E              6143 	.dw ___str_32
   0008 28 00              6144 	.dw #0x0028
   000A 19 00              6145 	.dw #0x0019
   000C 02 00              6146 	.dw #0x0002
   000E 00 00              6147 	.dw #0x0000
   0010 3C 00              6148 	.dw #0x003c
   0012 00                 6149 	.db #0x00	; 0
   0013r1Ar1E              6150 	.dw ___str_33
   0015 23 00              6151 	.dw #0x0023
   0017 2D 00              6152 	.dw #0x002d
   0019 03 00              6153 	.dw #0x0003
   001B 00 00              6154 	.dw #0x0000
   001D 78 00              6155 	.dw #0x0078
   001F 00                 6156 	.db #0x00	; 0
   0020r27r1E              6157 	.dw ___str_34
   0022 14 00              6158 	.dw #0x0014
   0024 50 00              6159 	.dw #0x0050
   0026 02 00              6160 	.dw #0x0002
   0028 00 00              6161 	.dw #0x0000
   002A 78 00              6162 	.dw #0x0078
   002C 00                 6163 	.db #0x00	; 0
   002Dr3Cr1E              6164 	.dw ___str_35
   002F 0F 00              6165 	.dw #0x000f
   0031 64 00              6166 	.dw #0x0064
   0033 02 00              6167 	.dw #0x0002
   0035 00 00              6168 	.dw #0x0000
   0037 B4 00              6169 	.dw #0x00b4
   0039 02                 6170 	.db #0x02	; 2
   003A 00 00              6171 	.dw #0x0000
   003C 00 00              6172 	.dw #0x0000
   003E 00 00              6173 	.dw #0x0000
   0040 00 00              6174 	.dw #0x0000
   0042 00 00              6175 	.dw #0x0000
   0044 B4 00              6176 	.dw #0x00b4
   0046 00                 6177 	.db #0x00	; 0
   0047r54r1E              6178 	.dw ___str_36
   0049 05 00              6179 	.dw #0x0005
   004B 28 00              6180 	.dw #0x0028
   004D 02 00              6181 	.dw #0x0002
   004F 00 00              6182 	.dw #0x0000
   0051 B4 00              6183 	.dw #0x00b4
   0053 00                 6184 	.db #0x00	; 0
   0054r69r1E              6185 	.dw ___str_37
   0056 05 00              6186 	.dw #0x0005
   0058 41 00              6187 	.dw #0x0041
   005A 02 00              6188 	.dw #0x0002
   005C 00 00              6189 	.dw #0x0000
   005E B4 00              6190 	.dw #0x00b4
   0060 00                 6191 	.db #0x00	; 0
   0061r85r1E              6192 	.dw ___str_38
   0063 05 00              6193 	.dw #0x0005
   0065 50 00              6194 	.dw #0x0050
   0067 02 00              6195 	.dw #0x0002
   0069 00 00              6196 	.dw #0x0000
   006B 2C 01              6197 	.dw #0x012c
   006D 02                 6198 	.db #0x02	; 2
   006E 00 00              6199 	.dw #0x0000
   0070 00 00              6200 	.dw #0x0000
   0072 00 00              6201 	.dw #0x0000
   0074 00 00              6202 	.dw #0x0000
   0076 00 00              6203 	.dw #0x0000
   0078 00 00              6204 	.dw #0x0000
   007A 00                 6205 	.db #0x00	; 0
   007Br93r1E              6206 	.dw ___str_39
   007D 05 00              6207 	.dw #0x0005
   007F 1E 00              6208 	.dw #0x001e
   0081 02 00              6209 	.dw #0x0002
   0083 00 00              6210 	.dw #0x0000
   0085 00 00              6211 	.dw #0x0000
   0087 00                 6212 	.db #0x00	; 0
   0088r9Fr1E              6213 	.dw ___str_40
   008A 05 00              6214 	.dw #0x0005
   008C 37 00              6215 	.dw #0x0037
   008E 02 00              6216 	.dw #0x0002
   0090 00 00              6217 	.dw #0x0000
   0092 00 00              6218 	.dw #0x0000
   0094 00                 6219 	.db #0x00	; 0
   0095rBBr1E              6220 	.dw ___str_41
   0097 05 00              6221 	.dw #0x0005
   0099 46 00              6222 	.dw #0x0046
   009B 02 00              6223 	.dw #0x0002
   009D 00 00              6224 	.dw #0x0000
   009F 68 01              6225 	.dw #0x0168
   00A1 00                 6226 	.db #0x00	; 0
   00A2rD4r1E              6227 	.dw ___str_42
   00A4 05 00              6228 	.dw #0x0005
   00A6 64 00              6229 	.dw #0x0064
   00A8 02 00              6230 	.dw #0x0002
   00AA 00 00              6231 	.dw #0x0000
   00AC A4 01              6232 	.dw #0x01a4
   00AE 02                 6233 	.db #0x02	; 2
   00AF 00 00              6234 	.dw #0x0000
   00B1 00 00              6235 	.dw #0x0000
   00B3 00 00              6236 	.dw #0x0000
   00B5 00 00              6237 	.dw #0x0000
   00B7 00 00              6238 	.dw #0x0000
   00B9 00 00              6239 	.dw #0x0000
   00BB 00                 6240 	.db #0x00	; 0
   00BCrDCr1E              6241 	.dw ___str_43
   00BE 05 00              6242 	.dw #0x0005
   00C0 0F 00              6243 	.dw #0x000f
   00C2 02 00              6244 	.dw #0x0002
   00C4 00 00              6245 	.dw #0x0000
   00C6 00 00              6246 	.dw #0x0000
   00C8 03                 6247 	.db #0x03	; 3
   00C9 00 00              6248 	.dw #0x0000
   00CB 00 00              6249 	.dw #0x0000
   00CD 00 00              6250 	.dw #0x0000
   00CF 00 00              6251 	.dw #0x0000
   00D1rEFr0A              6252 	.dw _effect2
   00D3 00 00              6253 	.dw #0x0000
   00D5 00                 6254 	.db #0x00	; 0
   00D6rEDr1E              6255 	.dw ___str_44
   00D8 05 00              6256 	.dw #0x0005
   00DA 64 00              6257 	.dw #0x0064
   00DC 01 00              6258 	.dw #0x0001
   00DE 00 00              6259 	.dw #0x0000
   00E0 00 00              6260 	.dw #0x0000
   00E2 00                 6261 	.db #0x00	; 0
   00E3r17r1F              6262 	.dw ___str_45
   00E5 05 00              6263 	.dw #0x0005
   00E7 6E 00              6264 	.dw #0x006e
   00E9 01 00              6265 	.dw #0x0001
   00EB 00 00              6266 	.dw #0x0000
   00ED 58 02              6267 	.dw #0x0258
   00EF 02                 6268 	.db #0x02	; 2
   00F0 00 00              6269 	.dw #0x0000
   00F2 00 00              6270 	.dw #0x0000
   00F4 00 00              6271 	.dw #0x0000
   00F6 00 00              6272 	.dw #0x0000
   00F8 00 00              6273 	.dw #0x0000
   00FA 00 00              6274 	.dw #0x0000
   00FC 03                 6275 	.db #0x03	; 3
   00FD 00 00              6276 	.dw #0x0000
   00FF 00 00              6277 	.dw #0x0000
   0101 00 00              6278 	.dw #0x0000
   0103 00 00              6279 	.dw #0x0000
   0105r11r0C              6280 	.dw _effect3
   0107 94 02              6281 	.dw #0x0294
   0109 01                 6282 	.db #0x01	; 1
   010A 00 00              6283 	.dw #0x0000
   010C 00 00              6284 	.dw #0x0000
   010E 00 00              6285 	.dw #0x0000
   0110 00 00              6286 	.dw #0x0000
   0112 00 00              6287 	.dw #0x0000
   0114 00 00              6288 	.dw #0x0000
   0116 01                 6289 	.db #0x01	; 1
   0117 00 00              6290 	.dw #0x0000
   0119 00 00              6291 	.dw #0x0000
   011B 00 00              6292 	.dw #0x0000
   011D 00 00              6293 	.dw #0x0000
   011F 00 00              6294 	.dw #0x0000
   0121 00 00              6295 	.dw #0x0000
   0123 01                 6296 	.db #0x01	; 1
   0124 00 00              6297 	.dw #0x0000
   0126 00 00              6298 	.dw #0x0000
   0128 00 00              6299 	.dw #0x0000
   012A 00 00              6300 	.dw #0x0000
   012C 00 00              6301 	.dw #0x0000
   012E 00 00              6302 	.dw #0x0000
   0130 00                 6303 	.db #0x00	; 0
   0131r3Br1F              6304 	.dw ___str_46
   0133 64 00              6305 	.dw #0x0064
   0135 5A 00              6306 	.dw #0x005a
   0137 02 00              6307 	.dw #0x0002
   0139 00 00              6308 	.dw #0x0000
   013B D0 02              6309 	.dw #0x02d0
   013D 01                 6310 	.db #0x01	; 1
   013E 00 00              6311 	.dw #0x0000
   0140 00 00              6312 	.dw #0x0000
   0142 00 00              6313 	.dw #0x0000
   0144 00 00              6314 	.dw #0x0000
   0146 00 00              6315 	.dw #0x0000
   0148 00 00              6316 	.dw #0x0000
   014A 01                 6317 	.db #0x01	; 1
   014B 00 00              6318 	.dw #0x0000
   014D 00 00              6319 	.dw #0x0000
   014F 00 00              6320 	.dw #0x0000
   0151 00 00              6321 	.dw #0x0000
   0153 00 00              6322 	.dw #0x0000
   0155 00 00              6323 	.dw #0x0000
   0157 01                 6324 	.db #0x01	; 1
   0158 00 00              6325 	.dw #0x0000
   015A 00 00              6326 	.dw #0x0000
   015C 00 00              6327 	.dw #0x0000
   015E 00 00              6328 	.dw #0x0000
   0160 00 00              6329 	.dw #0x0000
   0162 00 00              6330 	.dw #0x0000
   0164 04                 6331 	.db #0x04	; 4
   0165 00 00              6332 	.dw #0x0000
   0167 00 00              6333 	.dw #0x0000
   0169 00 00              6334 	.dw #0x0000
   016B 00 00              6335 	.dw #0x0000
   016D 00 00              6336 	.dw #0x0000
                           6337 	.area _CABS (ABS)
   7FF0                    6338 	.org 0x7FF0
                     7FF0  6339 G$__SMS__SEGA_signature$0$0 == .
   7FF0                    6340 ___SMS__SEGA_signature:
   7FF0 54                 6341 	.db #0x54	; 84	'T'
   7FF1 4D                 6342 	.db #0x4d	; 77	'M'
   7FF2 52                 6343 	.db #0x52	; 82	'R'
   7FF3 20                 6344 	.db #0x20	; 32
   7FF4 53                 6345 	.db #0x53	; 83	'S'
   7FF5 45                 6346 	.db #0x45	; 69	'E'
   7FF6 47                 6347 	.db #0x47	; 71	'G'
   7FF7 41                 6348 	.db #0x41	; 65	'A'
   7FF8 FF                 6349 	.db #0xff	; 255
   7FF9 FF                 6350 	.db #0xff	; 255
   7FFA FF                 6351 	.db #0xff	; 255
   7FFB FF                 6352 	.db #0xff	; 255
   7FFC 99                 6353 	.db #0x99	; 153
   7FFD 99                 6354 	.db #0x99	; 153
   7FFE 00                 6355 	.db #0x00	; 0
   7FFF 4C                 6356 	.db #0x4c	; 76	'L'
   7FCF                    6357 	.org 0x7FCF
                     7FCF  6358 G$__SMS__SDSC_author$0$0 == .
   7FCF                    6359 ___SMS__SDSC_author:
   7FCF 53 74 65 76 65 50  6360 	.ascii "StevePro Studios"
        72 6F 20 53 74 75
        64 69 6F 73
   7FDF 00                 6361 	.db 0x00
   7FC3                    6362 	.org 0x7FC3
                     7FC3  6363 G$__SMS__SDSC_name$0$0 == .
   7FC3                    6364 ___SMS__SDSC_name:
   7FC3 48 65 6C 6C 6F 20  6365 	.ascii "Hello World"
        57 6F 72 6C 64
   7FCE 00                 6366 	.db 0x00
   7F8C                    6367 	.org 0x7F8C
                     7F8C  6368 G$__SMS__SDSC_descr$0$0 == .
   7F8C                    6369 ___SMS__SDSC_descr:
   7F8C 53 69 6D 70 6C 65  6370 	.ascii "Simple Sega Master System demo to run on real hardware"
        20 53 65 67 61 20
        4D 61 73 74 65 72
        20 53 79 73 74 65
        6D 20 64 65 6D 6F
        20 74 6F 20 72 75
        6E 20 6F 6E 20 72
        65 61 6C 20 68 61
        72 64 77 61 72 65
   7FC2 00                 6371 	.db 0x00
   7FE0                    6372 	.org 0x7FE0
                     7FE0  6373 G$__SMS__SDSC_signature$0$0 == .
   7FE0                    6374 ___SMS__SDSC_signature:
   7FE0 53                 6375 	.db #0x53	; 83	'S'
   7FE1 44                 6376 	.db #0x44	; 68	'D'
   7FE2 53                 6377 	.db #0x53	; 83	'S'
   7FE3 43                 6378 	.db #0x43	; 67	'C'
   7FE4 01                 6379 	.db #0x01	; 1
   7FE5 00                 6380 	.db #0x00	; 0
   7FE6 15                 6381 	.db #0x15	; 21
   7FE7 09                 6382 	.db #0x09	; 9
   7FE8 17                 6383 	.db #0x17	; 23
   7FE9 20                 6384 	.db #0x20	; 32
   7FEA CF                 6385 	.db #0xcf	; 207
   7FEB 7F                 6386 	.db #0x7f	; 127
   7FEC C3                 6387 	.db #0xc3	; 195
   7FED 7F                 6388 	.db #0x7f	; 127
   7FEE 8C                 6389 	.db #0x8c	; 140
   7FEF 7F                 6390 	.db #0x7f	; 127
