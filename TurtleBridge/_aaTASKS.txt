TASKS
01-Mar-2023
CREDITS
as below for the marquee
don't forget - get the spelling correct
KAGESAN + TOMY


speed	1,2,3,4	single	min
speed	2,4,6,8	double	max
check that double speed is OK for all levels on emulator + real HW
update jump distances so that I know limits
i.e.
no impossible jumps

GET old build - I'm sure that old hard could not go over single gap
at 2px but only 3px


AUDIO
Get Ready PCM
Do I want to do the other AC/DC "RU ready">
+
Space Harrier	GetReady
Ready.wav
E:\GitHub\SteveProXNA\3Dcity\3Dcity.XNA\3Dcity.XNA\3Dcity.XNAContent\Sound


Quit from screens
death screen
pass  screen

add get out game to death and finish screens
e.g.
hold up for Xsecs and press fire2


28-Feb-2023
//Shinobi	complete screen
//Shinobi	death screen
//Beatscreen audio
//Contscreen audio
//GameOver   audio
4x physics arrays drop in and re-test them all

Audio prog yesterday
16-AudioDump
//consolidate into 1x file and start pairing
add the 3x audio files above
and the splash / title final bank

InsertCoins screen
want marquee that says
STEVEPRO STUDIOS WOULD LIKE TO THANK 
SVERX, BOCK, MAXIM, CALINDRO, 
ERUIZ, KUSFO, HAROLDOOK		sp
anyone else?

font_manager
single value for numbers
i.e. overload the data() fn

integrate the PSG FX code that banks and plays


Maximize + calculate screen / level budgets

Max out 256 command frames [int] + commands [bytes]
dump out binary file and read back in for command array to plug into fixed bank


27-Feb-2022
One month to go until deadline:

List of tasks

01.
Finalize audio
//get any outstanding tunes
//e.g.
//Shinobi	complete screen
//Beatscreen audio

stage play any other audio
SFX used from before	e.g. Cheat


PCMs consolidate into multiple banks


02.
Design ALL the levels

03.
Record playing levels for demo

04.
finalize level select - save in SRAM for future

04b.
level select screen by screen but
integrate checkpoints
each level has 4x checkpoints which is levelsize / 4

05.
finalize difficulty as can be in the air
hardcode the row where the text lives

06.
beat screen
record 4x difficulty for 4x the final beat screen

07.
loop game play from
init => load => [ready] => dead
init => load => [ready] => dead => init	checkpoint
init => load => [ready] => dead => cont
init => load => [ready] => dead => cont => init
init => load => [ready] => dead => cont => over

init => load => [ready] => pass
init => load => [ready] => pass => init

08.
additional sprites
heart??

09.
intro => demo
demo screen has commands text
 LEFT	RIGHT
   UP	 DOWN
FIRE1	FIRE2


10.
Integrate checkpoints into level manager
and while playing


11.
save in SRAM
world, round, check, diff


12.
Integrate cheat into "intro" screen
INSERT COIN(S)

if go back to title then revert
but if go fwd then keep...
can't use fire2 so maybe hold down for 5s


13.	DONE
//Level editor
//print the number of empty wave blocks to make it easier to eyeball and not have impossible levels
//copy the output of bank6.c back to the original file so don't have to manually copy n' paste

14.	DONE
//physics jump arrays
//midd	delta	range
//12	4	8,12,16
//9	3	6,9,12
//6	2	4,6,8
//3	1	2,3,4


MAXIMUM screens
must TEST TEST TEST this
example level
bank4.c
E:\GitHub\StevePro8\SegaMasterSystemLinux\TurtleBridge\maths\20-BankBuildSMS\dev\banks

here 8x 2KB [64x screens] = 16KB
but I want / must prove that the player tileX does not exceed 255..!!


8x levels per world

64x screens per level	2KB
64x screens per level	* 8x levels per world		16KB	 1x bank

32x screens per level	1KB	*  8x levels / world	 8KB	1/2 bank
32x screens per level	1KB	* 16x levels / world	16KB	 1x bank

16x screens per level  512B	*  8x levels / world	 4KB	1/4 bank
16x screens per level  512B	* 16x levels / world	 8KB	1/2 bank
16x screens per level  512B	* 32x levels / world	16KB	 1x bank



Tue 28th Feb night

//audio dump
//mix n' match pairs of files n' sizes <= 16KB

max out level
16KB	how many screens
don't render just dump out bytes
and import and try to re-build
what is the maximum here?
TODO	
once calc'd reverse engineer how many levels
with sufficient buffer for more levels in future

command
16	bytes place holder
256	int frames
256	byte cmds
C9	terminal

1x font valu
test on level screen update
