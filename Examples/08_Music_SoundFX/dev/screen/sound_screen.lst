                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module sound_screen
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _engine_text_manager_sound
                                     12 	.globl _engine_sound_manager_play
                                     13 	.globl _engine_input_manager_hold_fire2
                                     14 	.globl _engine_input_manager_hold_fire1
                                     15 	.globl _engine_input_manager_hold_right
                                     16 	.globl _engine_input_manager_hold_left
                                     17 	.globl _engine_input_manager_hold_down
                                     18 	.globl _engine_input_manager_hold_up
                                     19 	.globl _devkit_PSGSFXStop
                                     20 	.globl _screen_sound_screen_load
                                     21 	.globl _screen_sound_screen_update
                                     22 ;--------------------------------------------------------
                                     23 ; special function registers
                                     24 ;--------------------------------------------------------
                                     25 ;--------------------------------------------------------
                                     26 ; ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area _DATA
                                     29 ;--------------------------------------------------------
                                     30 ; ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area _INITIALIZED
                                     33 ;--------------------------------------------------------
                                     34 ; absolute external ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area _DABS (ABS)
                                     37 ;--------------------------------------------------------
                                     38 ; global & static initialisations
                                     39 ;--------------------------------------------------------
                                     40 	.area _HOME
                                     41 	.area _GSINIT
                                     42 	.area _GSFINAL
                                     43 	.area _GSINIT
                                     44 ;--------------------------------------------------------
                                     45 ; Home
                                     46 ;--------------------------------------------------------
                                     47 	.area _HOME
                                     48 	.area _HOME
                                     49 ;--------------------------------------------------------
                                     50 ; code
                                     51 ;--------------------------------------------------------
                                     52 	.area _CODE
                           000000    53 	G$screen_sound_screen_load$0$0	= .
                                     54 	.globl	G$screen_sound_screen_load$0$0
                           000000    55 	C$sound_screen.c$8$0_0$18	= .
                                     56 	.globl	C$sound_screen.c$8$0_0$18
                                     57 ;sound_screen.c:8: void screen_sound_screen_load()
                                     58 ;	---------------------------------
                                     59 ; Function screen_sound_screen_load
                                     60 ; ---------------------------------
      000000                         61 _screen_sound_screen_load::
                           000000    62 	C$sound_screen.c$10$1_0$18	= .
                                     63 	.globl	C$sound_screen.c$10$1_0$18
                                     64 ;sound_screen.c:10: engine_text_manager_sound();
                           000000    65 	C$sound_screen.c$11$1_0$18	= .
                                     66 	.globl	C$sound_screen.c$11$1_0$18
                                     67 ;sound_screen.c:11: }
                           000000    68 	C$sound_screen.c$11$1_0$18	= .
                                     69 	.globl	C$sound_screen.c$11$1_0$18
                           000000    70 	XG$screen_sound_screen_load$0$0	= .
                                     71 	.globl	XG$screen_sound_screen_load$0$0
      000000 C3r00r00         [10]   72 	jp	_engine_text_manager_sound
                           000003    73 	G$screen_sound_screen_update$0$0	= .
                                     74 	.globl	G$screen_sound_screen_update$0$0
                           000003    75 	C$sound_screen.c$13$1_0$20	= .
                                     76 	.globl	C$sound_screen.c$13$1_0$20
                                     77 ;sound_screen.c:13: void screen_sound_screen_update( unsigned char *screen_type )
                                     78 ;	---------------------------------
                                     79 ; Function screen_sound_screen_update
                                     80 ; ---------------------------------
      000003                         81 _screen_sound_screen_update::
                           000003    82 	C$sound_screen.c$15$1_0$20	= .
                                     83 	.globl	C$sound_screen.c$15$1_0$20
                                     84 ;sound_screen.c:15: unsigned char input = engine_input_manager_hold_fire1();
      000003 CDr00r00         [17]   85 	call	_engine_input_manager_hold_fire1
                           000006    86 	C$sound_screen.c$19$1_0$20	= .
                                     87 	.globl	C$sound_screen.c$19$1_0$20
                                     88 ;sound_screen.c:19: *screen_type = screen_type_joint;
      000006 D1               [10]   89 	pop	de
      000007 C1               [10]   90 	pop	bc
      000008 C5               [11]   91 	push	bc
      000009 D5               [11]   92 	push	de
                           00000A    93 	C$sound_screen.c$16$1_0$20	= .
                                     94 	.globl	C$sound_screen.c$16$1_0$20
                                     95 ;sound_screen.c:16: if( input )
      00000A 7D               [ 4]   96 	ld	a, l
      00000B B7               [ 4]   97 	or	a, a
      00000C 28 09            [12]   98 	jr	Z, 00102$
                           00000E    99 	C$sound_screen.c$18$2_0$21	= .
                                    100 	.globl	C$sound_screen.c$18$2_0$21
                                    101 ;sound_screen.c:18: devkit_PSGSFXStop();
      00000E C5               [11]  102 	push	bc
      00000F CDr00r00         [17]  103 	call	_devkit_PSGSFXStop
      000012 C1               [10]  104 	pop	bc
                           000013   105 	C$sound_screen.c$19$2_0$21	= .
                                    106 	.globl	C$sound_screen.c$19$2_0$21
                                    107 ;sound_screen.c:19: *screen_type = screen_type_joint;
      000013 3E 04            [ 7]  108 	ld	a, #0x04
      000015 02               [ 7]  109 	ld	(bc), a
                           000016   110 	C$sound_screen.c$20$2_0$21	= .
                                    111 	.globl	C$sound_screen.c$20$2_0$21
                                    112 ;sound_screen.c:20: return;
      000016 C9               [10]  113 	ret
      000017                        114 00102$:
                           000017   115 	C$sound_screen.c$23$1_0$20	= .
                                    116 	.globl	C$sound_screen.c$23$1_0$20
                                    117 ;sound_screen.c:23: input = engine_input_manager_hold_fire2();
      000017 C5               [11]  118 	push	bc
      000018 CDr00r00         [17]  119 	call	_engine_input_manager_hold_fire2
      00001B 7D               [ 4]  120 	ld	a, l
      00001C C1               [10]  121 	pop	bc
                           00001D   122 	C$sound_screen.c$24$1_0$20	= .
                                    123 	.globl	C$sound_screen.c$24$1_0$20
                                    124 ;sound_screen.c:24: if( input )
      00001D B7               [ 4]  125 	or	a, a
      00001E 28 04            [12]  126 	jr	Z, 00104$
                           000020   127 	C$sound_screen.c$26$2_0$22	= .
                                    128 	.globl	C$sound_screen.c$26$2_0$22
                                    129 ;sound_screen.c:26: *screen_type = screen_type_music;
      000020 3E 02            [ 7]  130 	ld	a, #0x02
      000022 02               [ 7]  131 	ld	(bc), a
                           000023   132 	C$sound_screen.c$27$2_0$22	= .
                                    133 	.globl	C$sound_screen.c$27$2_0$22
                                    134 ;sound_screen.c:27: return;
      000023 C9               [10]  135 	ret
      000024                        136 00104$:
                           000024   137 	C$sound_screen.c$30$1_0$20	= .
                                    138 	.globl	C$sound_screen.c$30$1_0$20
                                    139 ;sound_screen.c:30: if( engine_input_manager_hold_left() ||
      000024 C5               [11]  140 	push	bc
      000025 CDr00r00         [17]  141 	call	_engine_input_manager_hold_left
      000028 7D               [ 4]  142 	ld	a, l
      000029 C1               [10]  143 	pop	bc
      00002A B7               [ 4]  144 	or	a, a
      00002B 20 1B            [12]  145 	jr	NZ, 00105$
                           00002D   146 	C$sound_screen.c$31$1_0$20	= .
                                    147 	.globl	C$sound_screen.c$31$1_0$20
                                    148 ;sound_screen.c:31: engine_input_manager_hold_right() ||
      00002D C5               [11]  149 	push	bc
      00002E CDr00r00         [17]  150 	call	_engine_input_manager_hold_right
      000031 7D               [ 4]  151 	ld	a, l
      000032 C1               [10]  152 	pop	bc
      000033 B7               [ 4]  153 	or	a, a
      000034 20 12            [12]  154 	jr	NZ, 00105$
                           000036   155 	C$sound_screen.c$32$1_0$20	= .
                                    156 	.globl	C$sound_screen.c$32$1_0$20
                                    157 ;sound_screen.c:32: engine_input_manager_hold_up() ||
      000036 C5               [11]  158 	push	bc
      000037 CDr00r00         [17]  159 	call	_engine_input_manager_hold_up
      00003A 7D               [ 4]  160 	ld	a, l
      00003B C1               [10]  161 	pop	bc
      00003C B7               [ 4]  162 	or	a, a
      00003D 20 09            [12]  163 	jr	NZ, 00105$
                           00003F   164 	C$sound_screen.c$33$1_0$20	= .
                                    165 	.globl	C$sound_screen.c$33$1_0$20
                                    166 ;sound_screen.c:33: engine_input_manager_hold_down() )
      00003F C5               [11]  167 	push	bc
      000040 CDr00r00         [17]  168 	call	_engine_input_manager_hold_down
      000043 7D               [ 4]  169 	ld	a, l
      000044 C1               [10]  170 	pop	bc
      000045 B7               [ 4]  171 	or	a, a
      000046 28 05            [12]  172 	jr	Z, 00106$
      000048                        173 00105$:
                           000048   174 	C$sound_screen.c$35$2_0$23	= .
                                    175 	.globl	C$sound_screen.c$35$2_0$23
                                    176 ;sound_screen.c:35: engine_sound_manager_play();
      000048 C5               [11]  177 	push	bc
      000049 CDr00r00         [17]  178 	call	_engine_sound_manager_play
      00004C C1               [10]  179 	pop	bc
      00004D                        180 00106$:
                           00004D   181 	C$sound_screen.c$38$1_0$20	= .
                                    182 	.globl	C$sound_screen.c$38$1_0$20
                                    183 ;sound_screen.c:38: *screen_type = screen_type_sound;
      00004D 3E 03            [ 7]  184 	ld	a, #0x03
      00004F 02               [ 7]  185 	ld	(bc), a
                           000050   186 	C$sound_screen.c$39$1_0$20	= .
                                    187 	.globl	C$sound_screen.c$39$1_0$20
                                    188 ;sound_screen.c:39: }
                           000050   189 	C$sound_screen.c$39$1_0$20	= .
                                    190 	.globl	C$sound_screen.c$39$1_0$20
                           000050   191 	XG$screen_sound_screen_update$0$0	= .
                                    192 	.globl	XG$screen_sound_screen_update$0$0
      000050 C9               [10]  193 	ret
                                    194 	.area _CODE
                                    195 	.area _INITIALIZER
                                    196 	.area _CABS (ABS)
