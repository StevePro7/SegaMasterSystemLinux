                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module music_screen
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _engine_text_manager_music
                                     12 	.globl _engine_music_manager_play
                                     13 	.globl _engine_input_manager_hold_fire1
                                     14 	.globl _engine_input_manager_hold_right
                                     15 	.globl _engine_input_manager_hold_left
                                     16 	.globl _devkit_PSGSFXStop
                                     17 	.globl _devkit_PSGGetStatus
                                     18 	.globl _devkit_PSGResume
                                     19 	.globl _devkit_PSGStop
                                     20 	.globl _screen_music_screen_load
                                     21 	.globl _screen_music_screen_update
                                     22 ;--------------------------------------------------------
                                     23 ; special function registers
                                     24 ;--------------------------------------------------------
                                     25 ;--------------------------------------------------------
                                     26 ; ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area _DATA
                           000000    29 Fmusic_screen$prev_play_type$0_0$0==.
      000000                         30 _prev_play_type:
      000000                         31 	.ds 1
                           000001    32 Fmusic_screen$curr_play_type$0_0$0==.
      000001                         33 _curr_play_type:
      000001                         34 	.ds 1
                                     35 ;--------------------------------------------------------
                                     36 ; ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area _INITIALIZED
                                     39 ;--------------------------------------------------------
                                     40 ; absolute external ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area _DABS (ABS)
                                     43 ;--------------------------------------------------------
                                     44 ; global & static initialisations
                                     45 ;--------------------------------------------------------
                                     46 	.area _HOME
                                     47 	.area _GSINIT
                                     48 	.area _GSFINAL
                                     49 	.area _GSINIT
                                     50 ;--------------------------------------------------------
                                     51 ; Home
                                     52 ;--------------------------------------------------------
                                     53 	.area _HOME
                                     54 	.area _HOME
                                     55 ;--------------------------------------------------------
                                     56 ; code
                                     57 ;--------------------------------------------------------
                                     58 	.area _CODE
                           000000    59 	G$screen_music_screen_load$0$0	= .
                                     60 	.globl	G$screen_music_screen_load$0$0
                           000000    61 	C$music_screen.c$11$0_0$18	= .
                                     62 	.globl	C$music_screen.c$11$0_0$18
                                     63 ;music_screen.c:11: void screen_music_screen_load()
                                     64 ;	---------------------------------
                                     65 ; Function screen_music_screen_load
                                     66 ; ---------------------------------
      000000                         67 _screen_music_screen_load::
                           000000    68 	C$music_screen.c$13$1_0$18	= .
                                     69 	.globl	C$music_screen.c$13$1_0$18
                                     70 ;music_screen.c:13: devkit_PSGStop();
      000000 CDr00r00         [17]   71 	call	_devkit_PSGStop
                           000003    72 	C$music_screen.c$14$1_0$18	= .
                                     73 	.globl	C$music_screen.c$14$1_0$18
                                     74 ;music_screen.c:14: devkit_PSGSFXStop();
      000003 CDr00r00         [17]   75 	call	_devkit_PSGSFXStop
                           000006    76 	C$music_screen.c$16$1_0$18	= .
                                     77 	.globl	C$music_screen.c$16$1_0$18
                                     78 ;music_screen.c:16: engine_text_manager_music();
      000006 CDr00r00         [17]   79 	call	_engine_text_manager_music
                           000009    80 	C$music_screen.c$17$1_0$18	= .
                                     81 	.globl	C$music_screen.c$17$1_0$18
                                     82 ;music_screen.c:17: prev_play_type = play_type_stop;
                           000009    83 	C$music_screen.c$18$1_0$18	= .
                                     84 	.globl	C$music_screen.c$18$1_0$18
                                     85 ;music_screen.c:18: curr_play_type = play_type_stop;
      000009 3E 04            [ 7]   86 	ld	a,#0x04
      00000B 32r00r00         [13]   87 	ld	(#_prev_play_type),a
      00000E 32r01r00         [13]   88 	ld	(#_curr_play_type), a
                           000011    89 	C$music_screen.c$19$1_0$18	= .
                                     90 	.globl	C$music_screen.c$19$1_0$18
                                     91 ;music_screen.c:19: }
                           000011    92 	C$music_screen.c$19$1_0$18	= .
                                     93 	.globl	C$music_screen.c$19$1_0$18
                           000011    94 	XG$screen_music_screen_load$0$0	= .
                                     95 	.globl	XG$screen_music_screen_load$0$0
      000011 C9               [10]   96 	ret
                           000012    97 	G$screen_music_screen_update$0$0	= .
                                     98 	.globl	G$screen_music_screen_update$0$0
                           000012    99 	C$music_screen.c$21$1_0$20	= .
                                    100 	.globl	C$music_screen.c$21$1_0$20
                                    101 ;music_screen.c:21: void screen_music_screen_update( unsigned char *screen_type )
                                    102 ;	---------------------------------
                                    103 ; Function screen_music_screen_update
                                    104 ; ---------------------------------
      000012                        105 _screen_music_screen_update::
                           000012   106 	C$music_screen.c$26$1_0$20	= .
                                    107 	.globl	C$music_screen.c$26$1_0$20
                                    108 ;music_screen.c:26: input = engine_input_manager_hold_fire1();
      000012 CDr00r00         [17]  109 	call	_engine_input_manager_hold_fire1
                           000015   110 	C$music_screen.c$30$1_0$20	= .
                                    111 	.globl	C$music_screen.c$30$1_0$20
                                    112 ;music_screen.c:30: *screen_type = screen_type_sound;
      000015 D1               [10]  113 	pop	de
      000016 C1               [10]  114 	pop	bc
      000017 C5               [11]  115 	push	bc
      000018 D5               [11]  116 	push	de
                           000019   117 	C$music_screen.c$27$1_0$20	= .
                                    118 	.globl	C$music_screen.c$27$1_0$20
                                    119 ;music_screen.c:27: if( input )
      000019 7D               [ 4]  120 	ld	a, l
      00001A B7               [ 4]  121 	or	a, a
      00001B 28 09            [12]  122 	jr	Z, 00102$
                           00001D   123 	C$music_screen.c$29$2_0$21	= .
                                    124 	.globl	C$music_screen.c$29$2_0$21
                                    125 ;music_screen.c:29: devkit_PSGStop();
      00001D C5               [11]  126 	push	bc
      00001E CDr00r00         [17]  127 	call	_devkit_PSGStop
      000021 C1               [10]  128 	pop	bc
                           000022   129 	C$music_screen.c$30$2_0$21	= .
                                    130 	.globl	C$music_screen.c$30$2_0$21
                                    131 ;music_screen.c:30: *screen_type = screen_type_sound;
      000022 3E 03            [ 7]  132 	ld	a, #0x03
      000024 02               [ 7]  133 	ld	(bc), a
                           000025   134 	C$music_screen.c$31$2_0$21	= .
                                    135 	.globl	C$music_screen.c$31$2_0$21
                                    136 ;music_screen.c:31: return;
      000025 C9               [10]  137 	ret
      000026                        138 00102$:
                           000026   139 	C$music_screen.c$34$1_0$20	= .
                                    140 	.globl	C$music_screen.c$34$1_0$20
                                    141 ;music_screen.c:34: input = engine_input_manager_hold_left();
      000026 C5               [11]  142 	push	bc
      000027 CDr00r00         [17]  143 	call	_engine_input_manager_hold_left
      00002A 7D               [ 4]  144 	ld	a, l
      00002B C1               [10]  145 	pop	bc
                           00002C   146 	C$music_screen.c$35$1_0$20	= .
                                    147 	.globl	C$music_screen.c$35$1_0$20
                                    148 ;music_screen.c:35: if( input )
      00002C B7               [ 4]  149 	or	a, a
      00002D 28 24            [12]  150 	jr	Z, 00108$
                           00002F   151 	C$music_screen.c$37$2_0$22	= .
                                    152 	.globl	C$music_screen.c$37$2_0$22
                                    153 ;music_screen.c:37: if( play_type_stop == prev_play_type && play_type_stop == curr_play_type )
      00002F 3Ar00r00         [13]  154 	ld	a,(#_prev_play_type + 0)
      000032 D6 04            [ 7]  155 	sub	a, #0x04
      000034 20 13            [12]  156 	jr	NZ, 00104$
      000036 3Ar01r00         [13]  157 	ld	a,(#_curr_play_type + 0)
      000039 D6 04            [ 7]  158 	sub	a, #0x04
      00003B 20 0C            [12]  159 	jr	NZ, 00104$
                           00003D   160 	C$music_screen.c$39$3_0$23	= .
                                    161 	.globl	C$music_screen.c$39$3_0$23
                                    162 ;music_screen.c:39: engine_music_manager_play();
      00003D C5               [11]  163 	push	bc
      00003E CDr00r00         [17]  164 	call	_engine_music_manager_play
      000041 C1               [10]  165 	pop	bc
                           000042   166 	C$music_screen.c$40$3_0$23	= .
                                    167 	.globl	C$music_screen.c$40$3_0$23
                                    168 ;music_screen.c:40: curr_play_type = play_type_start;
      000042 21r01r00         [10]  169 	ld	hl, #_curr_play_type
      000045 36 01            [10]  170 	ld	(hl), #0x01
      000047 18 0A            [12]  171 	jr	00108$
      000049                        172 00104$:
                           000049   173 	C$music_screen.c$44$3_0$24	= .
                                    174 	.globl	C$music_screen.c$44$3_0$24
                                    175 ;music_screen.c:44: devkit_PSGResume();
      000049 C5               [11]  176 	push	bc
      00004A CDr00r00         [17]  177 	call	_devkit_PSGResume
      00004D C1               [10]  178 	pop	bc
                           00004E   179 	C$music_screen.c$45$3_0$24	= .
                                    180 	.globl	C$music_screen.c$45$3_0$24
                                    181 ;music_screen.c:45: curr_play_type = play_type_resume;
      00004E 21r01r00         [10]  182 	ld	hl, #_curr_play_type
      000051 36 03            [10]  183 	ld	(hl), #0x03
      000053                        184 00108$:
                           000053   185 	C$music_screen.c$49$1_0$20	= .
                                    186 	.globl	C$music_screen.c$49$1_0$20
                                    187 ;music_screen.c:49: input = engine_input_manager_hold_right();
      000053 C5               [11]  188 	push	bc
      000054 CDr00r00         [17]  189 	call	_engine_input_manager_hold_right
      000057 7D               [ 4]  190 	ld	a, l
      000058 C1               [10]  191 	pop	bc
                           000059   192 	C$music_screen.c$50$1_0$20	= .
                                    193 	.globl	C$music_screen.c$50$1_0$20
                                    194 ;music_screen.c:50: if( input )
      000059 B7               [ 4]  195 	or	a, a
      00005A 28 1B            [12]  196 	jr	Z, 00112$
                           00005C   197 	C$music_screen.c$52$2_0$25	= .
                                    198 	.globl	C$music_screen.c$52$2_0$25
                                    199 ;music_screen.c:52: if( play_type_pause != curr_play_type )
      00005C FD 21r01r00      [14]  200 	ld	iy, #_curr_play_type
      000060 FD 7E 00         [19]  201 	ld	a, 0 (iy)
      000063 D6 02            [ 7]  202 	sub	a, #0x02
      000065 28 10            [12]  203 	jr	Z, 00112$
                           000067   204 	C$music_screen.c$54$3_0$26	= .
                                    205 	.globl	C$music_screen.c$54$3_0$26
                                    206 ;music_screen.c:54: prev_play_type = curr_play_type;
      000067 FD 7E 00         [19]  207 	ld	a, 0 (iy)
      00006A 32r00r00         [13]  208 	ld	(#_prev_play_type),a
                           00006D   209 	C$music_screen.c$55$3_0$26	= .
                                    210 	.globl	C$music_screen.c$55$3_0$26
                                    211 ;music_screen.c:55: devkit_PSGStop();
      00006D C5               [11]  212 	push	bc
      00006E CDr00r00         [17]  213 	call	_devkit_PSGStop
      000071 C1               [10]  214 	pop	bc
                           000072   215 	C$music_screen.c$56$3_0$26	= .
                                    216 	.globl	C$music_screen.c$56$3_0$26
                                    217 ;music_screen.c:56: curr_play_type = play_type_pause;
      000072 21r01r00         [10]  218 	ld	hl, #_curr_play_type
      000075 36 02            [10]  219 	ld	(hl), #0x02
      000077                        220 00112$:
                           000077   221 	C$music_screen.c$61$1_0$20	= .
                                    222 	.globl	C$music_screen.c$61$1_0$20
                                    223 ;music_screen.c:61: sound = devkit_PSGGetStatus();
      000077 C5               [11]  224 	push	bc
      000078 CDr00r00         [17]  225 	call	_devkit_PSGGetStatus
      00007B 7D               [ 4]  226 	ld	a, l
      00007C C1               [10]  227 	pop	bc
                           00007D   228 	C$music_screen.c$62$1_0$20	= .
                                    229 	.globl	C$music_screen.c$62$1_0$20
                                    230 ;music_screen.c:62: if( !sound )
      00007D B7               [ 4]  231 	or	a, a
      00007E 20 05            [12]  232 	jr	NZ, 00114$
                           000080   233 	C$music_screen.c$64$2_0$27	= .
                                    234 	.globl	C$music_screen.c$64$2_0$27
                                    235 ;music_screen.c:64: curr_play_type = play_type_stop;
      000080 3E 04            [ 7]  236 	ld	a, #0x04
      000082 32r01r00         [13]  237 	ld	(#_curr_play_type), a
      000085                        238 00114$:
                           000085   239 	C$music_screen.c$67$1_0$20	= .
                                    240 	.globl	C$music_screen.c$67$1_0$20
                                    241 ;music_screen.c:67: *screen_type = screen_type_music;
      000085 3E 02            [ 7]  242 	ld	a, #0x02
      000087 02               [ 7]  243 	ld	(bc), a
                           000088   244 	C$music_screen.c$68$1_0$20	= .
                                    245 	.globl	C$music_screen.c$68$1_0$20
                                    246 ;music_screen.c:68: }
                           000088   247 	C$music_screen.c$68$1_0$20	= .
                                    248 	.globl	C$music_screen.c$68$1_0$20
                           000088   249 	XG$screen_music_screen_update$0$0	= .
                                    250 	.globl	XG$screen_music_screen_update$0$0
      000088 C9               [10]  251 	ret
                                    252 	.area _CODE
                                    253 	.area _INITIALIZER
                                    254 	.area _CABS (ABS)
