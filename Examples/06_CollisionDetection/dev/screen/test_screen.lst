                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.9 #9960 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module test_screen
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _engine_input_manager_hold_fire2
                             12 	.globl _engine_gamer_manager_draw
                             13 	.globl _engine_gamer_manager_update
                             14 	.globl _engine_gamer_manager_load
                             15 	.globl _engine_font_manager_draw_data
                             16 	.globl _engine_font_manager_draw_text
                             17 	.globl _engine_enemy_manager_draw
                             18 	.globl _engine_enemy_manager_load
                             19 	.globl _devkit_isCollisionDetected
                             20 	.globl _screen_test_screen_load
                             21 	.globl _screen_test_screen_update
                             22 ;--------------------------------------------------------
                             23 ; special function registers
                             24 ;--------------------------------------------------------
                             25 ;--------------------------------------------------------
                             26 ; ram data
                             27 ;--------------------------------------------------------
                             28 	.area _DATA
                             29 ;--------------------------------------------------------
                             30 ; ram data
                             31 ;--------------------------------------------------------
                             32 	.area _INITIALIZED
                             33 ;--------------------------------------------------------
                             34 ; absolute external ram data
                             35 ;--------------------------------------------------------
                             36 	.area _DABS (ABS)
                             37 ;--------------------------------------------------------
                             38 ; global & static initialisations
                             39 ;--------------------------------------------------------
                             40 	.area _HOME
                             41 	.area _GSINIT
                             42 	.area _GSFINAL
                             43 	.area _GSINIT
                             44 ;--------------------------------------------------------
                             45 ; Home
                             46 ;--------------------------------------------------------
                             47 	.area _HOME
                             48 	.area _HOME
                             49 ;--------------------------------------------------------
                             50 ; code
                             51 ;--------------------------------------------------------
                             52 	.area _CODE
                     0000    53 	G$screen_test_screen_load$0$0	= .
                             54 	.globl	G$screen_test_screen_load$0$0
                     0000    55 	C$test_screen.c$11$0$0	= .
                             56 	.globl	C$test_screen.c$11$0$0
                             57 ;test_screen.c:11: void screen_test_screen_load()
                             58 ;	---------------------------------
                             59 ; Function screen_test_screen_load
                             60 ; ---------------------------------
   0000                      61 _screen_test_screen_load::
                     0000    62 	C$test_screen.c$13$1$23	= .
                             63 	.globl	C$test_screen.c$13$1$23
                             64 ;test_screen.c:13: engine_font_manager_draw_text( LOCALE_BLANK, 9, 10, 11 );
   0000 21 0A 0B      [10]   65 	ld	hl, #0x0b0a
   0003 E5            [11]   66 	push	hl
   0004 3E 09         [ 7]   67 	ld	a, #0x09
   0006 F5            [11]   68 	push	af
   0007 33            [ 6]   69 	inc	sp
   0008 21r3Ar00      [10]   70 	ld	hl, #___str_0
   000B E5            [11]   71 	push	hl
   000C CDr00r00      [17]   72 	call	_engine_font_manager_draw_text
   000F F1            [10]   73 	pop	af
                     0010    74 	C$test_screen.c$14$1$23	= .
                             75 	.globl	C$test_screen.c$14$1$23
                             76 ;test_screen.c:14: engine_font_manager_draw_text( LOCALE_BLANK, 9, 10, 12 );
   0010 33            [ 6]   77 	inc	sp
   0011 21 0A 0C      [10]   78 	ld	hl,#0x0c0a
   0014 E3            [19]   79 	ex	(sp),hl
   0015 3E 09         [ 7]   80 	ld	a, #0x09
   0017 F5            [11]   81 	push	af
   0018 33            [ 6]   82 	inc	sp
   0019 21r3Ar00      [10]   83 	ld	hl, #___str_0
   001C E5            [11]   84 	push	hl
   001D CDr00r00      [17]   85 	call	_engine_font_manager_draw_text
   0020 F1            [10]   86 	pop	af
                     0021    87 	C$test_screen.c$15$1$23	= .
                             88 	.globl	C$test_screen.c$15$1$23
                             89 ;test_screen.c:15: engine_font_manager_draw_text( LOCALE_STATUS, 6, 4, 21 );
   0021 33            [ 6]   90 	inc	sp
   0022 21 04 15      [10]   91 	ld	hl,#0x1504
   0025 E3            [19]   92 	ex	(sp),hl
   0026 3E 06         [ 7]   93 	ld	a, #0x06
   0028 F5            [11]   94 	push	af
   0029 33            [ 6]   95 	inc	sp
   002A 21r44r00      [10]   96 	ld	hl, #___str_1
   002D E5            [11]   97 	push	hl
   002E CDr00r00      [17]   98 	call	_engine_font_manager_draw_text
   0031 F1            [10]   99 	pop	af
   0032 F1            [10]  100 	pop	af
   0033 33            [ 6]  101 	inc	sp
                     0034   102 	C$test_screen.c$17$1$23	= .
                            103 	.globl	C$test_screen.c$17$1$23
                            104 ;test_screen.c:17: engine_gamer_manager_load();
   0034 CDr00r00      [17]  105 	call	_engine_gamer_manager_load
                     0037   106 	C$test_screen.c$18$1$23	= .
                            107 	.globl	C$test_screen.c$18$1$23
                            108 ;test_screen.c:18: engine_enemy_manager_load();
                     0037   109 	C$test_screen.c$19$1$23	= .
                            110 	.globl	C$test_screen.c$19$1$23
                     0037   111 	XG$screen_test_screen_load$0$0	= .
                            112 	.globl	XG$screen_test_screen_load$0$0
   0037 C3r00r00      [10]  113 	jp  _engine_enemy_manager_load
                     003A   114 Ftest_screen$__str_0$0$0 == .
   003A                     115 ___str_0:
   003A 20 20 20 20 20 20   116 	.ascii "         "
        20 20 20
   0043 00                  117 	.db 0x00
                     0044   118 Ftest_screen$__str_1$0$0 == .
   0044                     119 ___str_1:
   0044 53 54 41 54 55 53   120 	.ascii "STATUS"
   004A 00                  121 	.db 0x00
                     004B   122 	G$screen_test_screen_update$0$0	= .
                            123 	.globl	G$screen_test_screen_update$0$0
                     004B   124 	C$test_screen.c$21$1$23	= .
                            125 	.globl	C$test_screen.c$21$1$23
                            126 ;test_screen.c:21: void screen_test_screen_update( unsigned char *screen_type )
                            127 ;	---------------------------------
                            128 ; Function screen_test_screen_update
                            129 ; ---------------------------------
   004B                     130 _screen_test_screen_update::
                     004B   131 	C$test_screen.c$26$1$25	= .
                            132 	.globl	C$test_screen.c$26$1$25
                            133 ;test_screen.c:26: engine_gamer_manager_update();
   004B CDr00r00      [17]  134 	call	_engine_gamer_manager_update
                     004E   135 	C$test_screen.c$27$1$25	= .
                            136 	.globl	C$test_screen.c$27$1$25
                            137 ;test_screen.c:27: engine_gamer_manager_draw();
   004E CDr00r00      [17]  138 	call	_engine_gamer_manager_draw
                     0051   139 	C$test_screen.c$28$1$25	= .
                            140 	.globl	C$test_screen.c$28$1$25
                            141 ;test_screen.c:28: engine_enemy_manager_draw();
   0051 CDr00r00      [17]  142 	call	_engine_enemy_manager_draw
                     0054   143 	C$test_screen.c$30$1$25	= .
                            144 	.globl	C$test_screen.c$30$1$25
                            145 ;test_screen.c:30: collide = devkit_isCollisionDetected();
   0054 CDr00r00      [17]  146 	call	_devkit_isCollisionDetected
   0057 AF            [ 4]  147 	xor	a, a
   0058 BD            [ 4]  148 	cp	a, l
   0059 17            [ 4]  149 	rla
   005A 4F            [ 4]  150 	ld	c, a
                     005B   151 	C$test_screen.c$31$1$25	= .
                            152 	.globl	C$test_screen.c$31$1$25
                            153 ;test_screen.c:31: engine_font_manager_draw_data( collide, 23, 21 );
   005B 06 00         [ 7]  154 	ld	b, #0x00
   005D 21 17 15      [10]  155 	ld	hl, #0x1517
   0060 E5            [11]  156 	push	hl
   0061 C5            [11]  157 	push	bc
   0062 CDr00r00      [17]  158 	call	_engine_font_manager_draw_data
   0065 F1            [10]  159 	pop	af
   0066 F1            [10]  160 	pop	af
                     0067   161 	C$test_screen.c$33$1$25	= .
                            162 	.globl	C$test_screen.c$33$1$25
                            163 ;test_screen.c:33: input = engine_input_manager_hold_fire2();
   0067 CDr00r00      [17]  164 	call	_engine_input_manager_hold_fire2
   006A 4D            [ 4]  165 	ld	c, l
                     006B   166 	C$test_screen.c$36$1$25	= .
                            167 	.globl	C$test_screen.c$36$1$25
                            168 ;test_screen.c:36: *screen_type = screen_type_load;
   006B D1            [10]  169 	pop	de
   006C E1            [10]  170 	pop	hl
   006D E5            [11]  171 	push	hl
   006E D5            [11]  172 	push	de
                     006F   173 	C$test_screen.c$34$1$25	= .
                            174 	.globl	C$test_screen.c$34$1$25
                            175 ;test_screen.c:34: if ( input )
   006F 79            [ 4]  176 	ld	a, c
   0070 B7            [ 4]  177 	or	a, a
   0071 28 03         [12]  178 	jr	Z,00102$
                     0073   179 	C$test_screen.c$36$2$26	= .
                            180 	.globl	C$test_screen.c$36$2$26
                            181 ;test_screen.c:36: *screen_type = screen_type_load;
   0073 36 02         [10]  182 	ld	(hl), #0x02
                     0075   183 	C$test_screen.c$37$2$26	= .
                            184 	.globl	C$test_screen.c$37$2$26
                            185 ;test_screen.c:37: return;
   0075 C9            [10]  186 	ret
   0076                     187 00102$:
                     0076   188 	C$test_screen.c$40$1$25	= .
                            189 	.globl	C$test_screen.c$40$1$25
                            190 ;test_screen.c:40: *screen_type = screen_type_test;
   0076 36 03         [10]  191 	ld	(hl), #0x03
                     0078   192 	C$test_screen.c$41$1$25	= .
                            193 	.globl	C$test_screen.c$41$1$25
                     0078   194 	XG$screen_test_screen_update$0$0	= .
                            195 	.globl	XG$screen_test_screen_update$0$0
   0078 C9            [10]  196 	ret
                            197 	.area _CODE
                            198 	.area _INITIALIZER
                            199 	.area _CABS (ABS)
